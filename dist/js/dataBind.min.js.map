{"version":3,"sources":["dataBind.min.js"],"names":["global","factory","exports","module","define","amd","globalThis","self","dataBind","this","bindingAttrs$1","comp","tmp","text","click","dblclick","blur","focus","hover","change","submit","model","show","css","attr","forOf","if","switch","case","default","serverRenderedAttr","commentPrefix","commentSuffix","bindingDataReference","bindingUpdateConditions","maxDatakeyLength","constants","ONCE","hasIsArray","Array","isArray","REGEX","BAD_TAGS","FOR_OF","FUNCTION_PARAM","HTML_TAG","OBJECT_LITERAL","PIPE","WHITE_SPACES","LINE_BREAKS_TABS","IS_SUPPORT_TEMPLATE","document","createElement","WRAP_MAP","div","thead","col","tr","td","caption","colgroup","tbody","tfoot","th","obj","Object","prototype","toString","call","isJsObject","isPlainObject","ctor","constructor","prot","hasOwnProperty","isEmptyObject","getOwnPropertyNames","length","createHtmlFragment","htmlString","template","innerHTML","replace","removeBadTags","content","fragment","createDocumentFragment","queryContainer","firstTag","match","getFirstHtmlStringTag","wrap","createRange","createContextualFragment","insertAdjacentHTML","query","querySelector","firstChild","appendChild","getViewModelValue","viewModel","prop","split","filter","Boolean","every","step","undefined","def","setViewModelValue","value","path","slice","reduce","a","c","i","Math","abs","_set","getViewModelPropValue","bindingCache","dataKey","paramList","parameters","isInvertBoolean","charAt","substring","ret","viewModelContext","resolveViewModelContext","oldViewModelProValue","elementData","viewModelPropValue","resolveParamList","args","concat","el","apply","filtersViewModelPropValue","filters","each","index","filterFn","err","throwErrorMessage","createDeferredObj","dfObj","promise","Promise","resolve","reject","extend","isDeepMerge","target","sources","source","shift","isMergebleObject","keys","forEach","key","assign","fn","keysLength","isArrayObj","TypeError","item","insertAfter","parentNode","newNode","referenceNode","refNextElement","nextSibling","insertBefore","datakey","bindingDataContext","map","param","trim","emptyElement","node","removeChild","errorMessage","message","console","error","log","$domFragment","$templateRoot","nestTemplatesCount","renderTemplate","cache","bindingAttrs","elementCache","settings","str","JSON","parse","parseStringToJson","viewData","data","isAppend","append","isPrepend","prepend","$currentElement","$element","$index","getAttribute","htmlFragment","id","templateElement","getElementById","getTemplateString","childNodes","$nestedTemplates","querySelectorAll","nestedTemplatesLength","thisTemplateCache","push","afterTemplateRender","reUnescapedHtml","reHasUnescapedHtml","RegExp","htmlEscapes","escapeHtmlChar","chr","changeBinding","forceRender","handlerName","modelDataKey","newValue","oldValue","APP","$root","$rootElement","contains","handlerFn","changeHandler","e","$this","isCheckbox","type","string","checked","test","currentTarget","removeEventListener","addEventListener","attrBinding","isObjLiteralStr","isObjectLiteralString","vmAttrObj","objectLiteralString","keyVal","parseBindingObjectString","stringify","oldAttrObj","setAttribute","removeAttribute","bindingAttrsMap","walkDOM","func","parseChildNode","firstElementChild","nextElementSibling","rootSkipCheck","tagName","defaultSkipCheck","hasAttribute","populateBindingCache","attrObj","attrValue","cacheData","filterList","isOnceIndex","v","isOnce","splice","extractFilterList","paramlist","getFunctionParameterList","createBindingCache","rootNode","skipCheck","isRenderedTemplate","window","Node","sourceObj","parseNode","skipNodeCheckFn","isSkipForOfChild","nodeType","hasAttributes","attributes","name","getAttributesObject","hasSkipChildParseBindings","checkSkipChildParseBindings","iterateList","createClonedElementCache","bindingData","clonedElement","cloneNode","setCommentPrefix","commentPrefix$1","dataKeyMarker","setDocRangeEndAfter","endTextContent","textContent","docRange","setEndBefore","wrapCommentAround","prefix","commentBegin","createComment","commentEnd","previousNonTemplateElement","previousSibling","nextNonTemplateElement","parentElement","removeElemnetsByCommentWrap","setStartBefore","deleteContents","insertRenderedElements","createIterationViewModel","iterationData","iterationVm","iterator","alias","generateForOfElements","iterationDataLength","iterationSize","clonedItem","iterationBindingCache","renderIteration","isRegenerate","forOfBinding","forExpMatch","renderForOfBinding","renderIfBinding","isDomRemoved","commentStartTextContent","endCommentTag","isTargetDomRemoved","rootElement","removeIfBinding","hasIterationBindingCache","removeBindingInQueue","postProcessQueue","indexOf","removeUnmatchCases","cases","matchedIndex","caseData","createCaseData","attrName","createEventBinding","handlerWrap","formData","$form","HTMLFormElement","FormData","getFormData","createBindingOption","condition","opt","visualBindingOptions","templateBinding","textBinding","cssBinding","ifBinding","showBinding","modelBinding","switchBinding","eventsBindingOptions","clickBinding","dblclickBinding","blurBinding","focusBinding","hoverBinding","submitBinding","serverRenderedOptions","updateOption","EVENTS","subscribeEvent","instance","eventName","compId","subscriber","isSubscribed","some","bind","unsubscribeEvent","subscribersLength","compIdIndex","Binder","initRendered","render","ctx","rafId","from","arguments","cancelAnimationFrame","requestAnimationFrame","debounceRaf","isServerRendered","parseView","updateElementCache","templateCache","allCache","skipForOfParseFn","isRenderedTemplates","renderBindingOption","renderTemplatesBinding","applyBinding","postProcess","shouldRender","currentInlineSytle","currentInlineDisplaySytle","shouldShow","oldShowStatus","displayStyle","computedStyle","style","display","computeStyle","getComputedStyle","getPropertyValue","setProperty","removeProperty","newExpression","childrenElements","children","elementLength","isDefault","hasMatch","j","casesLength","newCaseValue","oldCssList","newCssList","vmCssListObj","vmCssListArray","isViewDataObject","isViewDataString","cssList","domCssList","classList","domCssListLength","frommArray","k","join","isRadio","inputName","$radioGroup","radioGroupLength","inHandlerName","outHandlerName","handlers","onMouseEnterHandler","onMouseLeaveHandler","tasks","task","String","subscribe","subscribeOnce","subscribeEventOnce","unsubscribe","unsubscribeAll","unsubscribeAllEvent","publish","publishEvent","bindingUpdateOption","isSupportPromise","use","init","warn","version"],"mappings":"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","file":"dataBind.min.js","sourcesContent":["/**\n * @gogocat/data-bind\n * version 1.10.0\n * By Adam Chow\n * link https://gogocat.github.io/dataBind/\n * license MIT\n * \n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.dataBind = factory());\n}(this, (function () { 'use strict';\n\n    const bindingAttrs$1 = {\n      comp: 'data-bind-comp',\n      tmp: 'data-bind-tmp',\n      text: 'data-bind-text',\n      click: 'data-bind-click',\n      dblclick: 'data-bind-dblclick',\n      blur: 'data-bind-blur',\n      focus: 'data-bind-focus',\n      hover: 'data-bind-hover',\n      change: 'data-bind-change',\n      submit: 'data-bind-submit',\n      model: 'data-bind-model',\n      show: 'data-bind-show',\n      css: 'data-bind-css',\n      attr: 'data-bind-attr',\n      forOf: 'data-bind-for',\n      if: 'data-bind-if',\n      switch: 'data-bind-switch',\n      case: 'data-bind-case',\n      default: 'data-bind-default'\n    };\n    const serverRenderedAttr = 'data-server-rendered';\n    const dataIndexAttr = 'data-index';\n    const commentPrefix = {\n      forOf: 'data-forOf_',\n      if: 'data-if_',\n      case: 'data-case_',\n      default: 'data-default_'\n    };\n    const commentSuffix = '_end';\n    const bindingDataReference = {\n      rootDataKey: '$root',\n      currentData: '$data',\n      currentIndex: '$index',\n      mouseEnterHandlerName: 'in',\n      mouseLeaveHandlerName: 'out'\n    };\n    const bindingUpdateConditions = {\n      serverRendered: 'SERVER-RENDERED',\n      init: 'INIT'\n    }; // maximum string length before running regex\n\n    const maxDatakeyLength = 250;\n    const constants = {\n      filters: {\n        ONCE: 'once'\n      },\n      PARENT_REF: '_parent'\n    };\n\n    const hasIsArray = Array.isArray;\n    const REGEX = {\n      BAD_TAGS: /<(script|del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/ig,\n      FOR_OF: /(.*?)\\s+(?:in|of)\\s+(.*)/,\n      FUNCTION_PARAM: /\\((.*?)\\)/,\n      HTML_TAG: /^[\\s]*<([a-z][^\\/\\s>]+)/i,\n      OBJECT_LITERAL: /^\\{.+\\}$/,\n      PIPE: /\\|/,\n      WHITE_SPACES: /\\s+/g,\n      LINE_BREAKS_TABS: /(\\r\\n|\\n|\\r|\\t)/gm\n    };\n    const IS_SUPPORT_TEMPLATE = ('content' in document.createElement('template'));\n    const WRAP_MAP = {\n      div: ['div', '<div>', '</div>'],\n      thead: ['table', '<table>', '</table>'],\n      col: ['colgroup', '<table><colgroup>', '</colgroup></table>'],\n      tr: ['tbody', '<table><tbody>', '</tbody></table>'],\n      td: ['tr', '<table><tr>', '</tr></table>']\n    };\n    WRAP_MAP.caption = WRAP_MAP.colgroup = WRAP_MAP.tbody = WRAP_MAP.tfoot = WRAP_MAP.thead;\n    WRAP_MAP.th = WRAP_MAP.td;\n\n    const isArray = obj => {\n      return hasIsArray ? Array.isArray(obj) : Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    const isJsObject = obj => {\n      return obj !== null && typeof obj === 'object' && Object.prototype.toString.call(obj) === '[object Object]';\n    };\n\n    const isPlainObject = obj => {\n      if (!isJsObject(obj)) {\n        return false;\n      } // If has modified constructor\n\n\n      const ctor = obj.constructor;\n      if (typeof ctor !== 'function') return false; // If has modified prototype\n\n      const prot = ctor.prototype;\n      if (isJsObject(prot) === false) return false; // If constructor does not have an Object-specific method\n\n      if (prot.hasOwnProperty('isPrototypeOf') === false) {\n        return false;\n      } // Most likely a plain Object\n\n\n      return true;\n    }; // test if string contains '{...}'. string must not contains tab, line breaks\n\n\n    const isObjectLiteralString = (str = '') => {\n      return REGEX.OBJECT_LITERAL.test(str);\n    };\n\n    const isEmptyObject = obj => {\n      if (isJsObject(obj)) {\n        return Object.getOwnPropertyNames(obj).length === 0;\n      }\n\n      return false;\n    };\n\n    function getFirstHtmlStringTag(htmlString) {\n      const match = htmlString.match(REGEX.HTML_TAG);\n\n      if (match) {\n        return match[1];\n      }\n\n      return null;\n    }\n\n    function removeBadTags(htmlString = '') {\n      return htmlString.replace(REGEX.BAD_TAGS, '');\n    }\n\n    function createHtmlFragment(htmlString) {\n      if (typeof htmlString !== 'string') {\n        return null;\n      } // use template element\n\n\n      if (IS_SUPPORT_TEMPLATE) {\n        const template = document.createElement('template');\n        template.innerHTML = removeBadTags(htmlString);\n        return template.content;\n      } // use document fragment with wrap html tag for tr, td etc.\n\n\n      const fragment = document.createDocumentFragment();\n      const queryContainer = document.createElement('div');\n      const firstTag = getFirstHtmlStringTag(htmlString);\n      const wrap = WRAP_MAP[firstTag || 'div'];\n\n      if (wrap[0] === 'div') {\n        return document.createRange().createContextualFragment(htmlString);\n      }\n\n      queryContainer.insertAdjacentHTML('beforeend', `${wrap[1]}${htmlString}${wrap[2]}`);\n      const query = queryContainer.querySelector(wrap[0]);\n\n      while (query.firstChild) {\n        fragment.appendChild(query.firstChild);\n      }\n\n      return fragment;\n    }\n\n\n    const _get = function get(obj, path, def) {\n      function everyFunc(step) {\n        return !(step && (obj = obj[step]) === undefined);\n      }\n\n      const fullPath = path.replace(/\\[/g, '.').replace(/]/g, '').split('.').filter(Boolean);\n      return fullPath.every(everyFunc) ? obj : def;\n    };\n    /**\r\n     * getViewModelValue\r\n     * @description walk a object by provided string path. eg 'a.b.c'\r\n     * @param {object} viewModel\r\n     * @param {string} prop\r\n     * @return {object}\r\n     */\n\n\n    const getViewModelValue = (viewModel, prop) => {\n      return _get(viewModel, prop);\n    }; // simplified version of Lodash _.set\n    // https://stackoverflow.com/questions/54733539/javascript-implementation-of-lodash-set-method\n\n\n    const _set = (obj, path, value) => {\n      if (Object(obj) !== obj) return obj; // When obj is not an object\n      // If not yet an array, get the keys from the string-path\n\n      if (!Array.isArray(path)) path = path.toString().match(/[^.[\\]]+/g) || []; // Iterate all of them except the last one\n\n      path.slice(0, -1).reduce((a, c, i) => Object(a[c]) === a[c] ? // Does the key exist and is its value an object?\n      // Yes: then follow that path\n      a[c] : // No: create the key. Is the next key a potential array-index?\n      a[c] = Math.abs(path[i + 1]) >> 0 === +path[i + 1] ? [] : // Yes: assign a new array object\n      {}, // No: assign a new plain object\n      obj)[path[path.length - 1]] = value; // Finally assign the value to the last key\n      // Return the top-level object to allow chaining\n\n      return obj;\n    };\n    /**\r\n     * setViewModelValue\r\n     * @description populate viewModel object by path string\r\n     * @param {object} obj\r\n     * @param {string} prop\r\n     * @param {string} value\r\n     * @return {call} underscore set\r\n     */\n\n\n    const setViewModelValue = (obj, prop, value) => {\n      return _set(obj, prop, value);\n    };\n\n    const getViewModelPropValue = (viewModel, bindingCache) => {\n      let dataKey = bindingCache.dataKey;\n      let paramList = bindingCache.parameters;\n      const isInvertBoolean = dataKey.charAt(0) === '!';\n\n      if (isInvertBoolean) {\n        dataKey = isInvertBoolean ? dataKey.substring(1) : dataKey;\n      }\n\n      let ret = getViewModelValue(viewModel, dataKey);\n\n      if (typeof ret === 'function') {\n        const viewModelContext = resolveViewModelContext(viewModel, dataKey);\n        const oldViewModelProValue = bindingCache.elementData ? bindingCache.elementData.viewModelPropValue : null;\n        paramList = paramList ? resolveParamList(viewModel, paramList) : []; // let args = [oldViewModelProValue, bindingCache.el].concat(paramList);\n\n        const args = paramList.concat([oldViewModelProValue, bindingCache.el]);\n        ret = ret.apply(viewModelContext, args);\n      }\n\n      ret = isInvertBoolean ? !Boolean(ret) : ret; // call through fitlers to get final value\n\n      ret = filtersViewModelPropValue({\n        value: ret,\n        viewModel: viewModel,\n        bindingCache: bindingCache\n      });\n      return ret;\n    };\n\n    const filtersViewModelPropValue = ({\n      value,\n      viewModel,\n      bindingCache\n    }) => {\n      let ret = value;\n\n      if (bindingCache.filters) {\n        each(bindingCache.filters, (index, filter) => {\n          const viewModelContext = resolveViewModelContext(viewModel, filter);\n          const filterFn = getViewModelValue.call(viewModelContext, viewModelContext, filter);\n\n          try {\n            ret = filterFn.call(viewModelContext, ret);\n          } catch (err) {\n            throwErrorMessage(err, `Invalid filter: ${filter}`);\n          }\n        });\n      }\n\n      return ret;\n    };\n\n    const parseStringToJson = str => {\n      // fix unquote or single quote keys and replace single quote to double quote\n      const ret = str.replace(/(\\s*?{\\s*?|\\s*?,\\s*?)(['\"])?([a-zA-Z0-9]+)(['\"])?:/g, '$1\"$3\":').replace(/'/g, '\"');\n      return JSON.parse(ret);\n    };\n    /**\r\n     * arrayRemoveMatch\r\n     * @description remove match items in fromArray out of toArray\r\n     * @param {array} toArray\r\n     * @param {array} frommArray\r\n     * @return {boolean}\r\n     */\n\n\n    const arrayRemoveMatch = (toArray, frommArray) => {\n      return toArray.filter((value, index) => {\n        return frommArray.indexOf(value) < 0;\n      });\n    };\n\n    const getFormData = $form => {\n      const data = {};\n\n      if (!$form instanceof HTMLFormElement) {\n        return data;\n      }\n\n      const formData = new FormData($form);\n      formData.forEach((value, key) => {\n        if (!Object.prototype.hasOwnProperty.call(Object, key)) {\n          data[key] = value;\n          return;\n        }\n\n        if (!Array.isArray(data[key])) {\n          data[key] = [data[key]];\n        }\n\n        data[key].push(value);\n      });\n      return data;\n    };\n    /**\r\n     * getFunctionParameterList\r\n     * @description convert parameter string to arrary\r\n     * eg. '(\"a\",\"b\",\"c\")' > [\"a\",\"b\",\"c\"]\r\n     * @param {string} str\r\n     * @return {array} paramlist\r\n     */\n\n\n    const getFunctionParameterList = str => {\n      if (!str || str.length > maxDatakeyLength) {\n        return;\n      }\n\n      let paramlist = str.match(REGEX.FUNCTION_PARAM);\n\n      if (paramlist && paramlist[1]) {\n        paramlist = paramlist[1].split(',');\n        paramlist.forEach(function (v, i) {\n          paramlist[i] = v.trim();\n        });\n      }\n\n      return paramlist;\n    };\n\n    const extractFilterList = cacheData => {\n      if (!cacheData || !cacheData.dataKey || cacheData.dataKey.length > maxDatakeyLength) {\n        return cacheData;\n      }\n\n      const filterList = cacheData.dataKey.split(REGEX.PIPE);\n      let isOnceIndex;\n      cacheData.dataKey = filterList[0].trim();\n\n      if (filterList.length > 1) {\n        filterList.shift(0);\n        filterList.forEach(function (v, i) {\n          filterList[i] = v.trim();\n\n          if (filterList[i] === constants.filters.ONCE) {\n            cacheData.isOnce = true;\n            isOnceIndex = i;\n          }\n        }); // don't store filter 'once' - because it is internal logic not a property from viewModel\n\n        if (isOnceIndex >= 0) {\n          filterList.splice(isOnceIndex, 1);\n        }\n\n        cacheData.filters = filterList;\n      }\n\n      return cacheData;\n    };\n\n    const invertObj = sourceObj => {\n      return Object.keys(sourceObj).reduce(function (obj, key) {\n        obj[sourceObj[key]] = key;\n        return obj;\n      }, {});\n    };\n\n    const createDeferredObj = () => {\n      const dfObj = {};\n      dfObj.promise = new Promise((resolve, reject) => {\n        dfObj.resolve = resolve;\n        dfObj.reject = reject;\n      });\n      return dfObj;\n    };\n    /**\r\n     * debounce\r\n     * @description decorate a function to be debounce using requestAnimationFrame\r\n     * @param {function} fn\r\n     * @param {context} ctx\r\n     * @return {function}\r\n     */\n\n\n    const debounceRaf = (fn, ctx = null) => {\n      return function (fn, ctx) {\n        let dfObj = createDeferredObj();\n        let rafId = 0; // return decorated fn\n\n        return function () {\n          /* eslint-disable prefer-rest-params */\n          const args = Array.from ? Array.from(arguments) : Array.prototype.slice.call(arguments);\n          window.cancelAnimationFrame(rafId);\n          rafId = window.requestAnimationFrame(() => {\n            try {\n              // fn is Binder.render function\n              fn.apply(ctx, args); // dfObj.resolve is function provided in .then promise chain\n              // ctx is the current component\n\n              dfObj.resolve(ctx);\n            } catch (err) {\n              console.error('error in rendering: ', err);\n              dfObj.reject(err);\n            } // reset dfObj - otherwise then callbacks will not be in execution order\n            // example:\n            // myApp.render().then(function(){console.log('ok1')});\n            // myApp.render().then(function(){console.log('ok2')});\n            // myApp.render().then(function(){console.log('ok3')});\n            // >> ok1, ok2, ok3\n\n\n            dfObj = createDeferredObj();\n            window.cancelAnimationFrame(rafId);\n          });\n          return dfObj.promise;\n        };\n      }(fn, ctx);\n    };\n    /**\r\n     * extend\r\n     * @param {boolean} isDeepMerge\r\n     * @param {object} target\r\n     * @param {object} sources\r\n     * @return {object} merged object\r\n     */\n\n\n    const extend = (isDeepMerge = false, target, ...sources) => {\n      if (!sources.length) {\n        return target;\n      }\n\n      const source = sources.shift();\n\n      if (source === undefined) {\n        return target;\n      }\n\n      if (!isDeepMerge) {\n        return Object.assign(target, ...sources);\n      }\n\n      if (isMergebleObject(target) && isMergebleObject(source)) {\n        Object.keys(source).forEach(key => {\n          if (isMergebleObject(source[key])) {\n            if (!target[key]) {\n              target[key] = {};\n            }\n\n            extend(target[key], source[key]);\n          } else {\n            target[key] = source[key];\n          }\n        });\n      }\n\n      return extend(true, target, ...sources);\n    };\n\n    const each = (obj, fn) => {\n      if (typeof obj !== 'object' || typeof fn !== 'function') {\n        return;\n      }\n\n      let keys = [];\n      let keysLength = 0;\n      const isArrayObj = isArray(obj);\n      let key;\n      let value;\n      let i = 0;\n\n      if (isArrayObj) {\n        keysLength = obj.length;\n      } else if (isJsObject(obj)) {\n        keys = Object.keys(obj);\n        keysLength = keys.length;\n      } else {\n        throw new TypeError('Object is not an array or object');\n      }\n\n      for (i = 0; i < keysLength; i += 1) {\n        if (isArrayObj) {\n          key = i;\n          value = obj[i];\n        } else {\n          key = keys[i];\n          value = obj[key];\n        }\n\n        fn(key, value);\n      }\n    };\n\n    const isMergebleObject = item => {\n      return isJsObject(item) && !isArray(item);\n    };\n    /**\r\n     * cloneDomNode\r\n     * @param {object} element\r\n     * @return {object} cloned element\r\n     * @description helper function to clone node\r\n     */\n\n\n    const cloneDomNode = element => {\n      return element.cloneNode(true);\n    };\n    /**\r\n     * insertAfter\r\n     * @param {object} parentNode\r\n     * @param {object} newNode\r\n     * @param {object} referenceNode\r\n     * @return {object} node\r\n     * @description helper function to insert new node before the reference node\r\n     */\n\n\n    const insertAfter = (parentNode, newNode, referenceNode) => {\n      const refNextElement = referenceNode && referenceNode.nextSibling ? referenceNode.nextSibling : null;\n      return parentNode.insertBefore(newNode, refNextElement);\n    };\n\n    const resolveViewModelContext = (viewModel, datakey) => {\n      let ret = viewModel;\n\n      if (typeof datakey !== 'string') {\n        return ret;\n      }\n\n      const bindingDataContext = datakey.split('.');\n\n      if (bindingDataContext.length > 1) {\n        if (bindingDataContext[0] === bindingDataReference.rootDataKey) {\n          ret = viewModel[bindingDataReference.rootDataKey] || viewModel;\n        } else if (bindingDataContext[0] === bindingDataReference.currentData) {\n          ret = viewModel[bindingDataReference.currentData] || viewModel;\n        }\n      }\n\n      return ret;\n    };\n\n    const resolveParamList = (viewModel, paramList) => {\n      if (!viewModel || !isArray(paramList)) {\n        return;\n      }\n\n      return paramList.map(param => {\n        param = param.trim();\n\n        if (param === bindingDataReference.currentIndex) {\n          // convert '$index' to value\n          param = viewModel[bindingDataReference.currentIndex];\n        } else if (param === bindingDataReference.currentData) {\n          // convert '$data' to value or current viewModel\n          param = viewModel[bindingDataReference.currentData] || viewModel;\n        } else if (param === bindingDataReference.rootDataKey) {\n          // convert '$root' to root viewModel\n          param = viewModel[bindingDataReference.rootDataKey] || viewModel;\n        }\n\n        return param;\n      });\n    };\n\n    const removeElement = el => {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    };\n\n    const emptyElement = node => {\n      if (node && node.firstChild) {\n        while (node.firstChild) {\n          node.removeChild(node.firstChild);\n        }\n      }\n\n      return node;\n    };\n\n    const throwErrorMessage = (err = null, errorMessage = '') => {\n      const message = err && err.message ? err.message : errorMessage;\n\n      if (typeof console.error === 'function') {\n        return console.error(message);\n      }\n\n      return console.log(message);\n    };\n    /**\r\n     * parseBindingObjectString\r\n     * @description parse bining object string to object with value always stringify\r\n     * @param {string} str - eg '{ id: $data.id, name: $data.name }'\r\n     * @return {object} - eg { id: '$data.id', name: '$data.name'}\r\n     */\n\n\n    const parseBindingObjectString = (str = '') => {\n      let objectLiteralString = str.trim();\n      const ret = {};\n\n      if (!REGEX.OBJECT_LITERAL.test(str)) {\n        return null;\n      } // clearn up line breaks and remove first { character\n\n\n      objectLiteralString = objectLiteralString.replace(REGEX.LINE_BREAKS_TABS, '').substring(1); // remove last } character\n\n      objectLiteralString = objectLiteralString.substring(0, objectLiteralString.length - 1);\n      objectLiteralString.split(',').forEach(keyVal => {\n        const prop = keyVal.split(':');\n        const key = prop[0].trim();\n        ret[key] = `${prop[1]}`.trim();\n      });\n      return ret;\n    };\n\n    let $domFragment = null;\n    let $templateRoot = null;\n    let nestTemplatesCount = 0;\n    /**\n     * getTemplateString\n     * @description get Template tag innerHTML string\n     * @param {string} id\n     * @return {string} rendered html string\n     */\n\n    const getTemplateString = id => {\n      const templateElement = document.getElementById(id);\n      return templateElement ? templateElement.innerHTML : '';\n    };\n    /**\n     * renderTemplate\n     * @description\n     * get template setting from DOM attribute then call compileTemplate\n     * to render and append to target DOM\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     * @param {object} elementCache\n     */\n\n\n    const renderTemplate = (cache, viewModel, bindingAttrs, elementCache) => {\n      const settings = typeof cache.dataKey === 'string' ? parseStringToJson(cache.dataKey) : cache.dataKey;\n      let viewData = settings.data;\n      const isAppend = settings.append;\n      const isPrepend = settings.prepend;\n      let $currentElement;\n      cache.dataKey = settings;\n      viewData = typeof viewData === 'undefined' || viewData === '$root' ? viewModel : getViewModelPropValue(viewModel, {\n        dataKey: settings.data,\n        parameters: cache.parameters\n      });\n\n      if (!viewData) {\n        return;\n      }\n\n      const $element = cache.el;\n      const $index = typeof viewModel.$index !== 'undefined' ? viewModel.$index : $element.getAttribute(dataIndexAttr);\n\n      if (typeof $index !== 'undefined') {\n        viewData.$index = $index;\n      }\n\n      $domFragment = $domFragment || document.createDocumentFragment();\n      $templateRoot = $templateRoot || $element;\n      const htmlString = getTemplateString(settings.id);\n      const htmlFragment = createHtmlFragment(htmlString); // append rendered html\n\n      if (!$domFragment.childNodes.length) {\n        // domFragment should be empty in first run\n        $currentElement = $domFragment; // copy of $domFragment for later find nested template check\n\n        $domFragment.appendChild(htmlFragment);\n      } else {\n        // during recursive run keep append to current fragment\n        $currentElement = $element; // reset to current nested template element\n\n        if (!isAppend && !isPrepend) {\n          $currentElement = emptyElement($currentElement);\n        }\n\n        if (isPrepend) {\n          $currentElement.insertBefore(htmlFragment, $currentElement.firstChild);\n        } else {\n          $currentElement.appendChild(htmlFragment);\n        }\n      } // check if there are nested template then recurisive render them\n\n\n      const $nestedTemplates = $currentElement.querySelectorAll('[' + bindingAttrs.tmp + ']');\n      const nestedTemplatesLength = $nestedTemplates.length;\n\n      if (nestedTemplatesLength) {\n        nestTemplatesCount += nestedTemplatesLength;\n\n        for (let i = 0; i < nestedTemplatesLength; i += 1) {\n          const thisTemplateCache = {\n            el: $nestedTemplates[i],\n            dataKey: $nestedTemplates[i].getAttribute(bindingAttrs.tmp)\n          };\n          elementCache[bindingAttrs.tmp].push(thisTemplateCache); // recursive template render\n\n          renderTemplate(thisTemplateCache, viewModel, bindingAttrs, elementCache);\n          nestTemplatesCount -= 1;\n        }\n      } // no more nested tempalted to render, start to append $domFragment into $templateRoot\n\n\n      if (nestTemplatesCount === 0) {\n        // append to DOM once\n        if (!isAppend && !isPrepend) {\n          $templateRoot = emptyElement($templateRoot);\n        }\n\n        if (isPrepend) {\n          $templateRoot.insertBefore($domFragment, $templateRoot.firstChild);\n        } else {\n          $templateRoot.appendChild($domFragment);\n        } // clear cached fragment\n\n\n        $domFragment = $templateRoot = null; // trigger callback if provided\n\n        if (typeof viewModel.afterTemplateRender === 'function') {\n          viewModel.afterTemplateRender(viewData);\n        }\n      }\n    };\n\n    /* eslint-disable no-invalid-this */\n    /**\n     * blurBinding\n     * DOM decleartive on blur event binding\n     * event handler bind to viewModel method according to the DOM attribute\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     * @param {boolean} forceRender\n     */\n\n    const hoverBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const handlerName = cache.dataKey;\n      let paramList = cache.parameters;\n      const inHandlerName = bindingDataReference.mouseEnterHandlerName;\n      const outHandlerName = bindingDataReference.mouseLeaveHandlerName;\n      let viewModelContext;\n      const APP = viewModel.APP || viewModel.$root.APP;\n      cache.elementData = cache.elementData || {}; // TODO: check what is APP.$rootElement.contains(cache.el)\n\n      if (!handlerName || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      const handlers = getViewModelValue(viewModel, handlerName);\n\n      if (handlers && typeof handlers[inHandlerName] === 'function' && typeof handlers[outHandlerName] === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        function onMouseEnterHandler(e) {\n          const args = [e, cache.el].concat(paramList);\n          handlers[inHandlerName].apply(viewModelContext, args);\n        }\n\n        function onMouseLeaveHandler(e) {\n          const args = [e, cache.el].concat(paramList);\n          handlers[outHandlerName].apply(viewModelContext, args);\n        }\n\n        cache.el.removeEventListener('mouseenter', onMouseEnterHandler, false);\n        cache.el.removeEventListener('mouseleave', onMouseLeaveHandler, false);\n        cache.el.addEventListener('mouseenter', onMouseEnterHandler, false);\n        cache.el.addEventListener('mouseleave', onMouseLeaveHandler, false);\n      }\n    };\n\n    /**\n     * _escape\n     * @description\n     * https://github.com/lodash/lodash/blob/master/escape.js\n     */\n    function baseToString(value) {\n      if (typeof value == 'string') {\n        return value;\n      }\n\n      return value == null ? '' : `${value}`;\n    }\n    /** Used to match HTML entities and HTML characters. */\n\n\n    const reUnescapedHtml = /[&<>\"'`]/g;\n    const reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n    /** Used to map characters to HTML entities. */\n\n    const htmlEscapes = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      '\\'': '&#39;',\n      '`': '&#96;'\n    };\n    /**\n       * escapeHtmlChar\n       * @description convert characters to HTML entities.\n       * @private\n       * @param {string} chr The matched character to escape.\n       * @return {string} Returns the escaped character.\n       */\n\n    function escapeHtmlChar(chr) {\n      return htmlEscapes[chr];\n    }\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to\n     * their corresponding HTML entities.\n     * @param {string} string\n     * @return {string} string\n     */\n\n\n    function escape(string) {\n      // Reset `lastIndex` because in IE < 9 `String#replace` does not.\n      string = baseToString(string);\n      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;\n    }\n\n    /* eslint-disable no-invalid-this */\n    /**\n     * changeBinding\n     * @description input element on change event binding. DOM -> viewModel update\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     * @param {boolean} forceRender\n     */\n\n    const changeBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const handlerName = cache.dataKey;\n      let paramList = cache.parameters;\n      const modelDataKey = cache.el.getAttribute(bindingAttrs.model);\n      let newValue = '';\n      let oldValue = '';\n      let viewModelContext;\n      const APP = viewModel.APP || viewModel.$root.APP;\n\n      if (!handlerName || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      const handlerFn = getViewModelValue(viewModel, handlerName);\n\n      if (typeof handlerFn === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        function changeHandler(e) {\n          const $this = this;\n          const isCheckbox = $this.type === 'checkbox';\n          newValue = isCheckbox ? $this.checked : escape($this.value); // set data to viewModel\n\n          if (modelDataKey) {\n            oldValue = getViewModelValue(viewModel, modelDataKey);\n            setViewModelValue(viewModel, modelDataKey, newValue);\n          }\n\n          const args = [e, e.currentTarget, newValue, oldValue].concat(paramList);\n          handlerFn.apply(viewModelContext, args);\n          oldValue = newValue;\n        } // assing on change event\n\n\n        cache.el.removeEventListener('change', changeHandler, false);\n        cache.el.addEventListener('change', changeHandler, false);\n      }\n    };\n\n    /**\n     * modelBinding\n     * @description input element data binding. viewModel -> DOM update\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     * @param {boolean} forceRender\n     */\n\n    const modelBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const dataKey = cache.dataKey;\n      let newValue = '';\n      const APP = viewModel.APP || viewModel.$root.APP;\n\n      if (!dataKey || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      newValue = getViewModelValue(viewModel, dataKey);\n\n      if (typeof newValue !== 'undefined' && newValue !== null) {\n        const $element = cache.el;\n        const isCheckbox = $element.type === 'checkbox';\n        const isRadio = $element.type === 'radio';\n        const inputName = $element.name;\n        const $radioGroup = isRadio ? APP.$rootElement.querySelectorAll(`input[name=\"${inputName}\"]`) : [];\n        const oldValue = isCheckbox ? $element.checked : $element.value; // update element value\n\n        if (newValue !== oldValue) {\n          if (isCheckbox) {\n            $element.checked = Boolean(newValue);\n          } else if (isRadio) {\n            let i = 0;\n            const radioGroupLength = $radioGroup.length;\n\n            for (i = 0; i < radioGroupLength; i += 1) {\n              if ($radioGroup[i].value === newValue) {\n                $radioGroup[i].checked = true;\n                break;\n              }\n            }\n          } else {\n            $element.value = newValue;\n          }\n        }\n      }\n    };\n\n    /**\n     * textBinding\n     * * @description\n     * DOM decleartive text binding update dom textnode with viewModel data\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     * @param {boolean} forceRender\n     */\n\n    const textBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const dataKey = cache.dataKey;\n      const APP = viewModel.APP || viewModel.$root.APP; // NOTE: this doesn't work for for-of, if and switch bindings because element was not in DOM\n\n      if (!dataKey || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      const newValue = getViewModelPropValue(viewModel, cache);\n      const oldValue = cache.el.textContent;\n\n      if (typeof newValue !== 'undefined' && typeof newValue !== 'object' && newValue !== null) {\n        if (newValue !== oldValue) {\n          cache.el.textContent = newValue;\n        }\n      }\n    };\n\n    /**\n     * showBinding\n     * @description\n     * DOM decleartive show binding. Make binding show/hide according to viewModel data (boolean)\n     * viewModel data can function but must return boolean\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     */\n\n    const showBinding = (cache, viewModel, bindingAttrs) => {\n      const dataKey = cache.dataKey;\n      let currentInlineSytle = {};\n      let currentInlineDisplaySytle = '';\n      let shouldShow = true;\n\n      if (!dataKey) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      const oldShowStatus = cache.elementData.viewModelPropValue; // store current element display default style once only\n\n      if (typeof cache.elementData.displayStyle === 'undefined' || typeof cache.elementData.computedStyle === 'undefined') {\n        currentInlineSytle = cache.el.style;\n        currentInlineDisplaySytle = currentInlineSytle.display; // use current inline style if defined\n\n        if (currentInlineDisplaySytle) {\n          // set to 'block' if is 'none'\n          cache.elementData.displayStyle = currentInlineDisplaySytle === 'none' ? 'block' : currentInlineDisplaySytle;\n          cache.elementData.computedStyle = null;\n        } else {\n          const computeStyle = window.getComputedStyle(cache.el, null).getPropertyValue('display');\n          cache.elementData.displayStyle = null;\n          cache.elementData.computedStyle = computeStyle;\n        }\n      }\n\n      shouldShow = getViewModelPropValue(viewModel, cache); // treat undefined || null as false.\n      // eg if property doesn't exsits in viewModel, it will treat as false to hide element\n\n      shouldShow = Boolean(shouldShow); // reject if nothing changed\n\n      if (oldShowStatus === shouldShow) {\n        return;\n      }\n\n      if (!shouldShow) {\n        if (cache.el.style.display !== 'none') {\n          cache.el.style.setProperty('display', 'none');\n        }\n      } else {\n        if (cache.elementData.computedStyle || cache.el.style.display === 'none') {\n          if (cache.elementData.computedStyle === 'none') {\n            // default display is none in css rule, so use display 'block'\n            cache.el.style.setProperty('display', 'block');\n          } else {\n            // has default displayable type so just remove inline display 'none'\n            if (currentInlineSytle.length > 1) {\n              cache.el.style.removeProperty('display');\n            } else {\n              cache.el.removeAttribute('style');\n            }\n          }\n        } else {\n          // element default display was inline style, so restore it\n          cache.el.style.setProperty('display', cache.elementData.displayStyle);\n        }\n      } // store new show status\n\n\n      cache.elementData.viewModelPropValue = shouldShow;\n    };\n\n    /**\n     * cssBinding\n     * @description\n     * DOM decleartive css binding. update classlist.\n     * viewModel data can function but must return JSOL.\n     * added css class if value is true\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     * @param {boolean} forceRender\n     */\n\n    const cssBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const dataKey = cache.dataKey;\n      const APP = viewModel.APP || viewModel.$root.APP;\n\n      if (!dataKey || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      cache.elementData.viewModelPropValue = cache.elementData.viewModelPropValue || '';\n      const oldCssList = cache.elementData.viewModelPropValue;\n      let newCssList = '';\n      const vmCssListObj = getViewModelPropValue(viewModel, cache);\n      let vmCssListArray = [];\n      let isViewDataObject = false;\n      let isViewDataString = false;\n      let cssList = [];\n\n      if (typeof vmCssListObj === 'string') {\n        isViewDataString = true;\n      } else if (isPlainObject(vmCssListObj)) {\n        isViewDataObject = true;\n      } else {\n        // reject if vmCssListObj is not an object or string\n        return;\n      }\n\n      if (isViewDataObject) {\n        newCssList = JSON.stringify(vmCssListObj);\n      } else {\n        newCssList = vmCssListObj.replace(/\\s\\s+/g, ' ').trim();\n        vmCssListArray = newCssList.split(' ');\n      } // reject if nothing changed\n\n\n      if (oldCssList === newCssList) {\n        return;\n      } // get current css classes from element\n\n\n      const domCssList = cache.el.classList; // clone domCssList as new array\n\n      const domCssListLength = domCssList.length;\n\n      for (let i = 0; i < domCssListLength; i += 1) {\n        cssList.push(domCssList[i]);\n      }\n\n      if (isViewDataObject) {\n        each(vmCssListObj, function (k, v) {\n          const i = cssList.indexOf(k);\n\n          if (v === true) {\n            cssList.push(k);\n          } else if (i !== -1) {\n            cssList.splice(i, 1);\n          }\n        });\n      } else if (isViewDataString) {\n        // remove oldCssList items from cssList\n        cssList = arrayRemoveMatch(cssList, oldCssList);\n        cssList = cssList.concat(vmCssListArray);\n      } // unique cssList array\n\n\n      cssList = cssList.filter((v, i, a) => {\n        return a.indexOf(v) === i;\n      });\n      cssList = cssList.join(' '); // update element data\n\n      cache.elementData.viewModelPropValue = newCssList; // replace all css classes\n\n      cache.el.setAttribute('class', cssList);\n    };\n\n    /**\n     * attrBinding\n     * @description\n     * DOM decleartive attr binding. update elenment attributes\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     */\n\n    const attrBinding = (cache, viewModel, bindingAttrs) => {\n      if (!cache.dataKey) {\n        return;\n      } // check if Object Literal String style dataKey\n\n\n      const isObjLiteralStr = isObjectLiteralString(cache.dataKey);\n      let vmAttrObj = {}; // populate cache.elementData if not exits\n\n      cache.elementData = cache.elementData || {}; // parse object literal like dataKey eg. { id: $data.id, name: $data.id }\n\n      if (isObjLiteralStr) {\n        // parse parse object literal string to object\n        vmAttrObj = parseBindingObjectString(cache.dataKey); // populate each value from viewModel\n\n        each(vmAttrObj, (key, value) => {\n          // resolve value from viewModel including $data and $root\n          // from viewModel.$data or viewModel.$root\n          vmAttrObj[key] = getViewModelPropValue(viewModel, {\n            dataKey: key\n          });\n        });\n      } else {\n        // resolve from viewModel\n        vmAttrObj = getViewModelPropValue(viewModel, cache);\n      } // vmAttrObj must be a plain object\n\n\n      if (!isPlainObject(vmAttrObj)) {\n        return;\n      } // check and set default cache.elementData.viewModelPropValue\n\n\n      cache.elementData.viewModelPropValue = cache.elementData.viewModelPropValue || {}; // reject if nothing changed by comparing cache.elementData.viewModelPropValue (previous render) vs vmAttrObj(current render)\n\n      if (JSON.stringify(cache.elementData.viewModelPropValue) === JSON.stringify(vmAttrObj)) {\n        return;\n      } // reset cache.elementData.viewModelPropValue\n\n\n      cache.elementData.viewModelPropValue = {};\n      const oldAttrObj = cache.elementData.viewModelPropValue;\n\n      if (isEmptyObject(oldAttrObj)) {\n        each(vmAttrObj, (key, value) => {\n          if (typeof value !== 'undefined') {\n            cache.el.setAttribute(key, value); // populate cache.elementData.viewModelPropValue for future comparison\n\n            if (!isObjLiteralStr) {\n              cache.elementData.viewModelPropValue[key] = value;\n            }\n          }\n        });\n      } else {\n        // loop oldAttrObj, remove attribute not present in current vmAttrObj\n        each(oldAttrObj, (key, value) => {\n          if (typeof vmAttrObj[key] === 'undefined') {\n            cache.el.removeAttribute(key);\n          }\n        }); // loop vmAttrObj, set attribute not present in oldAttrObj\n\n        each(vmAttrObj, (key, value) => {\n          if (typeof value !== 'undefined') {\n            if (oldAttrObj[key] !== vmAttrObj[key]) {\n              cache.el.setAttribute(key, vmAttrObj[key]); // populate cache.elementData.viewModelPropValue for future comparison\n\n              if (!isObjLiteralStr) {\n                cache.elementData.viewModelPropValue[key] = value;\n              }\n            }\n          }\n        });\n      } // for Object Literal only\n\n\n      if (isObjLiteralStr) {\n        cache.elementData.viewModelPropValue = extend({}, vmAttrObj);\n      }\n    };\n\n    let bindingAttrsMap;\n    /**\n     * walkDOM\n     * @description by Douglas Crockford - walk each DOM node and calls provided callback function\n     * start walk from firstChild\n     * @param {object} node\n     * @param {function} func\n     */\n\n    const walkDOM = (node, func) => {\n      let parseChildNode = true;\n      node = node.firstElementChild;\n\n      while (node) {\n        parseChildNode = func(node);\n\n        if (parseChildNode) {\n          walkDOM(node, func);\n        }\n\n        node = node.nextElementSibling;\n      }\n    };\n\n    const getAttributesObject = node => {\n      const ret = {};\n      Array.prototype.slice.call(node.attributes).forEach(item => {\n        ret[item.name] = item.value;\n      });\n      return ret;\n    };\n\n    const checkSkipChildParseBindings = (attrObj = {}, bindingAttrs) => {\n      return [bindingAttrs.forOf, bindingAttrs.if, bindingAttrs.case, bindingAttrs.default].filter(type => {\n        return typeof attrObj[type] !== 'undefined';\n      });\n    };\n\n    const rootSkipCheck = node => {\n      return node.tagName === 'SVG';\n    };\n\n    const defaultSkipCheck = (node, bindingAttrs) => {\n      return node.tagName === 'SVG' || node.hasAttribute(bindingAttrs.comp);\n    };\n\n    const populateBindingCache = ({\n      node,\n      attrObj,\n      bindingCache,\n      type\n    }) => {\n      let attrValue;\n      let cacheData;\n\n      if (bindingAttrsMap && bindingAttrsMap[type] && typeof attrObj[type] !== 'undefined') {\n        bindingCache[type] = bindingCache[type] || [];\n        attrValue = attrObj[type] || '';\n\n        if (attrValue) {\n          attrValue = attrValue.replace(REGEX.LINE_BREAKS_TABS, '').replace(REGEX.WHITE_SPACES, ' ').trim();\n        }\n\n        cacheData = {\n          el: node,\n          dataKey: attrValue\n        }; // populate cacheData.filters. update filterList first item as dataKey\n\n        cacheData = extractFilterList(cacheData); // populate cacheData.parameters\n        // for store function call parameters eg. '$index', '$root'\n        // useful with DOM for-loop template as reference to binding data\n\n        const paramList = getFunctionParameterList(cacheData.dataKey);\n\n        if (paramList) {\n          cacheData.parameters = paramList;\n          cacheData.dataKey = cacheData.dataKey.replace(REGEX.FUNCTION_PARAM, '').trim();\n        } // store parent array reference to cacheData\n\n\n        cacheData[constants.PARENT_REF] = bindingCache[type];\n        bindingCache[type].push(cacheData);\n      }\n\n      return bindingCache;\n    };\n\n    const createBindingCache = ({\n      rootNode = null,\n      bindingAttrs = {},\n      skipCheck,\n      isRenderedTemplate = false\n    }) => {\n      let bindingCache = {};\n\n      if (!rootNode instanceof window.Node) {\n        throw new TypeError('walkDOM: Expected a DOM node');\n      }\n\n      bindingAttrsMap = bindingAttrsMap || invertObj(bindingAttrs);\n\n      const parseNode = (node, skipNodeCheckFn = defaultSkipCheck) => {\n        let isSkipForOfChild = false;\n\n        if (node.nodeType !== 1 || !node.hasAttributes()) {\n          return true;\n        }\n\n        if (skipNodeCheckFn(node, bindingAttrs) || typeof skipCheck === 'function' && skipCheck(node)) {\n          return false;\n        } // when creating sub bindingCache if is for tmp binding\n        // skip same element that has forOf binding the  forOf is alredy parsed\n\n\n        const attrObj = getAttributesObject(node);\n        const hasSkipChildParseBindings = checkSkipChildParseBindings(attrObj, bindingAttrs);\n        let iterateList = [];\n\n        if (hasSkipChildParseBindings.length) {\n          isSkipForOfChild = true;\n          iterateList = hasSkipChildParseBindings;\n        } else if (isRenderedTemplate && attrObj[bindingAttrs.tmp]) {\n          // skip current node parse if was called by node has template binding and already rendered\n          return true;\n        } else {\n          iterateList = Object.keys(attrObj);\n        }\n\n        iterateList.forEach(key => {\n          // skip for switch case and default bining\n          if (key !== bindingAttrs.case && key !== bindingAttrs.default) {\n            bindingCache = populateBindingCache({\n              node: node,\n              attrObj: attrObj,\n              bindingCache: bindingCache,\n              type: key\n            });\n          }\n        }); // after cache forOf skip parse child nodes\n\n        if (isSkipForOfChild) {\n          return false;\n        }\n\n        return true;\n      };\n\n      if (parseNode(rootNode, rootSkipCheck)) {\n        walkDOM(rootNode, parseNode);\n      }\n\n      return bindingCache;\n    };\n\n    /* eslint-disable no-invalid-this */\n\n    const createClonedElementCache = bindingData => {\n      const clonedElement = bindingData.el.cloneNode(true);\n      bindingData.fragment = document.createDocumentFragment();\n      bindingData.fragment.appendChild(clonedElement);\n      return bindingData;\n    };\n\n    const setCommentPrefix = bindingData => {\n      if (!bindingData || !bindingData.type) {\n        return bindingData;\n      }\n\n      let commentPrefix$1 = '';\n      const dataKeyMarker = bindingData.dataKey ? bindingData.dataKey.replace(REGEX.WHITE_SPACES, '_') : '';\n\n      switch (bindingData.type) {\n        case bindingAttrs$1.forOf:\n          commentPrefix$1 = commentPrefix.forOf;\n          break;\n\n        case bindingAttrs$1.if:\n          commentPrefix$1 = commentPrefix.if;\n          break;\n\n        case bindingAttrs$1.case:\n          commentPrefix$1 = commentPrefix.case;\n          break;\n\n        case bindingAttrs$1.default:\n          commentPrefix$1 = commentPrefix.default;\n          break;\n      }\n\n      bindingData.commentPrefix = commentPrefix$1 + dataKeyMarker;\n      return bindingData;\n    };\n    /**\n     * setDocRangeEndAfter\n     * @param {object} node\n     * @param {object} bindingData\n     * @description\n     * recursive execution to find last wrapping comment node\n     * and set as bindingData.docRange.setEndAfter\n     * if not found deleteContents will has no operation\n     * @return {undefined}\n     */\n\n\n    const setDocRangeEndAfter = (node, bindingData) => {\n      if (!bindingData.commentPrefix) {\n        setCommentPrefix(bindingData);\n      }\n\n      const startTextContent = bindingData.commentPrefix;\n      const endTextContent = startTextContent + commentSuffix;\n      node = node.nextSibling; // check last wrap comment node\n\n      if (node) {\n        if (node.nodeType === 8 && node.textContent === endTextContent) {\n          return bindingData.docRange.setEndBefore(node);\n        }\n\n        setDocRangeEndAfter(node, bindingData);\n      }\n    };\n    /**\n     * wrapCommentAround\n     * @param {object} bindingData\n     * @param {Node} node\n     * @return {object} DOM fragment\n     * @description\n     * wrap frament with comment node\n     */\n\n\n    const wrapCommentAround = (bindingData, node) => {\n      let prefix = '';\n\n      if (!bindingData.commentPrefix) {\n        setCommentPrefix(bindingData);\n      }\n\n      prefix = bindingData.commentPrefix;\n      const commentBegin = document.createComment(prefix);\n      const commentEnd = document.createComment(prefix + commentSuffix); // document fragment - logic for ForOf binding\n      // check node.parentNode because node could be from cache and no longer in DOM\n\n      if (node.nodeType === 11) {\n        node.insertBefore(commentBegin, node.firstChild);\n        node.appendChild(commentEnd);\n      } else if (node.parentNode) {\n        node.parentNode.insertBefore(commentBegin, node);\n        insertAfter(node.parentNode, commentEnd, node); // update bindingData details\n\n        bindingData.previousNonTemplateElement = node.previousSibling;\n        bindingData.nextNonTemplateElement = node.nextSibling;\n        bindingData.parentElement = node.previousSibling.parentElement;\n      }\n\n      return node;\n    };\n    /**\n     * removeElemnetsByCommentWrap\n     * @param {object} bindingData\n     * @return {undefined}\n     * @description remove elments by range\n     */\n\n\n    const removeElemnetsByCommentWrap = bindingData => {\n      if (!bindingData.docRange) {\n        bindingData.docRange = document.createRange();\n      }\n\n      try {\n        if (bindingData.previousNonTemplateElement) {\n          // update docRange start and end match the wrapped comment node\n          bindingData.docRange.setStartBefore(bindingData.previousNonTemplateElement.nextSibling);\n          setDocRangeEndAfter(bindingData.previousNonTemplateElement.nextSibling, bindingData);\n        } else {\n          // insert before next non template element\n          bindingData.docRange.setStartBefore(bindingData.parentElement.firstChild);\n          setDocRangeEndAfter(bindingData.parentElement.firstChild, bindingData);\n        }\n      } catch (err) {\n        console.log('error removeElemnetsByCommentWrap: ', err.message);\n      }\n\n      return bindingData.docRange.deleteContents();\n    };\n\n    const insertRenderedElements = (bindingData, fragment) => {\n      // insert rendered fragment after the previousNonTemplateElement\n      if (bindingData.previousNonTemplateElement) {\n        insertAfter(bindingData.parentElement, fragment, bindingData.previousNonTemplateElement);\n      } else {\n        // insert before next non template element\n        if (bindingData.nextNonTemplateElement) {\n          bindingData.parentElement.insertBefore(fragment, bindingData.nextNonTemplateElement);\n        } else if (bindingData.parentElement) {\n          // insert from parent\n          bindingData.parentElement.appendChild(fragment);\n        }\n      }\n    };\n\n    /* eslint-disable no-invalid-this */\n\n    const renderForOfBinding = ({\n      bindingData,\n      viewModel,\n      bindingAttrs\n    }) => {\n      if (!bindingData || !viewModel || !bindingAttrs) {\n        return;\n      }\n\n      let keys;\n      let iterationDataLength;\n      const iterationData = getViewModelPropValue(viewModel, bindingData.iterator);\n      let isRegenerate = false; // check iterationData and set iterationDataLength\n\n      if (isArray(iterationData)) {\n        iterationDataLength = iterationData.length;\n      } else if (isPlainObject(iterationData)) {\n        keys = Object.keys(iterationData);\n        iterationDataLength = keys.length;\n      } else {\n        // throw error but let script contince to run\n        return throwErrorMessage(null, 'iterationData is not an plain object or array');\n      } // flag as pared for-of logic with bindingData.type\n\n\n      if (!bindingData.type) {\n        bindingData.type = bindingAttrs$1.forOf;\n        wrapCommentAround(bindingData, bindingData.el);\n      } // assign forOf internal id to bindingData once\n\n\n      if (typeof bindingData.iterationSize === 'undefined') {\n        // store iterationDataLength\n        bindingData.iterationSize = iterationDataLength; // remove orignal node for-of attributes\n\n        bindingData.el.removeAttribute(bindingAttrs.forOf);\n        isRegenerate = true;\n      } else {\n        // only regenerate cache if iterationDataLength changed\n        isRegenerate = bindingData.iterationSize !== iterationDataLength; // update iterationSize\n\n        bindingData.iterationSize = iterationDataLength;\n      }\n\n      if (!isRegenerate) {\n        bindingData.iterationBindingCache.forEach(function (elementCache, i) {\n          if (!isEmptyObject(elementCache)) {\n            const iterationVm = createIterationViewModel({\n              bindingData: bindingData,\n              viewModel: viewModel,\n              iterationData: iterationData,\n              keys: keys,\n              index: i\n            });\n            renderIteration({\n              elementCache: elementCache,\n              iterationVm: iterationVm,\n              bindingAttrs: bindingAttrs,\n              isRegenerate: false\n            });\n          }\n        });\n        return;\n      } // generate forOfBinding elements into fragment\n\n\n      const fragment = generateForOfElements(bindingData, viewModel, bindingAttrs, iterationData, keys);\n      removeElemnetsByCommentWrap(bindingData); // insert fragment content into DOM\n\n      return insertRenderedElements(bindingData, fragment);\n    };\n    /**\n     * createIterationViewModel\n     * @description\n     * create an virtual viewModel for render binding while in loop iteration\n     * $data is the current data in the loop eg. data in array\n     * $root is point to top level viewModel\n     * $index is the current loop index\n     * @param {*} param0\n     * @return {object} virtual viewModel\n     */\n\n\n    const createIterationViewModel = ({\n      bindingData,\n      viewModel,\n      iterationData,\n      keys,\n      index\n    }) => {\n      const iterationVm = {};\n      iterationVm[bindingData.iterator.alias] = keys ? iterationData[keys[index]] : iterationData[index]; // populate common binding data reference\n\n      iterationVm[bindingDataReference.rootDataKey] = viewModel.$root || viewModel;\n      iterationVm[bindingDataReference.currentData] = iterationVm[bindingData.iterator.alias];\n      iterationVm[bindingDataReference.currentIndex] = index;\n      return iterationVm;\n    };\n\n    const generateForOfElements = (bindingData, viewModel, bindingAttrs, iterationData, keys) => {\n      const fragment = document.createDocumentFragment();\n      const iterationDataLength = bindingData.iterationSize;\n      let clonedItem;\n      let iterationVm;\n      let iterationBindingCache;\n      let i = 0; // create or clear exisitng iterationBindingCache\n\n      if (isArray(bindingData.iterationBindingCache)) {\n        bindingData.iterationBindingCache.length = 0;\n      } else {\n        bindingData.iterationBindingCache = [];\n      } // generate forOf and append to DOM\n\n\n      for (i = 0; i < iterationDataLength; i += 1) {\n        clonedItem = cloneDomNode(bindingData.el); // create bindingCache per iteration\n\n        iterationBindingCache = createBindingCache({\n          rootNode: clonedItem,\n          bindingAttrs: bindingAttrs\n        });\n        bindingData.iterationBindingCache.push(iterationBindingCache);\n\n        if (!isEmptyObject(iterationBindingCache)) {\n          // create an iterationVm match iterator alias\n          iterationVm = createIterationViewModel({\n            bindingData: bindingData,\n            viewModel: viewModel,\n            iterationData: iterationData,\n            keys: keys,\n            index: i\n          });\n          renderIteration({\n            elementCache: bindingData.iterationBindingCache[i],\n            iterationVm: iterationVm,\n            bindingAttrs: bindingAttrs,\n            isRegenerate: true\n          });\n        }\n\n        fragment.appendChild(clonedItem);\n      }\n\n      return fragment;\n    };\n\n    /**\n     * forOfBinding\n     * @description\n     * DOM decleartive for binding.\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     */\n\n    const forOfBinding = (cache, viewModel, bindingAttrs) => {\n      const dataKey = cache.dataKey;\n\n      if (!dataKey || dataKey.length > maxDatakeyLength) {\n        return;\n      }\n\n      if (!cache.iterator) {\n        if (dataKey.length > maxDatakeyLength) {\n          return;\n        } // replace mess spaces with single space\n\n\n        cache.dataKey = cache.dataKey.replace(REGEX.WHITE_SPACES, ' ');\n        const forExpMatch = dataKey.match(REGEX.FOR_OF);\n\n        if (!forExpMatch) {\n          return;\n        }\n\n        cache.iterator = {};\n        cache.iterator.alias = forExpMatch[1].trim();\n\n        if (forExpMatch[2]) {\n          cache.iterator.dataKey = forExpMatch[2].trim();\n          cache.parentElement = cache.el.parentElement;\n          cache.previousNonTemplateElement = cache.el.previousSibling;\n          cache.nextNonTemplateElement = cache.el.nextSibling;\n        }\n      }\n\n      renderForOfBinding({\n        bindingData: cache,\n        viewModel: viewModel,\n        bindingAttrs: bindingAttrs\n      });\n    };\n\n    /**\n     * isTargetDomRemoved\n     * @description check if DOM between 'start' and 'end' comment tag has been removed\n     * @param {object} bindingData\n     * @return {boolean}\n     */\n\n    const isTargetDomRemoved = bindingData => {\n      let ret = false;\n\n      if (bindingData && bindingData.previousNonTemplateElement) {\n        const commentStartTextContent = bindingData.previousNonTemplateElement.textContent;\n        const endCommentTag = bindingData.previousNonTemplateElement.nextSibling;\n\n        if (endCommentTag.nodeType === 8) {\n          if (endCommentTag.textContent === commentStartTextContent + commentSuffix) {\n            ret = true;\n          }\n        }\n      }\n\n      return ret;\n    };\n\n    const renderIfBinding = ({\n      bindingData,\n      viewModel,\n      bindingAttrs\n    }) => {\n      if (!bindingData.fragment) {\n        return;\n      }\n\n      const isDomRemoved = isTargetDomRemoved(bindingData);\n      let rootElement = bindingData.el; // remove current old DOM.\n      // TODO: try preserve DOM\n\n      if (!isDomRemoved && !bindingData.isOnce) {\n        removeIfBinding(bindingData); // use fragment for create iterationBindingCache\n\n        rootElement = bindingData.fragment.firstChild.cloneNode(true);\n      } // walk clonedElement to create iterationBindingCache once\n\n\n      if (!bindingData.iterationBindingCache || !bindingData.hasIterationBindingCache) {\n        bindingData.iterationBindingCache = createBindingCache({\n          rootNode: rootElement,\n          bindingAttrs: bindingAttrs\n        });\n      } // only render if has iterationBindingCache\n      // means has other dataBindings to be render\n\n\n      if (!isEmptyObject(bindingData.iterationBindingCache)) {\n        bindingData.hasIterationBindingCache = true;\n        renderIteration({\n          elementCache: bindingData.iterationBindingCache,\n          iterationVm: viewModel,\n          bindingAttrs: bindingAttrs,\n          isRegenerate: true\n        });\n      } // insert to new rendered DOM\n      // TODO: check unnecessary insertion when DOM is preserved\n\n\n      insertRenderedElements(bindingData, rootElement);\n    };\n\n    const removeIfBinding = bindingData => {\n      removeElemnetsByCommentWrap(bindingData); // remove cache.IterationBindingCache to prevent memory leak\n\n      if (bindingData.hasIterationBindingCache) {\n        delete bindingData.iterationBindingCache;\n        delete bindingData.hasIterationBindingCache;\n      }\n    };\n\n    /**\n     * if-Binding\n     * @description\n     * DOM decleartive for binding.\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     */\n\n    const ifBinding = (cache, viewModel, bindingAttrs) => {\n      const dataKey = cache.dataKey; // isOnce only return if there is no child bindings\n\n      if (!dataKey || cache.isOnce && cache.hasIterationBindingCache === false) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      cache.type = cache.type || bindingAttrs$1.if;\n      const oldViewModelProValue = cache.elementData.viewModelPropValue; // getViewModelPropValue could be return undefined or null\n\n      const viewModelPropValue = getViewModelPropValue(viewModel, cache) || false; // do nothing if viewModel value not changed and no child bindings\n\n      if (oldViewModelProValue === viewModelPropValue && !cache.hasIterationBindingCache) {\n        return;\n      }\n\n      const shouldRender = Boolean(viewModelPropValue); // remove this cache from parent array\n\n      if (!shouldRender && cache.isOnce && cache.el.parentNode) {\n        removeElement(cache.el); // delete cache.fragment;\n\n        removeBindingInQueue({\n          viewModel: viewModel,\n          cache: cache\n        });\n        return;\n      } // store new show status\n\n\n      cache.elementData.viewModelPropValue = viewModelPropValue; // only create fragment once\n      // wrap comment tag around\n      // remove if attribute from original element to allow later dataBind parsing\n\n      if (!cache.fragment) {\n        wrapCommentAround(cache, cache.el);\n        cache.el.removeAttribute(bindingAttrs.if);\n        createClonedElementCache(cache);\n      }\n\n      if (!shouldRender) {\n        // remove element\n        removeIfBinding(cache);\n      } else {\n        // render element\n        renderIfBinding({\n          bindingData: cache,\n          viewModel: viewModel,\n          bindingAttrs: bindingAttrs\n        }); // if render once\n        // remove this cache from parent array if no child caches\n\n        if (cache.isOnce && !cache.hasIterationBindingCache) {\n          // delete cache.fragment;\n          removeBindingInQueue({\n            viewModel: viewModel,\n            cache: cache\n          });\n        }\n      }\n    };\n\n    const removeBindingInQueue = ({\n      viewModel,\n      cache\n    }) => {\n      let ret = false;\n\n      if (viewModel.APP.postProcessQueue) {\n        viewModel.APP.postProcessQueue.push(((cache, index) => () => {\n          cache[constants.PARENT_REF].splice(index, 1);\n        })(cache, cache[constants.PARENT_REF].indexOf(cache)));\n        ret = true;\n      }\n\n      return ret;\n    };\n\n    /**\n     * switch-Binding\n     * @description\n     * DOM decleartive switch binding.\n     * switch parent element wrap direct child with case bindings\n     * @param {object} cache\n     * @param {object} viewModel\n     * @param {object} bindingAttrs\n     */\n\n    const switchBinding = (cache, viewModel, bindingAttrs) => {\n      const dataKey = cache.dataKey;\n\n      if (!dataKey) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      const newExpression = getViewModelPropValue(viewModel, cache);\n\n      if (newExpression === cache.elementData.viewModelPropValue) {\n        return;\n      }\n\n      cache.elementData.viewModelPropValue = newExpression; // build switch cases if not yet defined\n\n      if (!cache.cases) {\n        const childrenElements = cache.el.children;\n\n        if (!childrenElements.length) {\n          return;\n        }\n\n        cache.cases = [];\n\n        for (let i = 0, elementLength = childrenElements.length; i < elementLength; i += 1) {\n          let caseData = null;\n\n          if (childrenElements[i].hasAttribute(bindingAttrs.case)) {\n            caseData = createCaseData(childrenElements[i], bindingAttrs.case);\n          } else if (childrenElements[i].hasAttribute(bindingAttrs.default)) {\n            caseData = createCaseData(childrenElements[i], bindingAttrs.default);\n            caseData.isDefault = true;\n          } // create fragment by clone node\n          // wrap with comment tag\n\n\n          if (caseData) {\n            wrapCommentAround(caseData, caseData.el); // remove binding attribute for later dataBind parse\n\n            if (caseData.isDefault) {\n              caseData.el.removeAttribute(bindingAttrs.default);\n            } else {\n              caseData.el.removeAttribute(bindingAttrs.case);\n            }\n\n            createClonedElementCache(caseData);\n            cache.cases.push(caseData);\n          }\n        }\n      }\n\n      if (cache.cases.length) {\n        let hasMatch = false; // do switch operation - reuse if binding logic\n\n        for (let j = 0, casesLength = cache.cases.length; j < casesLength; j += 1) {\n          let newCaseValue;\n\n          if (cache.cases[j].dataKey) {\n            // set back to dataKey if nothing found in viewModel\n            newCaseValue = getViewModelPropValue(viewModel, cache.cases[j]) || cache.cases[j].dataKey;\n          }\n\n          if (newCaseValue === cache.elementData.viewModelPropValue || cache.cases[j].isDefault) {\n            hasMatch = true; // render element\n\n            renderIfBinding({\n              bindingData: cache.cases[j],\n              viewModel: viewModel,\n              bindingAttrs: bindingAttrs\n            }); // remove other elements\n\n            removeUnmatchCases(cache.cases, j);\n            break;\n          }\n        } // no match remove all cases\n\n\n        if (!hasMatch) {\n          removeUnmatchCases(cache.cases);\n        }\n      }\n    };\n\n    function removeUnmatchCases(cases, matchedIndex) {\n      cases.forEach((caseData, index) => {\n        if (index !== matchedIndex || typeof matchedIndex === 'undefined') {\n          removeIfBinding(caseData); // remove cache.IterationBindingCache to prevent memory leak\n\n          if (caseData.hasIterationBindingCache) {\n            caseData.iterationBindingCache = null;\n            caseData.hasIterationBindingCache = false;\n          }\n        }\n      });\n    }\n\n    function createCaseData(node, attrName) {\n      const caseData = {\n        el: node,\n        dataKey: node.getAttribute(attrName),\n        type: attrName\n      };\n      return caseData;\n    }\n\n    const createEventBinding = ({\n      cache = {},\n      forceRender = false,\n      type = '',\n      viewModel = {}\n    }) => {\n      const handlerName = cache.dataKey;\n      let paramList = cache.parameters;\n      let viewModelContext;\n      const APP = viewModel.APP || viewModel.$root.APP;\n\n      if (!type || !handlerName || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      const handlerFn = getViewModelValue(viewModel, handlerName);\n\n      if (typeof handlerFn === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        const handlerWrap = e => {\n          let formData;\n          let args = [];\n\n          if (type === 'submit') {\n            formData = getFormData(e.currentTarget);\n            args = [e, e.currentTarget, formData].concat(paramList);\n          } else {\n            args = [e, e.currentTarget].concat(paramList);\n          }\n\n          handlerFn.apply(viewModelContext, args);\n        };\n\n        cache.el.removeEventListener(type, handlerWrap, false);\n        cache.el.addEventListener(type, handlerWrap, false);\n      }\n    };\n\n    /**\n     * createBindingOption\n     * @param {string} condition\n     * @param {object} opt\n     * @description\n     * generate binding update option object by condition\n     * @return {object} updateOption\n     */\n\n    function createBindingOption(condition = '', opt = {}) {\n      const visualBindingOptions = {\n        templateBinding: false,\n        textBinding: true,\n        cssBinding: true,\n        ifBinding: true,\n        showBinding: true,\n        modelBinding: true,\n        attrBinding: true,\n        forOfBinding: true,\n        switchBinding: true\n      };\n      const eventsBindingOptions = {\n        changeBinding: true,\n        clickBinding: true,\n        dblclickBinding: true,\n        blurBinding: true,\n        focusBinding: true,\n        hoverBinding: true,\n        submitBinding: true\n      }; // this is visualBindingOptions but everything false\n      // concrete declear for performance purpose\n\n      const serverRenderedOptions = {\n        templateBinding: false,\n        textBinding: false,\n        cssBinding: false,\n        ifBinding: false,\n        showBinding: false,\n        modelBinding: false,\n        attrBinding: false,\n        forOfBinding: false,\n        switchBinding: false\n      };\n      let updateOption = {};\n\n      switch (condition) {\n        case bindingUpdateConditions.serverRendered:\n          updateOption = extend({}, eventsBindingOptions, serverRenderedOptions, opt);\n          break;\n\n        case bindingUpdateConditions.init:\n          // flag templateBinding to true to render tempalte(s)\n          opt.templateBinding = true;\n          updateOption = extend({}, visualBindingOptions, eventsBindingOptions, opt);\n          break;\n\n        default:\n          // when called again only update visualBinding options\n          updateOption = extend({}, visualBindingOptions, opt);\n      }\n\n      return updateOption;\n    }\n\n    /**\n     *  pubSub\n     * @description use jQuery object as pubSub\n     * @example EVENTS object strucure:\n     *  EVENTS = {\n            'EVENT-NAME': [{ 'comp-id': fn }],\n            'EVENT-NAME2': [{ 'comp-id': fn }]\n        };\n     */\n\n    const EVENTS = {};\n\n    const subscribeEvent = (instance = null, eventName = '', fn, isOnce = false) => {\n      if (!instance || !instance.compId || !eventName || typeof fn !== 'function') {\n        return;\n      }\n\n      let subscriber;\n      let isSubscribed = false;\n      eventName = eventName.replace(REGEX.WHITE_SPACES, '');\n      EVENTS[eventName] = EVENTS[eventName] || []; // check if already subscribed and update callback fn\n\n      isSubscribed = EVENTS[eventName].some(subscriber => {\n        if (subscriber[instance.compId]) {\n          subscriber[instance.compId] = fn.bind(instance.viewModel);\n          subscriber.isOnce = isOnce;\n          return true;\n        }\n      }); // push if not yet subscribe\n\n      if (!isSubscribed) {\n        subscriber = {};\n        subscriber[instance.compId] = fn.bind(instance.viewModel);\n        subscriber.isOnce = isOnce;\n        EVENTS[eventName].push(subscriber);\n      }\n    };\n\n    const subscribeEventOnce = (instance = null, eventName = '', fn) => {\n      subscribeEvent(instance, eventName, fn, true);\n    };\n\n    const unsubscribeEvent = (compId = '', eventName = '') => {\n      if (!compId || !eventName) {\n        return;\n      }\n\n      let i = 0;\n      let subscribersLength = 0;\n      let subscriber;\n      eventName = eventName.replace(REGEX.WHITE_SPACES, '');\n\n      if (EVENTS[eventName]) {\n        subscribersLength = EVENTS[eventName].length;\n\n        for (i = 0; i < subscribersLength; i += 1) {\n          subscriber = EVENTS[eventName][i];\n\n          if (subscriber[compId]) {\n            EVENTS[eventName].splice(i, 1);\n            break;\n          }\n        }\n      } // delete the event if no more subscriber\n\n\n      if (!EVENTS[eventName].length) {\n        delete EVENTS[eventName];\n      }\n    };\n    /**\n     * unsubscribeAllEvent\n     * @description unsubscribe all event by compId. eg when a component removed\n     * @param {string} compId\n     */\n\n\n    const unsubscribeAllEvent = (compId = '') => {\n      if (!compId) {\n        return;\n      }\n\n      Object.keys(EVENTS).forEach(eventName => {\n        unsubscribeEvent(compId, eventName);\n      });\n    };\n\n    const publishEvent = (eventName = '', ...args) => {\n      if (!eventName || !EVENTS[eventName]) {\n        return;\n      }\n\n      eventName = eventName.replace(REGEX.WHITE_SPACES, '');\n      EVENTS[eventName].forEach(subscriber => {\n        Object.keys(subscriber).forEach(compId => {\n          if (typeof subscriber[compId] === 'function') {\n            const ret = subscriber[compId](...args);\n\n            if (subscriber.isOnce) {\n              unsubscribeEvent(compId, eventName);\n            }\n\n            return ret;\n          }\n        });\n      });\n    };\n\n    let compIdIndex = 0;\n\n    class Binder {\n      constructor($rootElement, viewModel, bindingAttrs) {\n        if (!$rootElement || $rootElement.nodeType !== 1 || viewModel === null || typeof viewModel !== 'object') {\n          throw new TypeError('$rootElement or viewModel is invalid');\n        }\n\n        this.initRendered = false;\n        this.compId = compIdIndex += 1;\n        this.$rootElement = $rootElement;\n        this.viewModel = viewModel;\n        this.bindingAttrs = bindingAttrs;\n        this.render = debounceRaf(this.render, this);\n        this.isServerRendered = this.$rootElement.getAttribute(serverRenderedAttr) !== null; // inject instance into viewModel\n\n        this.viewModel.APP = this; // add $root pointer to viewModel so binding can be refer as $root.something\n\n        this.viewModel.$root = this.viewModel; // 1st step\n        // parsView walk the DOM and create binding cache that holds each element's binding details\n        // this binding cache is like AST for render and update\n\n        this.parseView(); // for jquery user set viewModel referece to $rootElement for easy debug\n        // otherwise use Expando to attach viewModel to $rootElement\n\n        this.$rootElement[bindingDataReference.rootDataKey] = this.viewModel;\n        return this;\n      }\n      /**\r\n       * parseView\r\n       * @description\r\n       * @return {this}\r\n       * traver from $rootElement to find each data-bind-* element\r\n       * then apply data binding\r\n       */\n\n\n      parseView() {\n        this.elementCache = createBindingCache({\n          rootNode: this.$rootElement,\n          bindingAttrs: this.bindingAttrs\n        }); // updateElementCache if server rendered on init\n\n        if (this.isServerRendered && !this.initRendered) {\n          this.updateElementCache({\n            templateCache: true\n          });\n        }\n\n        return this;\n      }\n      /**\r\n       * updateElementCache\r\n       * @param {object} opt\r\n       * @description call createBindingCache to parse view and generate bindingCache\r\n       */\n\n\n      updateElementCache(opt = {}) {\n        const elementCache = opt.elementCache || this.elementCache;\n\n        if (opt.allCache) {\n          // walk dom from root element to regenerate elementCache\n          this.elementCache = createBindingCache({\n            rootNode: this.$rootElement,\n            bindingAttrs: this.bindingAttrs\n          });\n        } // walk from first rendered template node to create/update child bindingCache\n\n\n        if (opt.allCache || opt.templateCache) {\n          if (elementCache[this.bindingAttrs.tmp] && elementCache[this.bindingAttrs.tmp].length) {\n            elementCache[this.bindingAttrs.tmp].forEach(cache => {\n              // set skipCheck as skipForOfParseFn whenever an node has\n              // both template and forOf bindings\n              // then the template bindingCache should be an empty object\n              let skipForOfParseFn = null;\n\n              if (cache.el.hasAttribute(this.bindingAttrs.forOf)) {\n                skipForOfParseFn = () => {\n                  return true;\n                };\n              }\n\n              cache.bindingCache = createBindingCache({\n                rootNode: cache.el,\n                bindingAttrs: this.bindingAttrs,\n                skipCheck: skipForOfParseFn,\n                isRenderedTemplate: opt.isRenderedTemplates\n              });\n            });\n          }\n        }\n      }\n\n      render(opt = {}) {\n        let updateOption = {};\n\n        if (!this.initRendered) {\n          // only update eventsBinding if server rendered\n          if (this.isServerRendered) {\n            this.$rootElement.removeAttribute(serverRenderedAttr);\n            updateOption = createBindingOption(bindingUpdateConditions.serverRendered, opt);\n          } else {\n            updateOption = createBindingOption(bindingUpdateConditions.init, opt);\n          }\n        } else {\n          // when called again only update visualBinding options\n          updateOption = createBindingOption('', opt);\n        } // create postProcessQueue before start rendering\n\n\n        this.postProcessQueue = [];\n        const renderBindingOption = {\n          ctx: this,\n          elementCache: this.elementCache,\n          updateOption: updateOption,\n          bindingAttrs: this.bindingAttrs,\n          viewModel: this.viewModel\n        }; // always render template binding first\n        // render and apply binding to template(s)\n        // this is an share function therefore passing 'this' context\n\n        renderTemplatesBinding(renderBindingOption); // apply bindings to rest of the DOM\n\n        Binder.applyBinding(renderBindingOption); // trigger postProcess\n\n        Binder.postProcess(this.postProcessQueue); // clear postProcessQueue\n\n        this.postProcessQueue.length = 0;\n        delete this.postProcessQueue;\n        this.initRendered = true;\n      }\n\n      static applyBinding({\n        ctx,\n        elementCache,\n        updateOption,\n        bindingAttrs,\n        viewModel\n      }) {\n        if (!elementCache || !updateOption) {\n          return;\n        } // the follow binding should be in order for better efficiency\n        // apply forOf Binding\n\n\n        if (updateOption.forOfBinding && elementCache[bindingAttrs.forOf] && elementCache[bindingAttrs.forOf].length) {\n          elementCache[bindingAttrs.forOf].forEach(cache => {\n            forOfBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply attr Binding\n\n\n        if (updateOption.attrBinding && elementCache[bindingAttrs.attr] && elementCache[bindingAttrs.attr].length) {\n          elementCache[bindingAttrs.attr].forEach(cache => {\n            attrBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply if Binding\n\n\n        if (updateOption.ifBinding && elementCache[bindingAttrs.if] && elementCache[bindingAttrs.if].length) {\n          elementCache[bindingAttrs.if].forEach(cache => {\n            ifBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply show Binding\n\n\n        if (updateOption.showBinding && elementCache[bindingAttrs.show] && elementCache[bindingAttrs.show].length) {\n          elementCache[bindingAttrs.show].forEach(cache => {\n            showBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply switch Binding\n\n\n        if (updateOption.switchBinding && elementCache[bindingAttrs.switch] && elementCache[bindingAttrs.switch].length) {\n          elementCache[bindingAttrs.switch].forEach(cache => {\n            switchBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply text binding\n\n\n        if (updateOption.textBinding && elementCache[bindingAttrs.text] && elementCache[bindingAttrs.text].length) {\n          elementCache[bindingAttrs.text].forEach(cache => {\n            textBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply cssBinding\n\n\n        if (updateOption.cssBinding && elementCache[bindingAttrs.css] && elementCache[bindingAttrs.css].length) {\n          elementCache[bindingAttrs.css].forEach(cache => {\n            cssBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply model binding\n\n\n        if (updateOption.modelBinding && elementCache[bindingAttrs.model] && elementCache[bindingAttrs.model].length) {\n          elementCache[bindingAttrs.model].forEach(cache => {\n            modelBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply change binding\n\n\n        if (updateOption.changeBinding && elementCache[bindingAttrs.change] && elementCache[bindingAttrs.change].length) {\n          elementCache[bindingAttrs.change].forEach(cache => {\n            changeBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply submit binding\n\n\n        if (updateOption.submitBinding && elementCache[bindingAttrs.submit] && elementCache[bindingAttrs.submit].length) {\n          elementCache[bindingAttrs.submit].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'submit',\n              viewModel\n            });\n          });\n        } // apply click binding\n\n\n        if (updateOption.clickBinding && elementCache[bindingAttrs.click] && elementCache[bindingAttrs.click].length) {\n          elementCache[bindingAttrs.click].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'click',\n              viewModel\n            });\n          });\n        } // apply double click binding\n\n\n        if (updateOption.dblclickBinding && elementCache[bindingAttrs.dblclick] && elementCache[bindingAttrs.dblclick].length) {\n          elementCache[bindingAttrs.dblclick].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'dblclick',\n              viewModel\n            });\n          });\n        } // apply blur binding\n\n\n        if (updateOption.blurBinding && elementCache[bindingAttrs.blur] && elementCache[bindingAttrs.blur].length) {\n          elementCache[bindingAttrs.blur].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'blur',\n              viewModel\n            });\n          });\n        } // apply focus binding\n\n\n        if (updateOption.focusBinding && elementCache[bindingAttrs.focus] && elementCache[bindingAttrs.focus].length) {\n          elementCache[bindingAttrs.focus].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'focus',\n              viewModel\n            });\n          });\n        } // apply hover binding\n\n\n        if (updateOption.hoverBinding && elementCache[bindingAttrs.hover] && elementCache[bindingAttrs.hover].length) {\n          elementCache[bindingAttrs.hover].forEach(cache => {\n            hoverBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        }\n      }\n\n      static postProcess(tasks) {\n        if (!tasks || !tasks.length) {\n          return;\n        }\n\n        each(tasks, (index, task) => {\n          if (typeof task === 'function') {\n            try {\n              task();\n            } catch (err) {\n              throwErrorMessage(err, 'Error postProcess: ' + String(task));\n            }\n          }\n        });\n      }\n\n      subscribe(eventName = '', fn) {\n        subscribeEvent(this, eventName, fn);\n        return this;\n      }\n\n      subscribeOnce(eventName = '', fn) {\n        subscribeEventOnce(this, eventName, fn);\n        return this;\n      }\n\n      unsubscribe(eventName = '') {\n        unsubscribeEvent(this.compId, eventName);\n        return this;\n      }\n\n      unsubscribeAll() {\n        unsubscribeAllEvent(this.compId);\n        return this;\n      }\n\n      publish(eventName = '', ...args) {\n        publishEvent(eventName, ...args);\n        return this;\n      }\n\n    }\n\n    const renderTemplatesBinding = ({\n      ctx,\n      elementCache,\n      updateOption,\n      bindingAttrs,\n      viewModel\n    }) => {\n      if (!elementCache || !bindingAttrs) {\n        return false;\n      } // render and apply binding to template(s) and forOf DOM\n\n\n      if (elementCache[bindingAttrs.tmp] && elementCache[bindingAttrs.tmp].length) {\n        // when re-render call with {templateBinding: true}\n        // template and nested templates\n        if (updateOption.templateBinding) {\n          // overwrite updateOption with 'init' bindingUpdateConditions\n          updateOption = createBindingOption(bindingUpdateConditions.init);\n          elementCache[bindingAttrs.tmp].forEach($element => {\n            renderTemplate($element, viewModel, bindingAttrs, elementCache);\n          }); // update cache after all template(s) rendered\n\n          ctx.updateElementCache({\n            templateCache: true,\n            elementCache: elementCache,\n            isRenderedTemplates: true\n          });\n        } // enforce render even element is not in DOM tree\n\n\n        updateOption.forceRender = true; // apply bindings to rendered templates element\n\n        elementCache[bindingAttrs.tmp].forEach(cache => {\n          Binder.applyBinding({\n            elementCache: cache.bindingCache,\n            updateOption: updateOption,\n            bindingAttrs: bindingAttrs,\n            viewModel: viewModel\n          });\n        });\n      }\n\n      return true;\n    };\n    /**\r\n     * renderIteration\r\n     * @param {object} opt\r\n     * @description\r\n     * render element's binding by supplied elementCache\r\n     * This function is desidned for FoOf, If, switch bindings\r\n     */\n\n\n    const renderIteration = ({\n      elementCache,\n      iterationVm,\n      bindingAttrs,\n      isRegenerate\n    }) => {\n      const bindingUpdateOption = isRegenerate ? createBindingOption(bindingUpdateConditions.init) : createBindingOption(); // enforce render even element is not in DOM tree\n\n      bindingUpdateOption.forceRender = true; // render and apply binding to template(s)\n      // this is an share function therefore passing current APP 'this' context\n      // viewModel is a dynamic generated iterationVm\n\n      renderTemplatesBinding({\n        ctx: iterationVm.$root ? iterationVm.$root.APP : iterationVm.APP,\n        elementCache: elementCache,\n        updateOption: bindingUpdateOption,\n        bindingAttrs: bindingAttrs,\n        viewModel: iterationVm\n      });\n      Binder.applyBinding({\n        elementCache: elementCache,\n        updateOption: bindingUpdateOption,\n        bindingAttrs: bindingAttrs,\n        viewModel: iterationVm\n      });\n    };\n\n    const isSupportPromise = typeof window['Promise'] === 'function';\n    let bindingAttrs = bindingAttrs$1;\n\n    const use = (settings = {}) => {\n      if (settings.bindingAttrs) {\n        bindingAttrs = extend({}, settings.bindingAttrs);\n      }\n    };\n\n    const init = ($rootElement, viewModel = null) => {\n      if (!isSupportPromise) {\n        return console.warn('Browser not support Promise');\n      }\n\n      return new Binder($rootElement, viewModel, bindingAttrs);\n    };\n\n    var index = {\n      use: use,\n      init: init,\n      version: '1.10.0'\n    };\n\n    return index;\n\n})));\n"]}