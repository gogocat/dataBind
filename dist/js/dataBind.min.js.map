{"version":3,"file":"dataBind.min.js","sources":["../../../src/config.ts","../../../src/util.ts","../../../src/domWalker.ts","../../../src/createBindingOption.ts","../../../src/_escape.ts","../../../src/changeBinding.ts","../../../src/attrBinding.ts","../../../src/renderTemplate.ts","../../../src/renderTemplatesBinding.ts","../../../src/renderIteration.ts","../../../src/commentWrapper.ts","../../../src/renderForOfBinding.ts","../../../src/forOfBinding.ts","../../../src/renderIfBinding.ts","../../../src/ifBinding.ts","../../../src/switchBinding.ts","../../../src/createEventBinding.ts","../../../src/applyBinding.ts","../../../src/showBinding.ts","../../../src/textBinding.ts","../../../src/cssBinding.ts","../../../src/modelBinding.ts","../../../src/hoverBinding.ts","../../../src/pubSub.ts","../../../src/binder.ts","../../../src/postProcess.ts","../../../src/index.ts"],"sourcesContent":["export interface BindingAttrs {\n    comp: string;\n    tmp: string;\n    text: string;\n    click: string;\n    dblclick: string;\n    blur: string;\n    focus: string;\n    hover: string;\n    input: string;\n    change: string;\n    submit: string;\n    model: string;\n    show: string;\n    css: string;\n    attr: string;\n    forOf: string;\n    if: string;\n    switch: string;\n    case: string;\n    default: string;\n}\n\nexport const bindingAttrs: BindingAttrs = {\n    comp: 'data-bind-comp',\n    tmp: 'data-bind-tmp',\n    text: 'data-bind-text',\n    click: 'data-bind-click',\n    dblclick: 'data-bind-dblclick',\n    blur: 'data-bind-blur',\n    focus: 'data-bind-focus',\n    hover: 'data-bind-hover',\n    input: 'data-bind-input',\n    change: 'data-bind-change',\n    submit: 'data-bind-submit',\n    model: 'data-bind-model',\n    show: 'data-bind-show',\n    css: 'data-bind-css',\n    attr: 'data-bind-attr',\n    forOf: 'data-bind-for',\n    if: 'data-bind-if',\n    switch: 'data-bind-switch',\n    case: 'data-bind-case',\n    default: 'data-bind-default',\n};\n\nexport const serverRenderedAttr = 'data-server-rendered';\nexport const dataIndexAttr = 'data-index';\n\nexport interface CommentPrefix {\n    forOf: string;\n    if: string;\n    case: string;\n    default: string;\n}\n\nexport const commentPrefix: CommentPrefix = {\n    forOf: 'data-forOf_',\n    if: 'data-if_',\n    case: 'data-case_',\n    default: 'data-default_',\n};\n\nexport const commentSuffix = '_end';\n\nexport interface BindingDataReference {\n    rootDataKey: string;\n    currentData: string;\n    currentIndex: string;\n    mouseEnterHandlerName: string;\n    mouseLeaveHandlerName: string;\n}\n\nexport const bindingDataReference: BindingDataReference = {\n    rootDataKey: '$root',\n    currentData: '$data',\n    currentIndex: '$index',\n    mouseEnterHandlerName: 'in',\n    mouseLeaveHandlerName: 'out',\n};\n\nexport interface BindingUpdateConditions {\n    serverRendered: string;\n    init: string;\n}\n\nexport const bindingUpdateConditions: BindingUpdateConditions = {\n    serverRendered: 'SERVER-RENDERED',\n    init: 'INIT',\n};\n\n// maximum string length before running regex\nexport const maxDatakeyLength = 250;\n\nexport interface Constants {\n    filters: {\n        ONCE: string;\n    };\n    PARENT_REF: string;\n}\n\nexport const constants: Constants = {\n    filters: {\n        ONCE: 'once',\n    },\n    PARENT_REF: '_parent',\n};\n","import * as config from './config';\nimport type {ViewModel, BindingCache, ElementCache, DeferredObj, WrapMap} from './types';\n\nconst hasIsArray = Array.isArray;\n\nexport const REGEX = {\n    BAD_TAGS: /<(script|del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/ig,\n    FOR_OF: /(.*?)\\s+(?:in|of)\\s+(.*)/,\n    FUNCTION_PARAM: /\\((.*?)\\)/,\n    HTML_TAG: /^[\\s]*<([a-z][^\\/\\s>]+)/i,\n    OBJECT_LITERAL: /^\\{.+\\}$/,\n    PIPE: /\\|/,\n    WHITE_SPACES: /\\s+/g,\n    LINE_BREAKS_TABS: /(\\r\\n|\\n|\\r|\\t)/gm,\n};\n\nconst IS_SUPPORT_TEMPLATE = 'content' in document.createElement('template');\n\nconst WRAP_MAP: WrapMap = {\n    div: ['div', '<div>', '</div>'],\n    thead: ['table', '<table>', '</table>'],\n    col: ['colgroup', '<table><colgroup>', '</colgroup></table>'],\n    tr: ['tbody', '<table><tbody>', '</tbody></table>'],\n    td: ['tr', '<table><tr>', '</tr></table>'],\n};\nWRAP_MAP.caption = WRAP_MAP.colgroup = WRAP_MAP.tbody = WRAP_MAP.tfoot = WRAP_MAP.thead;\nWRAP_MAP.th = WRAP_MAP.td;\n\nexport const isArray = (obj: any): obj is any[] => {\n    return hasIsArray ? Array.isArray(obj) : Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexport const isJsObject = (obj: any): obj is object => {\n    return obj !== null && typeof obj === 'object' && Object.prototype.toString.call(obj) === '[object Object]';\n};\n\nexport const isPlainObject = (obj: any): boolean => {\n    if (!isJsObject(obj)) {\n        return false;\n    }\n\n    // If has modified constructor\n    const ctor = (obj as any).constructor;\n    if (typeof ctor !== 'function') return false;\n\n    // If has modified prototype\n    const prot = ctor.prototype;\n    if (isJsObject(prot) === false) return false;\n\n    // If constructor does not have an Object-specific method\n    if (prot.hasOwnProperty('isPrototypeOf') === false) {\n        return false;\n    }\n\n    // Most likely a plain Object\n    return true;\n};\n\n// test if string contains '{...}'. string must not contains tab, line breaks\nexport const isObjectLiteralString = (str: string = ''): boolean => {\n    return REGEX.OBJECT_LITERAL.test(str);\n};\n\nexport const isEmptyObject = (obj: any): boolean => {\n    if (isJsObject(obj)) {\n        return Object.getOwnPropertyNames(obj).length === 0;\n    }\n    return false;\n};\n\nfunction getFirstHtmlStringTag(htmlString: string): string | null {\n    const match = htmlString.match(REGEX.HTML_TAG);\n    if (match) {\n        return match[1];\n    }\n    return null;\n}\n\nfunction removeBadTags(htmlString: string = ''): string {\n    return htmlString.replace(REGEX.BAD_TAGS, '');\n}\n\nexport function createHtmlFragment(htmlString: any): DocumentFragment | null {\n    if (typeof htmlString !== 'string') {\n        return null;\n    }\n    // use template element\n    if (IS_SUPPORT_TEMPLATE) {\n        const template = document.createElement('template');\n        template.innerHTML = removeBadTags(htmlString);\n        return template.content;\n    }\n    // use document fragment with wrap html tag for tr, td etc.\n    const fragment = document.createDocumentFragment();\n    const queryContainer = document.createElement('div');\n    const firstTag = getFirstHtmlStringTag(htmlString);\n    const wrap = WRAP_MAP[firstTag || 'div'];\n\n    if (wrap[0] === 'div') {\n        return document.createRange().createContextualFragment(htmlString);\n    }\n\n    queryContainer.insertAdjacentHTML('beforeend', `${wrap[1]}${htmlString}${wrap[2]}`);\n\n    const query = queryContainer.querySelector(wrap[0]);\n\n    while (query && query.firstChild) {\n        fragment.appendChild(query.firstChild);\n    }\n\n    return fragment;\n}\n\nexport const generateElementCache = (bindingAttrs: any): ElementCache => {\n    const elementCache: ElementCache = {};\n\n    for (const i in bindingAttrs) {\n        if (bindingAttrs.hasOwnProperty(i)) {\n            if (isArray(bindingAttrs)) {\n                elementCache[bindingAttrs[i]] = [];\n            } else {\n                elementCache[i] = [];\n            }\n        }\n    }\n\n    return elementCache;\n};\n\n\n/**\n * List of dangerous property names that should not be accessed\n * to prevent prototype pollution attacks\n */\nconst DANGEROUS_PROPS = ['__proto__', 'constructor', 'prototype'];\n\n/**\n * Check if a property name is safe to access\n */\nfunction isSafeProperty(prop: string): boolean {\n    return !DANGEROUS_PROPS.includes(prop);\n}\n\n// simplified version of Lodash _.get with prototype pollution protection\nconst _get = function get(obj: any, path: string, def?: any): any {\n    const fullPath = path\n        .replace(/\\[/g, '.')\n        .replace(/]/g, '')\n        .split('.')\n        .filter(Boolean);\n\n    let current = obj;\n    for (const step of fullPath) {\n        // Prevent access to dangerous properties\n        if (!step || !isSafeProperty(step)) {\n            return def;\n        }\n\n        if (current == null) {\n            return def;\n        }\n\n        current = current[step];\n\n        if (current === undefined) {\n            return def;\n        }\n    }\n\n    return current;\n};\n\n/**\n * getViewModelValue\n * @description walk a object by provided string path. eg 'a.b.c'\n * @param {object} viewModel\n * @param {string} prop\n * @return {object}\n */\nexport const getViewModelValue = (viewModel: ViewModel, prop: string): any => {\n    return _get(viewModel, prop);\n};\n\n// simplified version of Lodash _.set with prototype pollution protection\n// https://stackoverflow.com/questions/54733539/javascript-implementation-of-lodash-set-method\nconst _set = (obj: any, path: string | string[], value: any): any => {\n    if (Object(obj) !== obj) return obj; // When obj is not an object\n\n    // If not yet an array, get the keys from the string-path\n    let pathArray: string[];\n    if (!Array.isArray(path)) {\n        pathArray = path.toString().match(/[^.[\\]]+/g) || [];\n    } else {\n        pathArray = path;\n    }\n\n    // Check all keys in path for dangerous properties\n    for (const key of pathArray) {\n        if (!isSafeProperty(key)) {\n            console.warn(`Blocked attempt to set dangerous property: ${key}`);\n            return obj;\n        }\n    }\n\n    // Iterate all of them except the last one\n    const lastKey = pathArray[pathArray.length - 1];\n    const target = pathArray.slice(0, -1).reduce((a, c, i) => {\n        // Prevent setting dangerous properties\n        if (!isSafeProperty(c)) {\n            return a;\n        }\n\n        if (Object(a[c]) === a[c]) {\n            // Key exists and is an object, follow that path\n            return a[c];\n        }\n\n        // Create the key. Is the next key a potential array-index?\n        const nextKey = pathArray[i + 1];\n        a[c] = Math.abs(Number(nextKey)) >> 0 === +nextKey ? [] : {};\n        return a[c];\n    }, obj);\n\n    // Set the final value only if the key is safe\n    if (isSafeProperty(lastKey)) {\n        target[lastKey] = value;\n    }\n\n    // Return the top-level object to allow chaining\n    return obj;\n};\n\n/**\n * setViewModelValue\n * @description populate viewModel object by path string\n * @param {object} obj\n * @param {string} prop\n * @param {string} value\n * @return {call} underscore set\n */\nexport const setViewModelValue = (obj: any, prop: string, value: any): any => {\n    return _set(obj, prop, value);\n};\n\nexport const getViewModelPropValue = (viewModel: ViewModel, bindingCache: BindingCache): any => {\n    let dataKey = bindingCache.dataKey;\n    let paramList = bindingCache.parameters;\n    const isInvertBoolean = dataKey && dataKey.charAt(0) === '!';\n\n    if (isInvertBoolean && dataKey) {\n        dataKey = isInvertBoolean ? dataKey.substring(1) : dataKey;\n    }\n\n    let ret = dataKey ? getViewModelValue(viewModel, dataKey) : undefined;\n\n    if (typeof ret === 'function') {\n        const viewModelContext = resolveViewModelContext(viewModel, dataKey || '');\n        const oldViewModelProValue = bindingCache.elementData ? bindingCache.elementData.viewModelPropValue : null;\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n        // let args = [oldViewModelProValue, bindingCache.el].concat(paramList);\n        const args = paramList.concat([oldViewModelProValue, bindingCache.el]);\n        ret = ret.apply(viewModelContext, args);\n    }\n\n    ret = isInvertBoolean ? !ret : ret;\n\n    // call through fitlers to get final value\n    ret = filtersViewModelPropValue({\n        value: ret,\n        viewModel,\n        bindingCache,\n    });\n\n    return ret;\n};\n\nconst filtersViewModelPropValue = ({value, viewModel, bindingCache}: {value: any, viewModel: ViewModel, bindingCache: BindingCache}): any => {\n    let ret = value;\n    if (bindingCache.filters) {\n        each(bindingCache.filters, (index: any, filter: string) => {\n            const viewModelContext = resolveViewModelContext(viewModel, filter);\n            const filterFn = getViewModelValue.call(viewModelContext, viewModelContext, filter);\n            try {\n                ret = filterFn.call(viewModelContext, ret);\n            } catch (err) {\n                throwErrorMessage(err, `Invalid filter: ${filter}`);\n            }\n        });\n    }\n    return ret;\n};\n\nexport const parseStringToJson = (str: string): any => {\n    // fix unquote or single quote keys and replace single quote to double quote\n    const ret = str.replace(/(\\s*?{\\s*?|\\s*?,\\s*?)(['\"])?([a-zA-Z0-9]+)(['\"])?:/g, '$1\"$3\":').replace(/'/g, '\"');\n    return JSON.parse(ret);\n};\n\n/**\n * arrayRemoveMatch\n * @description remove match items in fromArray out of toArray\n * @param {array} toArray\n * @param {array} frommArray\n * @return {boolean}\n */\nexport const arrayRemoveMatch = (toArray: any[], frommArray: any[]): any[] => {\n    return toArray.filter((value, _index) => {\n        return frommArray.indexOf(value) < 0;\n    });\n};\n\nexport const getFormData = ($form: HTMLFormElement): Record<string, any> => {\n    const data: Record<string, any> = {};\n\n    if (!($form instanceof HTMLFormElement)) {\n        return data;\n    }\n\n    const formData = new FormData($form);\n\n    formData.forEach((value, key) => {\n        if (!Object.prototype.hasOwnProperty.call(Object, key)) {\n            data[key] = value;\n            return;\n        }\n        if (!Array.isArray(data[key])) {\n            data[key] = [data[key]];\n        }\n        data[key].push(value);\n    });\n\n    return data;\n};\n\n/**\n * getFunctionParameterList\n * @description convert parameter string to arrary\n * eg. '(\"a\",\"b\",\"c\")' > [\"a\",\"b\",\"c\"]\n * @param {string} str\n * @return {array} paramlist\n */\nexport const getFunctionParameterList = (str: string): string[] | undefined => {\n    if (!str || str.length > config.maxDatakeyLength) {\n        return;\n    }\n    const paramlist = str.match(REGEX.FUNCTION_PARAM);\n\n    if (paramlist && paramlist[1]) {\n        const params = paramlist[1].split(',');\n        params.forEach((v, i) => {\n            params[i] = v.trim();\n        });\n        return params;\n    }\n    return undefined;\n};\n\nexport const extractFilterList = (cacheData: any): any => {\n    if (!cacheData || !cacheData.dataKey || cacheData.dataKey.length > config.maxDatakeyLength) {\n        return cacheData;\n    }\n    const filterList = cacheData.dataKey.split(REGEX.PIPE);\n    let isOnceIndex: number | undefined;\n    cacheData.dataKey = filterList[0].trim();\n    if (filterList.length > 1) {\n        filterList.shift();\n        filterList.forEach((v, i) => {\n            filterList[i] = v.trim();\n            if (filterList[i] === config.constants.filters.ONCE) {\n                cacheData.isOnce = true;\n                isOnceIndex = i;\n            }\n        });\n        // don't store filter 'once' - because it is internal logic not a property from viewModel\n        if (isOnceIndex !== undefined && isOnceIndex >= 0) {\n            filterList.splice(isOnceIndex, 1);\n        }\n        cacheData.filters = filterList;\n    }\n    return cacheData;\n};\n\nexport const invertObj = (sourceObj: Record<string, any>): Record<string, any> => {\n    return Object.keys(sourceObj).reduce((obj: Record<string, any>, key: string) => {\n        const invertedKey = sourceObj[key];\n        // Prevent prototype pollution by checking if the inverted key is safe\n        if (typeof invertedKey === 'string' && isSafeProperty(invertedKey)) {\n            obj[invertedKey] = key;\n        }\n        return obj;\n    }, {});\n};\n\nexport const createDeferredObj = (): DeferredObj => {\n    const dfObj = {} as DeferredObj;\n\n    dfObj.promise = new Promise((resolve, reject) => {\n        dfObj.resolve = resolve;\n        dfObj.reject = reject;\n    });\n\n    return dfObj;\n};\n\n/**\n * debounce\n * @description decorate a function to be debounce using requestAnimationFrame\n * @param {function} fn\n * @param {context} ctx\n * @return {function}\n */\nexport const debounceRaf = (fn: Function, ctx: any = null): Function => {\n    return (function (fn: Function, ctx: any) {\n        let dfObj = createDeferredObj();\n        let rafId = 0;\n\n        // return decorated fn\n        return function () {\n\n            const args = Array.from ? Array.from(arguments) : Array.prototype.slice.call(arguments);\n\n            window.cancelAnimationFrame(rafId);\n            rafId = window.requestAnimationFrame(() => {\n                try {\n                    // fn is Binder.render function\n                    fn.apply(ctx, args);\n                    // dfObj.resolve is function provided in .then promise chain\n                    // ctx is the current component\n                    dfObj.resolve(ctx);\n                } catch (err) {\n                    console.error('error in rendering: ', err);\n                    dfObj.reject(err);\n                }\n\n                // reset dfObj - otherwise then callbacks will not be in execution order\n                // example:\n                // myApp.render().then(function(){console.log('ok1')});\n                // myApp.render().then(function(){console.log('ok2')});\n                // myApp.render().then(function(){console.log('ok3')});\n                // >> ok1, ok2, ok3\n                dfObj = createDeferredObj();\n\n                window.cancelAnimationFrame(rafId);\n            });\n\n            return dfObj.promise;\n        };\n    })(fn, ctx);\n};\n\n/**\n * getNodeAttrObj\n * @description convert Node attributes object to a json object\n * @param {object} node\n * @param {array} skipList\n * @return {object}\n */\nexport const getNodeAttrObj = (node: HTMLElement, skipList?: string | string[]): Record<string, string> | undefined => {\n    let attributesLength = 0;\n    let skipArray: string[] | undefined;\n\n    if (!node || node.nodeType !== 1 || !node.hasAttributes()) {\n        return;\n    }\n    if (skipList) {\n        skipArray = [];\n        skipArray = typeof skipList === 'string' ? [skipList] : skipList;\n    }\n    const attrObj: Record<string, string> = {};\n    attributesLength = node.attributes.length;\n\n    if (attributesLength) {\n        for (let i = 0; i < attributesLength; i += 1) {\n            const attribute = node.attributes.item(i);\n            if (attribute) {\n                attrObj[attribute.nodeName] = attribute.nodeValue || '';\n            }\n        }\n    }\n\n    if (isArray(skipArray)) {\n        skipArray.forEach((item) => {\n            if (attrObj[item]) {\n                delete attrObj[item];\n            }\n        });\n    }\n    return attrObj;\n};\n\n/**\n * extend\n * @param {boolean} isDeepMerge\n * @param {object} target\n * @param {object} sources\n * @return {object} merged object\n */\nexport const extend = (isDeepMerge: boolean = false, target?: any, ...sources: any[]): any => {\n    if (!sources.length) {\n        return target;\n    }\n    const source = sources.shift();\n    if (source === undefined) {\n        return target;\n    }\n\n    if (!isDeepMerge) {\n        return Object.assign(target, source, ...sources);\n    }\n\n    if (isMergebleObject(target) && isMergebleObject(source)) {\n        Object.keys(source).forEach((key) => {\n            if (isMergebleObject(source[key])) {\n                if (!target[key]) {\n                    target[key] = {};\n                }\n                extend(true, target[key], source[key]);\n            } else {\n                target[key] = source[key];\n            }\n        });\n    }\n\n    return extend(true, target, ...sources);\n};\n\nexport const each = (obj: any, fn: Function): void => {\n    if (typeof obj !== 'object' || typeof fn !== 'function') {\n        return;\n    }\n    let keys: string[] = [];\n    let keysLength = 0;\n    const isArrayObj = isArray(obj);\n    let key: string | number;\n    let value: any;\n    let i = 0;\n\n    if (isArrayObj) {\n        keysLength = obj.length;\n    } else if (isJsObject(obj)) {\n        keys = Object.keys(obj);\n        keysLength = keys.length;\n    } else {\n        throw new TypeError('Object is not an array or object');\n    }\n\n    for (i = 0; i < keysLength; i += 1) {\n        if (isArrayObj) {\n            key = i;\n            value = obj[i];\n        } else {\n            key = keys[i];\n            value = obj[key];\n        }\n        fn(key, value);\n    }\n};\n\nconst isMergebleObject = (item: any): boolean => {\n    return isJsObject(item) && !isArray(item);\n};\n\n/**\n * cloneDomNode\n * @param {object} element\n * @return {object} cloned element\n * @description helper function to clone node\n */\nexport const cloneDomNode = (element: HTMLElement): HTMLElement => {\n    return element.cloneNode(true) as HTMLElement;\n};\n\n/**\n * insertAfter\n * @param {object} parentNode\n * @param {object} newNode\n * @param {object} referenceNode\n * @return {object} node\n * @description helper function to insert new node before the reference node\n */\nexport const insertAfter = (parentNode: Node, newNode: Node, referenceNode: Node | null): Node => {\n    const refNextElement = referenceNode && referenceNode.nextSibling ? referenceNode.nextSibling : null;\n    return parentNode.insertBefore(newNode, refNextElement);\n};\n\nexport const resolveViewModelContext = (viewModel: ViewModel, datakey: string): ViewModel => {\n    let ret = viewModel;\n    if (typeof datakey !== 'string') {\n        return ret;\n    }\n    const bindingDataContext = datakey.split('.');\n    if (bindingDataContext.length > 1) {\n        if (bindingDataContext[0] === config.bindingDataReference.rootDataKey) {\n            ret = (viewModel[config.bindingDataReference.rootDataKey] as ViewModel) || viewModel;\n        } else if (bindingDataContext[0] === config.bindingDataReference.currentData) {\n            ret = (viewModel[config.bindingDataReference.currentData] as ViewModel) || viewModel;\n        }\n    }\n    return ret;\n};\n\nexport const resolveParamList = (viewModel: ViewModel, paramList: any[]): any[] | undefined => {\n    if (!viewModel || !isArray(paramList)) {\n        return;\n    }\n    return paramList.map((param) => {\n        param = param.trim();\n\n        if (param === config.bindingDataReference.currentIndex) {\n            // convert '$index' to value\n            param = viewModel[config.bindingDataReference.currentIndex];\n        } else if (param === config.bindingDataReference.currentData) {\n            // convert '$data' to value or current viewModel\n            param = viewModel[config.bindingDataReference.currentData] || viewModel;\n        } else if (param === config.bindingDataReference.rootDataKey) {\n            // convert '$root' to root viewModel\n            param = viewModel[config.bindingDataReference.rootDataKey] || viewModel;\n        }\n        return param;\n    });\n};\n\nexport const removeElement = (el: HTMLElement): void => {\n    if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n    }\n};\n\nexport const emptyElement = (node: HTMLElement): HTMLElement => {\n    if (node && node.firstChild) {\n        while (node.firstChild) {\n            node.removeChild(node.firstChild);\n        }\n    }\n    return node;\n};\n\nexport const throwErrorMessage = (err: any = null, errorMessage: string = ''): void => {\n    const message = err && err.message ? err.message : errorMessage;\n    if (typeof console.error === 'function') {\n        console.error(message);\n        return;\n    }\n    console.log(message);\n};\n\n/**\n * parseBindingObjectString\n * @description parse bining object string to object with value always stringify\n * @param {string} str - eg '{ id: $data.id, name: $data.name }'\n * @return {object} - eg { id: '$data.id', name: '$data.name'}\n */\nexport const parseBindingObjectString = (str: string = ''): Record<string, string> | null => {\n    let objectLiteralString = str.trim();\n    const ret: Record<string, string> = {};\n\n    if (!REGEX.OBJECT_LITERAL.test(str)) {\n        return null;\n    }\n\n    // clearn up line breaks and remove first { character\n    objectLiteralString = objectLiteralString\n        .replace(REGEX.LINE_BREAKS_TABS, '')\n        .substring(1);\n\n    // remove last } character\n    objectLiteralString = objectLiteralString.substring(0, objectLiteralString.length - 1);\n\n    objectLiteralString.split(',').forEach((item) => {\n        const keyVal = item.trim();\n        // ignore if last empty item - eg split last comma in object literal\n        if (keyVal) {\n            const prop = keyVal.split(':');\n            const key = prop[0].trim();\n            ret[key] = `${prop[1]}`.trim();\n        }\n    });\n\n    return ret;\n};\n","import {invertObj, extractFilterList, getFunctionParameterList, REGEX} from './util';\nimport {constants} from './config';\n\nlet bindingAttrsMap: any;\n\n/**\n * walkDOM\n * @description by Douglas Crockford - walk each DOM node and calls provided callback function\n * start walk from firstChild\n * @param {object} node\n * @param {function} func\n */\nconst walkDOM = (node: any, func: any): void => {\n    let parseChildNode = true;\n    node = node.firstElementChild;\n    while (node) {\n        parseChildNode = func(node);\n        if (parseChildNode) {\n            walkDOM(node, func);\n        }\n        node = node.nextElementSibling;\n    }\n};\n\nconst getAttributesObject = (node: any): any => {\n    const ret: any = {};\n    Array.prototype.slice.call(node.attributes).forEach((item: any) => {\n        ret[item.name] = item.value;\n    });\n    return ret;\n};\n\nconst checkSkipChildParseBindings = (attrObj: any = {}, bindingAttrs: any): any[] => {\n    return [bindingAttrs.forOf, bindingAttrs.if, bindingAttrs.case, bindingAttrs.default].filter((type: any) => {\n        return typeof attrObj[type] !== 'undefined';\n    });\n};\n\nconst rootSkipCheck = (node: any): boolean => {\n    return node.tagName === 'SVG';\n};\n\nconst defaultSkipCheck = (node: any, bindingAttrs: any): boolean => {\n    return node.tagName === 'SVG' || node.hasAttribute(bindingAttrs.comp);\n};\n\nconst populateBindingCache = ({node, attrObj, bindingCache, type}: any): any => {\n    let attrValue: any;\n    let cacheData: any;\n\n    if (bindingAttrsMap && bindingAttrsMap[type] && typeof attrObj[type] !== 'undefined') {\n        bindingCache[type] = bindingCache[type] || [];\n        attrValue = attrObj[type] || '';\n\n        if (attrValue) {\n            attrValue = attrValue.replace(REGEX.LINE_BREAKS_TABS, '').replace(REGEX.WHITE_SPACES, ' ').trim();\n        }\n\n        cacheData = {\n            el: node,\n            dataKey: attrValue,\n        };\n\n        // populate cacheData.filters. update filterList first item as dataKey\n        cacheData = extractFilterList(cacheData);\n\n        // populate cacheData.parameters\n        // for store function call parameters eg. '$index', '$root'\n        // useful with DOM for-loop template as reference to binding data\n        const paramList = getFunctionParameterList(cacheData.dataKey);\n        if (paramList) {\n            cacheData.parameters = paramList;\n            cacheData.dataKey = cacheData.dataKey.replace(REGEX.FUNCTION_PARAM, '').trim();\n        }\n        // store parent array reference to cacheData\n        cacheData[constants.PARENT_REF] = bindingCache[type];\n        bindingCache[type].push(cacheData);\n    }\n    return bindingCache;\n};\n\nconst createBindingCache = ({rootNode = null, bindingAttrs = {} as any, skipCheck, isRenderedTemplate = false}: any): any => {\n    let bindingCache: any = {};\n\n    if (!(rootNode instanceof window.Node)) {\n        throw new TypeError('walkDOM: Expected a DOM node');\n    }\n\n    bindingAttrsMap = bindingAttrsMap || invertObj(bindingAttrs);\n\n    const parseNode = (node: any, skipNodeCheckFn: any = defaultSkipCheck): boolean => {\n        let isSkipForOfChild = false;\n\n        if (node.nodeType !== 1 || !node.hasAttributes()) {\n            return true;\n        }\n        if (skipNodeCheckFn(node, bindingAttrs) || (typeof skipCheck === 'function' && skipCheck(node))) {\n            return false;\n        }\n\n        // when creating sub bindingCache if is for tmp binding\n        // skip same element that has forOf binding the  forOf is alredy parsed\n        const attrObj = getAttributesObject(node);\n        const hasSkipChildParseBindings = checkSkipChildParseBindings(attrObj, bindingAttrs);\n        let iterateList: any[] = [];\n\n        if (hasSkipChildParseBindings.length) {\n            isSkipForOfChild = true;\n            iterateList = hasSkipChildParseBindings;\n        } else if (isRenderedTemplate && attrObj[bindingAttrs.tmp]) {\n            // skip current node parse if was called by node has template binding and already rendered\n            return true;\n        } else {\n            iterateList = Object.keys(attrObj);\n        }\n\n        iterateList.forEach((key: any) => {\n            // skip for switch case and default bining\n            if (key !== bindingAttrs.case && key !== bindingAttrs.default) {\n                bindingCache = populateBindingCache({\n                    node,\n                    attrObj,\n                    bindingCache,\n                    type: key,\n                });\n            }\n        });\n\n        // after cache forOf skip parse child nodes\n        if (isSkipForOfChild) {\n            return false;\n        }\n\n        return true;\n    };\n\n    if (parseNode(rootNode, rootSkipCheck)) {\n        walkDOM(rootNode, parseNode);\n    }\n    return bindingCache;\n};\n\nexport default createBindingCache;\n","import {\n    bindingUpdateConditions,\n} from './config';\nimport {extend} from './util';\n\nexport interface BindingOption {\n    templateBinding?: boolean;\n    textBinding?: boolean;\n    cssBinding?: boolean;\n    ifBinding?: boolean;\n    showBinding?: boolean;\n    modelBinding?: boolean;\n    attrBinding?: boolean;\n    forOfBinding?: boolean;\n    switchBinding?: boolean;\n    changeBinding?: boolean;\n    clickBinding?: boolean;\n    dblclickBinding?: boolean;\n    blurBinding?: boolean;\n    focusBinding?: boolean;\n    hoverBinding?: boolean;\n    inputBinding?: boolean;\n    submitBinding?: boolean;\n    forceRender?: boolean;\n    [key: string]: any;\n}\n\n/**\n * createBindingOption\n * @param {string} condition\n * @param {object} opt\n * @description\n * generate binding update option object by condition\n * @return {object} updateOption\n */\nfunction createBindingOption(condition: string = '', opt: BindingOption = {}): BindingOption {\n    const visualBindingOptions: BindingOption = {\n        templateBinding: false,\n        textBinding: true,\n        cssBinding: true,\n        ifBinding: true,\n        showBinding: true,\n        modelBinding: true,\n        attrBinding: true,\n        forOfBinding: true,\n        switchBinding: true,\n    };\n    const eventsBindingOptions: BindingOption = {\n        changeBinding: true,\n        clickBinding: true,\n        dblclickBinding: true,\n        blurBinding: true,\n        focusBinding: true,\n        hoverBinding: true,\n        inputBinding: true,\n        submitBinding: true,\n    };\n    // this is visualBindingOptions but everything false\n    // concrete declear for performance purpose\n    const serverRenderedOptions: BindingOption = {\n        templateBinding: false,\n        textBinding: false,\n        cssBinding: false,\n        ifBinding: false,\n        showBinding: false,\n        modelBinding: false,\n        attrBinding: false,\n        forOfBinding: false,\n        switchBinding: false,\n    };\n    let updateOption: BindingOption = {};\n\n    switch (condition) {\n        case bindingUpdateConditions.serverRendered:\n            updateOption = extend(false, {}, eventsBindingOptions, serverRenderedOptions, opt);\n            break;\n        case bindingUpdateConditions.init:\n        // flag templateBinding to true to render tempalte(s)\n            opt.templateBinding = true;\n            opt.forceRender = true;\n            updateOption = extend(false, {}, visualBindingOptions, eventsBindingOptions, opt);\n            break;\n        default:\n        // when called again only update visualBinding options\n            updateOption = extend(false, {}, visualBindingOptions, opt);\n    }\n\n    return updateOption;\n}\n\nexport default createBindingOption;\n","/**\n * _escape\n * @description\n * https://github.com/lodash/lodash/blob/master/escape.js\n */\n\nfunction baseToString(value: any): string {\n    if (typeof value == 'string') {\n        return value;\n    }\n    return value == null ? '' : `${value}`;\n}\n\n/** Used to match HTML entities and HTML characters. */\nconst reUnescapedHtml = /[&<>\"'`]/g;\nconst reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/** Used to map characters to HTML entities. */\nconst htmlEscapes: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#39;',\n    '`': '&#96;',\n};\n\n/**\n  * escapeHtmlChar\n  * @description convert characters to HTML entities.\n  * @private\n  * @param {string} chr The matched character to escape.\n  * @return {string} Returns the escaped character.\n  */\nfunction escapeHtmlChar(chr: string): string {\n    return htmlEscapes[chr];\n}\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to\n * their corresponding HTML entities.\n * @param {string} string\n * @return {string} string\n */\nexport default function escape(string: any): string {\n    // Reset `lastIndex` because in IE < 9 `String#replace` does not.\n    string = baseToString(string);\n    return (string && reHasUnescapedHtml.test(string)) ?\n        string.replace(reUnescapedHtml, escapeHtmlChar) :\n        string;\n}\n","\nimport {\n    getViewModelValue,\n    setViewModelValue,\n    resolveViewModelContext,\n    resolveParamList,\n} from './util';\nimport _escape from './_escape';\nimport type {BindingCache, ViewModel, BindingAttrs} from './types';\n\n/**\n * Create change handler\n */\nfunction createChangeHandler(\n    viewModel: ViewModel,\n    modelDataKey: string | null,\n    paramList: unknown[],\n    handlerFn: Function,\n    viewModelContext: ViewModel,\n): EventListener {\n    let oldValue: unknown = '';\n    let newValue: unknown = '';\n\n    return function changeHandler(this: HTMLInputElement, e: Event) {\n        const $this = this;\n        const isCheckbox = $this.type === 'checkbox';\n        newValue = isCheckbox ? $this.checked : _escape($this.value);\n        // set data to viewModel\n        if (modelDataKey) {\n            oldValue = getViewModelValue(viewModel, modelDataKey);\n            setViewModelValue(viewModel, modelDataKey, newValue);\n        }\n        const args = [e, e.currentTarget, newValue, oldValue].concat(paramList as any[]);\n        handlerFn.apply(viewModelContext, args);\n        oldValue = newValue;\n    };\n}\n\ninterface ChangeBindingParams {\n    cache: BindingCache;\n    viewModel: ViewModel;\n    bindingAttrs: BindingAttrs;\n    forceRender: boolean;\n    type?: string;\n}\n\n/**\n * changeBinding\n * @description input element on change event binding. DOM -> viewModel update\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst changeBinding = ({\n    cache,\n    viewModel,\n    bindingAttrs,\n    forceRender,\n    type = 'change',\n}: ChangeBindingParams): void => {\n    const handlerName = cache.dataKey;\n    let paramList = cache.parameters;\n    const modelDataKey = cache.el.getAttribute(bindingAttrs.model);\n    let viewModelContext: ViewModel;\n    const APP = viewModel.APP || viewModel.$root?.APP;\n    const rootElement = APP?.$rootElement as HTMLElement | undefined;\n\n    if (!handlerName || (!forceRender && rootElement && !rootElement.contains(cache.el))) {\n        return;\n    }\n\n    const handlerFn = getViewModelValue(viewModel, handlerName);\n\n    if (typeof handlerFn === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        const changeHandler = createChangeHandler(\n            viewModel,\n            modelDataKey,\n            paramList,\n            handlerFn,\n            viewModelContext,\n        );\n\n        // assign on change event\n        cache.el.removeEventListener(type, changeHandler, false);\n        cache.el.addEventListener(type, changeHandler, false);\n    }\n};\n\nexport default changeBinding;\n","import {\n    extend,\n    getViewModelPropValue,\n    isPlainObject,\n    isEmptyObject,\n    isObjectLiteralString,\n    parseBindingObjectString,\n    each,\n} from './util';\n\n/**\n * attrBinding\n * @description\n * DOM decleartive attr binding. update elenment attributes\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst attrBinding = (cache: any = {}, viewModel: any, _bindingAttrs?: any, _forceRender?: any): void => {\n    if (!cache.dataKey) {\n        return;\n    }\n    // check if Object Literal String style dataKey\n    const isObjLiteralStr = isObjectLiteralString(cache.dataKey);\n\n    // resolve vmAttrObj, when Object Literal String style if will be object without resolve each value\n    // otherwise, resolve value from viewModel\n    const vmAttrObj = isObjLiteralStr ? parseBindingObjectString(cache.dataKey) : getViewModelPropValue(viewModel, cache);\n\n    // vmAttrObj must be a plain object\n    if (!isPlainObject(vmAttrObj)) {\n        return;\n    }\n\n    // populate cache.elementData if not exits\n    // check and set default cache.elementData.viewModelPropValue\n    cache.elementData = cache.elementData || {};\n    cache.elementData.viewModelPropValue = cache.elementData.viewModelPropValue || {};\n\n    // start diff comparison\n    // reject if nothing changed by comparing\n    // cache.elementData.viewModelPropValue (previous render) vs vmAttrObj(current render)\n    if (JSON.stringify(cache.elementData.viewModelPropValue) === JSON.stringify(vmAttrObj)) {\n        return;\n    }\n\n    if (isObjLiteralStr) {\n        // resolve each value in vmAttrObj\n        each(vmAttrObj, (key: any, value: any) => {\n            // resolve value from viewModel including $data and $root\n            // from viewModel.$data or viewModel.$root\n            vmAttrObj[key] = getViewModelPropValue(viewModel, {dataKey: value} as any);\n        });\n    }\n\n    // shortcut for reading cache.elementData.viewModelPropValue\n    const oldAttrObj = cache.elementData.viewModelPropValue;\n\n    // start set element attribute - oldAttrObj is empty meaning no previous render\n    if (isEmptyObject(oldAttrObj)) {\n        each(vmAttrObj, (key: any, value: any) => {\n            if (typeof value !== 'undefined') {\n                cache.el.setAttribute(key, value);\n                // populate cache.elementData.viewModelPropValue for future comparison\n                if (!isObjLiteralStr) {\n                    cache.elementData.viewModelPropValue[key] = value;\n                }\n            }\n        });\n    } else {\n        // loop oldAttrObj, remove attribute not present in current vmAttrObj\n        each(oldAttrObj, (key: any, _value: any) => {\n            if (typeof vmAttrObj[key] === 'undefined') {\n                cache.el.removeAttribute(key);\n            }\n        });\n\n        // loop vmAttrObj, set attribute not present in oldAttrObj\n        each(vmAttrObj, (key: any, value: any) => {\n            if (typeof value !== 'undefined') {\n                if (oldAttrObj[key] !== vmAttrObj[key]) {\n                    cache.el.setAttribute(key, vmAttrObj[key]);\n                    // populate cache.elementData.viewModelPropValue for future comparison\n                    if (!isObjLiteralStr) {\n                        cache.elementData.viewModelPropValue[key] = value;\n                    }\n                }\n            }\n        });\n    }\n\n    // for object literal style binding\n    // set viewModelPropValue for future diff comaprison\n    // note: vmAttrObj is a not fully resolve object, each value is still string unresloved\n    if (isObjLiteralStr) {\n        cache.elementData.viewModelPropValue = extend(false, {}, vmAttrObj);\n    }\n};\n\nexport default attrBinding;\n","import {dataIndexAttr} from './config';\nimport {\n    createHtmlFragment,\n    emptyElement,\n    getViewModelPropValue,\n    parseStringToJson,\n} from './util';\n\nlet $domFragment: any = null;\nlet $templateRoot: any = null;\nlet $templateRootPrepend = false;\nlet $templateRootAppend = false;\nlet nestTemplatesCount = 0;\n\n/**\n * getTemplateString\n * @description get Template tag innerHTML string\n * @param {string} id\n * @return {string} rendered html string\n */\nconst getTemplateString = (id: string): string => {\n    const templateElement = document.getElementById(id);\n\n    return templateElement ? templateElement.innerHTML : '';\n};\n\n/**\n * renderTemplate\n * @description\n * get template setting from DOM attribute then call compileTemplate\n * to render and append to target DOM\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {object} elementCache\n */\nconst renderTemplate = (cache: any, viewModel: any, bindingAttrs: any, elementCache: any): void => {\n    const settings = typeof cache.dataKey === 'string' ? parseStringToJson(cache.dataKey) : cache.dataKey;\n    let viewData: any = settings.data;\n    const isAppend = settings.append;\n    const isPrepend = settings.prepend;\n    let $currentElement: any;\n\n    cache.dataKey = settings;\n\n    viewData = (typeof viewData === 'undefined' || viewData === '$root') ?\n        viewModel :\n        getViewModelPropValue(viewModel, {\n            dataKey: settings.data,\n            parameters: cache.parameters,\n        } as any);\n\n    if (!viewData) {\n        return;\n    }\n\n    const $element = cache.el;\n    const $index = typeof viewModel.$index !== 'undefined' ? viewModel.$index : $element.getAttribute(dataIndexAttr);\n\n    if (typeof $index !== 'undefined') {\n        viewData.$index = $index;\n    }\n\n    $domFragment = $domFragment || document.createDocumentFragment();\n\n    if (!$templateRoot) {\n        $templateRoot = $element;\n        // Store the prepend/append flags from the root template only\n        $templateRootPrepend = isPrepend;\n        $templateRootAppend = isAppend;\n    }\n\n    const htmlString = getTemplateString(settings.id);\n\n    const htmlFragment = createHtmlFragment(htmlString);\n\n    // append rendered html\n    if (!$domFragment.childNodes.length) {\n        // domFragment should be empty in first run\n        $currentElement = $domFragment; // copy of $domFragment for later find nested template check\n        $domFragment.appendChild(htmlFragment);\n    } else {\n        // during recursive run keep append to current fragment\n        $currentElement = $element; // reset to current nested template element\n        if (!isAppend && !isPrepend) {\n            $currentElement = emptyElement($currentElement);\n        }\n        if (isPrepend) {\n            $currentElement.insertBefore(htmlFragment, $currentElement.firstChild);\n        } else {\n            $currentElement.appendChild(htmlFragment);\n        }\n    }\n\n    // check if there are nested template then recurisive render them\n    const $nestedTemplates = $currentElement.querySelectorAll(`[${  bindingAttrs.tmp  }]`);\n\n    const nestedTemplatesLength = $nestedTemplates.length;\n\n    if (nestedTemplatesLength) {\n        nestTemplatesCount += nestedTemplatesLength;\n\n        for (let i=0; i < nestedTemplatesLength; i+=1) {\n            const thisTemplateCache = {\n                el: $nestedTemplates[i],\n                dataKey: $nestedTemplates[i].getAttribute(bindingAttrs.tmp),\n            };\n            elementCache[bindingAttrs.tmp].push(thisTemplateCache);\n            // recursive template render\n            renderTemplate(thisTemplateCache, viewModel, bindingAttrs, elementCache);\n            nestTemplatesCount -= 1;\n        }\n    }\n\n    // no more nested tempalted to render, start to append $domFragment into $templateRoot\n    if (nestTemplatesCount === 0) {\n        // append to DOM once\n        // Use the prepend/append flags from the root template, not the current nested template\n        if (!$templateRootAppend && !$templateRootPrepend) {\n            $templateRoot = emptyElement($templateRoot);\n        }\n        if ($templateRootPrepend) {\n            $templateRoot.insertBefore($domFragment, $templateRoot.firstChild);\n        } else {\n            $templateRoot.appendChild($domFragment);\n        }\n        // clear cached fragment and flags\n        $domFragment = $templateRoot = null;\n        $templateRootPrepend = $templateRootAppend = false;\n        // trigger callback if provided\n        if (typeof viewModel.afterTemplateRender === 'function') {\n            viewModel.afterTemplateRender(viewData);\n        }\n    }\n};\n\nexport default renderTemplate;\n","import {bindingUpdateConditions} from './config';\nimport * as applyBindingModule from './applyBinding';\nimport createBindingOption from './createBindingOption';\nimport renderTemplate from './renderTemplate';\n\nconst renderTemplatesBinding = ({ctx, elementCache, updateOption, bindingAttrs, viewModel}: any): boolean => {\n    if (!elementCache || !bindingAttrs) {\n        return false;\n    }\n    // render and apply binding to template(s) and forOf DOM\n    if (elementCache[bindingAttrs.tmp] && elementCache[bindingAttrs.tmp].length) {\n        // when re-render call with {templateBinding: true}\n        // template and nested templates\n        if (updateOption.templateBinding) {\n            // overwrite updateOption with 'init' bindingUpdateConditions\n            updateOption = createBindingOption(bindingUpdateConditions.init);\n\n            // forEach is correct here - nested templates are added to array but rendered recursively\n            // We don't want the loop to re-render templates that were already rendered via recursion\n            elementCache[bindingAttrs.tmp].forEach(($element: any) => {\n                renderTemplate($element, viewModel, bindingAttrs, elementCache);\n            });\n            // update cache after all template(s) rendered\n            ctx.updateElementCache({\n                templateCache: true,\n                elementCache,\n                isRenderedTemplates: true,\n            });\n        }\n        // enforce render even element is not in DOM tree\n        updateOption.forceRender = true;\n\n        // apply bindings to rendered templates element\n        // Use namespace import to access the function at runtime,\n        // which breaks the circular dependency during module initialization\n        // Use for loop to handle templates added during rendering\n        for (let i = 0; i < elementCache[bindingAttrs.tmp].length; i++) {\n            applyBindingModule.default({\n                ctx,\n                elementCache: elementCache[bindingAttrs.tmp][i].bindingCache,\n                updateOption,\n                bindingAttrs,\n                viewModel,\n            });\n        }\n    }\n    return true;\n};\n\nexport default renderTemplatesBinding;\n","import {bindingUpdateConditions} from './config';\nimport createBindingOption from './createBindingOption';\nimport renderTemplatesBinding from './renderTemplatesBinding';\nimport * as applyBindingModule from './applyBinding';\n\n/**\n * renderIteration\n * @param {object} opt\n * @description\n * render element's binding by supplied elementCache\n * This function is desidned for FoOf, If, switch bindings\n */\nconst renderIteration = ({elementCache, iterationVm, bindingAttrs, isRegenerate}: any): void => {\n    const bindingUpdateOption = isRegenerate ? createBindingOption(bindingUpdateConditions.init) : createBindingOption();\n\n    // enforce render even element is not in DOM tree\n    bindingUpdateOption.forceRender = true;\n\n    // render and apply binding to template(s)\n    // this is an share function therefore passing current APP 'this' context\n    // viewModel is a dynamic generated iterationVm\n    renderTemplatesBinding({\n        ctx: iterationVm.$root ? iterationVm.$root.APP : iterationVm.APP,\n        elementCache,\n        updateOption: bindingUpdateOption,\n        bindingAttrs,\n        viewModel: iterationVm,\n    });\n\n    // Use namespace import to access the function at runtime,\n    // which breaks the circular dependency during module initialization\n    applyBindingModule.default({\n        ctx: iterationVm.$root ? iterationVm.$root.APP : iterationVm.APP,\n        elementCache,\n        updateOption: bindingUpdateOption,\n        bindingAttrs,\n        viewModel: iterationVm,\n    });\n};\n\nexport default renderIteration;\n","\nimport * as config from './config';\nimport * as util from './util';\n\nconst createClonedElementCache = (bindingData: any): any => {\n    const clonedElement = bindingData.el.cloneNode(true);\n    bindingData.fragment = document.createDocumentFragment();\n    bindingData.fragment.appendChild(clonedElement);\n    return bindingData;\n};\n\nconst setCommentPrefix = (bindingData: any): any => {\n    if (!bindingData || !bindingData.type) {\n        return bindingData;\n    }\n    let commentPrefix = '';\n    const dataKeyMarker = bindingData.dataKey ? bindingData.dataKey.replace(util.REGEX.WHITE_SPACES, '_') : '';\n\n    switch (bindingData.type) {\n        case config.bindingAttrs.forOf:\n            commentPrefix = config.commentPrefix.forOf;\n            break;\n        case config.bindingAttrs.if:\n            commentPrefix = config.commentPrefix.if;\n            break;\n        case config.bindingAttrs.case:\n            commentPrefix = config.commentPrefix.case;\n            break;\n        case config.bindingAttrs.default:\n            commentPrefix = config.commentPrefix.default;\n            break;\n    }\n    bindingData.commentPrefix = commentPrefix + dataKeyMarker;\n    return bindingData;\n};\n\n/**\n * setDocRangeEndAfter\n * @param {object} node\n * @param {object} bindingData\n * @description\n * recursive execution to find last wrapping comment node\n * and set as bindingData.docRange.setEndAfter\n * if not found deleteContents will has no operation\n * @return {undefined}\n */\nconst setDocRangeEndAfter = (node: any, bindingData: any): void => {\n    if (!bindingData.commentPrefix) {\n        setCommentPrefix(bindingData);\n    }\n    const startTextContent = bindingData.commentPrefix;\n    const endTextContent = startTextContent + config.commentSuffix;\n    node = node.nextSibling;\n\n    // check last wrap comment node\n    if (node) {\n        if (node.nodeType === 8 && node.textContent === endTextContent) {\n            return bindingData.docRange.setEndBefore(node);\n        }\n        setDocRangeEndAfter(node, bindingData);\n    }\n};\n\n/**\n * wrapCommentAround\n * @param {object} bindingData\n * @param {Node} node\n * @return {object} DOM fragment\n * @description\n * wrap frament with comment node\n */\nconst wrapCommentAround = (bindingData: any, node: any): any => {\n    let prefix = '';\n    if (!bindingData.commentPrefix) {\n        setCommentPrefix(bindingData);\n    }\n    prefix = bindingData.commentPrefix;\n    const commentBegin = document.createComment(prefix);\n    const commentEnd = document.createComment(prefix + config.commentSuffix);\n    // document fragment - logic for ForOf binding\n    // check node.parentNode because node could be from cache and no longer in DOM\n    if (node.nodeType === 11) {\n        node.insertBefore(commentBegin, node.firstChild);\n        node.appendChild(commentEnd);\n    } else if (node.parentNode) {\n        node.parentNode.insertBefore(commentBegin, node);\n        util.insertAfter(node.parentNode, commentEnd, node);\n        // update bindingData details\n        bindingData.previousNonTemplateElement = node.previousSibling;\n        bindingData.nextNonTemplateElement = node.nextSibling;\n        bindingData.parentElement = node.previousSibling.parentElement;\n    }\n\n    return node;\n};\n\n/**\n * removeElemnetsByCommentWrap\n * @param {object} bindingData\n * @return {undefined}\n * @description remove elments by range\n */\nconst removeElemnetsByCommentWrap = (bindingData: any): void => {\n    if (!bindingData.docRange) {\n        bindingData.docRange = document.createRange();\n    }\n    try {\n        if (bindingData.previousNonTemplateElement) {\n            // update docRange start and end match the wrapped comment node\n            bindingData.docRange.setStartBefore(bindingData.previousNonTemplateElement.nextSibling);\n            setDocRangeEndAfter(bindingData.previousNonTemplateElement.nextSibling, bindingData);\n        } else {\n            // insert before next non template element\n            bindingData.docRange.setStartBefore(bindingData.parentElement.firstChild);\n            setDocRangeEndAfter(bindingData.parentElement.firstChild, bindingData);\n        }\n    } catch (err: any) {\n        console.log('error removeElemnetsByCommentWrap: ', err.message);\n    }\n\n    return bindingData.docRange.deleteContents();\n};\n\n/**\n * removeDomTemplateElement\n * @param {object} bindingData\n * @return {object} null\n */\nconst removeDomTemplateElement = (bindingData: any): void => {\n    // first render - forElement is live DOM element so has parentNode\n    if (bindingData.el.parentNode) {\n        return bindingData.el.parentNode.removeChild(bindingData.el);\n    }\n    removeElemnetsByCommentWrap(bindingData);\n};\n\nconst insertRenderedElements = (bindingData: any, fragment: any): void => {\n    // insert rendered fragment after the previousNonTemplateElement\n    if (bindingData.previousNonTemplateElement) {\n        util.insertAfter(bindingData.parentElement, fragment, bindingData.previousNonTemplateElement);\n    } else {\n        // insert before next non template element\n        if (bindingData.nextNonTemplateElement) {\n            bindingData.parentElement.insertBefore(fragment, bindingData.nextNonTemplateElement);\n        } else if (bindingData.parentElement) {\n            // insert from parent\n            bindingData.parentElement.appendChild(fragment);\n        }\n    }\n};\n\nexport {\n    createClonedElementCache,\n    setCommentPrefix,\n    wrapCommentAround,\n    removeElemnetsByCommentWrap,\n    removeDomTemplateElement,\n    setDocRangeEndAfter,\n    insertRenderedElements,\n};\n","\nimport {bindingAttrs as configBindingAttrs, bindingDataReference} from './config';\nimport {\n    getViewModelPropValue,\n    isArray,\n    isPlainObject,\n    throwErrorMessage,\n    cloneDomNode,\n    isEmptyObject,\n} from './util';\nimport createBindingCache from './domWalker';\nimport renderIteration from './renderIteration';\nimport {\n    wrapCommentAround,\n    removeElemnetsByCommentWrap,\n    insertRenderedElements,\n} from './commentWrapper';\n\nconst renderForOfBinding = ({bindingData, viewModel, bindingAttrs}: any): void => {\n    if (!bindingData || !viewModel || !bindingAttrs) {\n        return;\n    }\n    let keys: any;\n    let iterationDataLength: number;\n    const iterationData = getViewModelPropValue(viewModel, bindingData.iterator);\n    let isRegenerate = false;\n\n    // check iterationData and set iterationDataLength\n    if (isArray(iterationData)) {\n        iterationDataLength = iterationData.length;\n    } else if (isPlainObject(iterationData)) {\n        keys = Object.keys(iterationData);\n        iterationDataLength = keys.length;\n    } else {\n        // throw error but let script contince to run\n        return throwErrorMessage(null, 'iterationData is not an plain object or array');\n    }\n\n    // flag as pared for-of logic with bindingData.type\n    if (!bindingData.type) {\n        bindingData.type = configBindingAttrs.forOf;\n        wrapCommentAround(bindingData, bindingData.el);\n    }\n\n    // assign forOf internal id to bindingData once\n    if (typeof bindingData.iterationSize === 'undefined') {\n        // store iterationDataLength\n        bindingData.iterationSize = iterationDataLength;\n        // remove orignal node for-of attributes\n        bindingData.el.removeAttribute(bindingAttrs.forOf);\n        isRegenerate = true;\n    } else {\n        // only regenerate cache if iterationDataLength changed\n        isRegenerate = bindingData.iterationSize !== iterationDataLength;\n        // update iterationSize\n        bindingData.iterationSize = iterationDataLength;\n    }\n\n    if (!isRegenerate) {\n        bindingData.iterationBindingCache.forEach((elementCache: any, i: number) => {\n            if (!isEmptyObject(elementCache)) {\n                const iterationVm = createIterationViewModel({\n                    bindingData,\n                    viewModel,\n                    iterationData,\n                    keys,\n                    index: i,\n                });\n                renderIteration({\n                    elementCache,\n                    iterationVm,\n                    bindingAttrs,\n                    isRegenerate: false,\n                });\n            }\n        });\n\n        return;\n    }\n\n    // generate forOfBinding elements into fragment\n    const fragment = generateForOfElements(bindingData, viewModel, bindingAttrs, iterationData, keys);\n\n    removeElemnetsByCommentWrap(bindingData);\n\n    // insert fragment content into DOM\n    return insertRenderedElements(bindingData, fragment);\n};\n\n/**\n * createIterationViewModel\n * @description\n * create an virtual viewModel for render binding while in loop iteration\n * $data is the current data in the loop eg. data in array\n * $root is point to top level viewModel\n * $index is the current loop index\n * @param {*} param0\n * @return {object} virtual viewModel\n */\nconst createIterationViewModel = ({bindingData, viewModel, iterationData, keys, index}: any): any => {\n    const iterationVm: any = {};\n    iterationVm[bindingData.iterator.alias] = keys ? iterationData[keys[index]] : iterationData[index];\n    // populate common binding data reference\n    iterationVm[bindingDataReference.rootDataKey] = viewModel.$root || viewModel;\n    iterationVm[bindingDataReference.currentData] = iterationVm[bindingData.iterator.alias];\n    iterationVm[bindingDataReference.currentIndex] = index;\n    return iterationVm;\n};\n\nconst generateForOfElements = (bindingData: any, viewModel: any, bindingAttrs: any, iterationData: any, keys: any): any => {\n    const fragment = document.createDocumentFragment();\n    const iterationDataLength = bindingData.iterationSize;\n    let clonedItem: any;\n    let iterationVm: any;\n    let iterationBindingCache: any;\n    let i = 0;\n\n    // create or clear exisitng iterationBindingCache\n    if (isArray(bindingData.iterationBindingCache)) {\n        bindingData.iterationBindingCache.length = 0;\n    } else {\n        bindingData.iterationBindingCache = [];\n    }\n\n    // generate forOf and append to DOM\n    for (i = 0; i < iterationDataLength; i += 1) {\n        clonedItem = cloneDomNode(bindingData.el);\n\n        // create bindingCache per iteration\n        iterationBindingCache = createBindingCache({\n            rootNode: clonedItem,\n            bindingAttrs,\n        });\n\n        bindingData.iterationBindingCache.push(iterationBindingCache);\n\n        if (!isEmptyObject(iterationBindingCache)) {\n            // create an iterationVm match iterator alias\n            iterationVm = createIterationViewModel({\n                bindingData,\n                viewModel,\n                iterationData,\n                keys,\n                index: i,\n            });\n\n            renderIteration({\n                elementCache: bindingData.iterationBindingCache[i],\n                iterationVm,\n                bindingAttrs,\n                isRegenerate: true,\n            });\n        }\n\n        fragment.appendChild(clonedItem);\n    }\n\n    return fragment;\n};\n\nexport default renderForOfBinding;\n","import {maxDatakeyLength} from './config';\nimport {REGEX} from './util';\nimport renderForOfBinding from './renderForOfBinding';\nimport type {BindingCache, ViewModel, BindingAttrs} from './types';\n\n/**\n * forOfBinding\n * @description\n * DOM decleartive for binding.\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst forOfBinding = (cache: BindingCache, viewModel: ViewModel, bindingAttrs: BindingAttrs, _forceRender?: boolean): void => {\n    const dataKey = cache.dataKey;\n\n    if (!dataKey || dataKey.length > maxDatakeyLength) {\n        return;\n    }\n\n    if (!cache.iterator) {\n        if (dataKey.length > maxDatakeyLength) {\n            return;\n        }\n        // replace mess spaces with single space\n        cache.dataKey = cache.dataKey.replace(REGEX.WHITE_SPACES, ' ');\n        const forExpMatch = dataKey.match(REGEX.FOR_OF);\n\n        if (!forExpMatch) {\n            return;\n        }\n\n        cache.iterator = {};\n        cache.iterator.alias = forExpMatch[1].trim();\n\n        if (forExpMatch[2]) {\n            cache.iterator.dataKey = forExpMatch[2].trim();\n            cache.parentElement = cache.el.parentElement;\n            cache.previousNonTemplateElement = cache.el.previousSibling;\n            cache.nextNonTemplateElement = cache.el.nextSibling;\n        }\n    }\n\n    renderForOfBinding({\n        bindingData: cache,\n        viewModel,\n        bindingAttrs,\n    });\n};\n\nexport default forOfBinding;\n","import {isEmptyObject} from './util';\nimport renderIteration from './renderIteration';\nimport createBindingCache from './domWalker';\nimport {commentSuffix} from './config';\nimport {removeElemnetsByCommentWrap, insertRenderedElements} from './commentWrapper';\nimport type {BindingCache, ViewModel, BindingAttrs} from './types';\n\ninterface RenderIfBindingParams {\n    bindingData: BindingCache;\n    viewModel: ViewModel;\n    bindingAttrs: BindingAttrs;\n}\n\n/**\n * isTargetDomRemoved\n * @description check if DOM between 'start' and 'end' comment tag has been removed\n * @param {object} bindingData\n * @return {boolean}\n */\nconst isTargetDomRemoved = (bindingData: BindingCache): boolean => {\n    let ret = false;\n    if (bindingData && bindingData.previousNonTemplateElement) {\n        const commentStartTextContent = bindingData.previousNonTemplateElement.textContent;\n        const endCommentTag = bindingData.previousNonTemplateElement.nextSibling;\n\n        if (endCommentTag && endCommentTag.nodeType === 8) {\n            if (endCommentTag.textContent === commentStartTextContent + commentSuffix) {\n                ret = true;\n            }\n        }\n    }\n    return ret;\n};\n\n/**\n * removeIfBinding\n * @description remove if binding DOM and clean up cache\n * @param {object} bindingData\n */\nconst removeIfBinding = (bindingData: BindingCache): void => {\n    removeElemnetsByCommentWrap(bindingData);\n    // remove cache.IterationBindingCache to prevent memory leak\n    if (bindingData.hasIterationBindingCache) {\n        delete bindingData.iterationBindingCache;\n        delete bindingData.hasIterationBindingCache;\n    }\n};\n\n/**\n * renderIfBinding\n * @description render if binding DOM\n * @param {object} bindingData\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst renderIfBinding = ({bindingData, viewModel, bindingAttrs}: RenderIfBindingParams): void => {\n    if (!bindingData.fragment) {\n        return;\n    }\n\n    const isDomRemoved = isTargetDomRemoved(bindingData);\n    let rootElement: Node = bindingData.el;\n\n    // remove current old DOM.\n    // TODO: try preserve DOM\n    if (!isDomRemoved && !bindingData.isOnce) {\n        removeIfBinding(bindingData);\n        // use fragment for create iterationBindingCache\n        const firstChild = bindingData.fragment.firstChild;\n        if (firstChild) {\n            rootElement = firstChild.cloneNode(true);\n        }\n    }\n\n    // walk clonedElement to create iterationBindingCache once\n    if (!bindingData.iterationBindingCache || !bindingData.hasIterationBindingCache) {\n        bindingData.iterationBindingCache = createBindingCache({\n            rootNode: rootElement,\n            bindingAttrs,\n        });\n    }\n\n    // only render if has iterationBindingCache\n    // means has other dataBindings to be render\n    if (!isEmptyObject(bindingData.iterationBindingCache)) {\n        bindingData.hasIterationBindingCache = true;\n        renderIteration({\n            elementCache: bindingData.iterationBindingCache,\n            iterationVm: viewModel,\n            bindingAttrs,\n            isRegenerate: true,\n        });\n    }\n\n    // insert to new rendered DOM\n    // TODO: check unnecessary insertion when DOM is preserved\n    insertRenderedElements(bindingData, rootElement);\n};\n\nexport {\n    renderIfBinding,\n    removeIfBinding,\n};\n","import {bindingAttrs as configBindingAttrs, constants} from './config';\nimport {getViewModelPropValue, removeElement} from './util';\nimport {createClonedElementCache, wrapCommentAround} from './commentWrapper';\nimport {renderIfBinding, removeIfBinding} from './renderIfBinding';\nimport type {BindingCache, ViewModel, BindingAttrs} from './types';\n\n/**\n * if-Binding\n * @description\n * DOM decleartive for binding.\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst ifBinding = (cache: BindingCache, viewModel: ViewModel, bindingAttrs: BindingAttrs, _forceRender?: boolean): void => {\n    const dataKey = cache.dataKey;\n\n    // isOnce only return if there is no child bindings\n    if (!dataKey || (cache.isOnce && cache.hasIterationBindingCache === false)) {\n        return;\n    }\n\n    cache.elementData = cache.elementData || {};\n    cache.type = cache.type || configBindingAttrs.if;\n\n    const oldViewModelProValue = cache.elementData.viewModelPropValue;\n    // getViewModelPropValue could be return undefined or null\n    const viewModelPropValue = getViewModelPropValue(viewModel, cache) || false;\n\n    // do nothing if viewModel value not changed and no child bindings\n    if (oldViewModelProValue === viewModelPropValue && !cache.hasIterationBindingCache) {\n        return;\n    }\n\n    const shouldRender = Boolean(viewModelPropValue);\n\n    // remove this cache from parent array\n    if (!shouldRender && cache.isOnce && cache.el.parentNode) {\n        removeElement(cache.el);\n        // delete cache.fragment;\n        removeBindingInQueue({\n            viewModel,\n            cache,\n        });\n        return;\n    }\n\n    // store new show status\n    cache.elementData.viewModelPropValue = viewModelPropValue;\n\n    // only create fragment once\n    // wrap comment tag around\n    // remove if attribute from original element to allow later dataBind parsing\n    if (!cache.fragment) {\n        wrapCommentAround(cache, cache.el);\n        cache.el.removeAttribute(bindingAttrs.if);\n        createClonedElementCache(cache);\n    }\n\n    if (!shouldRender) {\n        // remove element\n        removeIfBinding(cache);\n    } else {\n        // render element\n        renderIfBinding({\n            bindingData: cache,\n            viewModel,\n            bindingAttrs,\n        });\n\n        // if render once\n        // remove this cache from parent array if no child caches\n        if (cache.isOnce && !cache.hasIterationBindingCache) {\n            // delete cache.fragment;\n            removeBindingInQueue({\n                viewModel,\n                cache,\n            });\n        }\n    }\n};\n\nconst removeBindingInQueue = ({viewModel, cache}: {viewModel: ViewModel; cache: BindingCache}): boolean => {\n    let ret = false;\n    if (viewModel.APP?.postProcessQueue) {\n        const parentRef = cache[constants.PARENT_REF] as BindingCache[];\n        viewModel.APP.postProcessQueue.push(\n            ((cache: BindingCache, index: number) => () => {\n                parentRef.splice(index, 1);\n            })(cache, parentRef.indexOf(cache)),\n        );\n        ret = true;\n    }\n    return ret;\n};\n\nexport default ifBinding;\n","import {getViewModelPropValue} from './util';\nimport {createClonedElementCache, wrapCommentAround} from './commentWrapper';\nimport {renderIfBinding, removeIfBinding} from './renderIfBinding';\nimport type {BindingCache, ViewModel, BindingAttrs, CaseData} from './types';\n\n/**\n * switch-Binding\n * @description\n * DOM decleartive switch binding.\n * switch parent element wrap direct child with case bindings\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst switchBinding = (cache: BindingCache, viewModel: ViewModel, bindingAttrs: BindingAttrs, _forceRender?: boolean): void => {\n    const dataKey = cache.dataKey;\n\n    if (!dataKey) {\n        return;\n    }\n\n    cache.elementData = cache.elementData || {};\n\n    const newExpression = getViewModelPropValue(viewModel, cache);\n\n    if (newExpression === cache.elementData.viewModelPropValue) {\n        return;\n    }\n\n    cache.elementData.viewModelPropValue = newExpression;\n\n    // build switch cases if not yet defined\n    if (!cache.cases) {\n        const childrenElements = cache.el.children;\n        if (!childrenElements.length) {\n            return;\n        }\n        cache.cases = [];\n        for (let i = 0, elementLength = childrenElements.length; i < elementLength; i += 1) {\n            let caseData: CaseData | null = null;\n            const childElement = childrenElements[i] as HTMLElement;\n            if (childElement.hasAttribute(bindingAttrs.case)) {\n                caseData = createCaseData(childElement, bindingAttrs.case);\n            } else if (childElement.hasAttribute(bindingAttrs.default)) {\n                caseData = createCaseData(childElement, bindingAttrs.default);\n                caseData.isDefault = true;\n            }\n            // create fragment by clone node\n            // wrap with comment tag\n            if (caseData) {\n                wrapCommentAround(caseData, caseData.el);\n                // remove binding attribute for later dataBind parse\n                if (caseData.isDefault) {\n                    caseData.el.removeAttribute(bindingAttrs.default);\n                } else {\n                    caseData.el.removeAttribute(bindingAttrs.case);\n                }\n                createClonedElementCache(caseData);\n                cache.cases.push(caseData);\n            }\n        }\n    }\n\n    if (cache.cases.length) {\n        let hasMatch = false;\n        // do switch operation - reuse if binding logic\n        for (let j = 0, casesLength = cache.cases.length; j < casesLength; j += 1) {\n            let newCaseValue: unknown;\n            if (cache.cases[j].dataKey) {\n                // set back to dataKey if nothing found in viewModel\n                newCaseValue = getViewModelPropValue(viewModel, cache.cases[j]) || cache.cases[j].dataKey;\n            }\n\n            if (newCaseValue === cache.elementData.viewModelPropValue || cache.cases[j].isDefault) {\n                hasMatch = true;\n                // render element\n                renderIfBinding({\n                    bindingData: cache.cases[j],\n                    viewModel,\n                    bindingAttrs,\n                });\n\n                // remove other elements\n                removeUnmatchCases(cache.cases, j);\n                break;\n            }\n        }\n        // no match remove all cases\n        if (!hasMatch) {\n            removeUnmatchCases(cache.cases);\n        }\n    }\n};\n\nfunction removeUnmatchCases(cases: CaseData[], matchedIndex?: number): void {\n    cases.forEach((caseData: CaseData, index: number) => {\n        if (index !== matchedIndex || typeof matchedIndex === 'undefined') {\n            removeIfBinding(caseData);\n            // remove cache.IterationBindingCache to prevent memory leak\n            if (caseData.hasIterationBindingCache) {\n                caseData.iterationBindingCache = null;\n                caseData.hasIterationBindingCache = false;\n            }\n        }\n    });\n}\n\nfunction createCaseData(node: HTMLElement, attrName: string): CaseData {\n    const caseData: CaseData = {\n        el: node,\n        dataKey: node.getAttribute(attrName),\n        type: attrName,\n    };\n    return caseData;\n}\n\nexport default switchBinding;\n","import {\n    getFormData,\n    getViewModelValue,\n    resolveViewModelContext,\n    resolveParamList,\n} from './util';\nimport type {BindingCache, ViewModel} from './types';\n\n/**\n * Create event handler wrapper\n */\nfunction createEventHandlerWrapper(\n    type: string,\n    paramList: unknown[],\n    handlerFn: Function,\n    viewModelContext: ViewModel,\n): EventListener {\n    return function handlerWrap(e: Event): void {\n        let formData: Record<string, unknown>;\n        let args: unknown[] = [];\n        if (type === 'submit') {\n            formData = getFormData(e.currentTarget as HTMLFormElement);\n            args = [e, e.currentTarget, formData].concat(paramList as any[]);\n        } else {\n            args = [e, e.currentTarget].concat(paramList as any[]);\n        }\n        handlerFn.apply(viewModelContext, args);\n    };\n}\n\ninterface CreateEventBindingParams {\n    cache?: BindingCache;\n    forceRender?: boolean;\n    type?: string;\n    viewModel?: ViewModel;\n}\n\nconst createEventBinding = ({\n    cache = {} as BindingCache,\n    forceRender = false,\n    type = '',\n    viewModel = {} as ViewModel,\n}: CreateEventBindingParams): void => {\n    const handlerName = cache.dataKey;\n    let paramList = cache.parameters;\n    let viewModelContext: ViewModel;\n    const APP = viewModel.APP || viewModel.$root?.APP;\n    const rootElement = APP?.$rootElement as HTMLElement | undefined;\n\n    if (!type || !handlerName || (!forceRender && rootElement && !rootElement.contains(cache.el))) {\n        return;\n    }\n\n    const handlerFn = getViewModelValue(viewModel, handlerName);\n\n    if (typeof handlerFn === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        const handlerWrap = createEventHandlerWrapper(\n            type,\n            paramList,\n            handlerFn,\n            viewModelContext,\n        );\n\n        cache.el.removeEventListener(type, handlerWrap, false);\n        cache.el.addEventListener(type, handlerWrap, false);\n    }\n};\n\nexport default createEventBinding;\n","import hoverBinding from './hoverBinding';\nimport changeBinding from './changeBinding';\nimport modelBinding from './modelBinding';\nimport textBinding from './textBinding';\nimport showBinding from './showBinding';\nimport cssBinding from './cssBinding';\nimport attrBinding from './attrBinding';\nimport forOfBinding from './forOfBinding'; // depends renderForOfBinding -> this , renderIteration\nimport ifBinding from './ifBinding';\nimport switchBinding from './switchBinding';\nimport createEventBinding from './createEventBinding';\nimport type {ElementCache, UpdateOption, BindingAttrs, ViewModel, BindingCache} from './types';\n\ninterface ApplyBindingParams {\n    ctx: unknown;\n    elementCache: ElementCache;\n    updateOption: UpdateOption;\n    bindingAttrs: BindingAttrs;\n    viewModel: ViewModel;\n}\n\nfunction applyBinding({ctx: _ctx, elementCache, updateOption, bindingAttrs, viewModel}: ApplyBindingParams): void {\n    if (!elementCache || !updateOption) {\n        return;\n    }\n\n    // the follow binding should be in order for better efficiency\n\n    // apply forOf Binding\n    if (updateOption.forOfBinding && elementCache[bindingAttrs.forOf] && elementCache[bindingAttrs.forOf].length) {\n        elementCache[bindingAttrs.forOf].forEach((cache: BindingCache) => {\n            forOfBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply attr Binding\n    if (updateOption.attrBinding && elementCache[bindingAttrs.attr] && elementCache[bindingAttrs.attr].length) {\n        elementCache[bindingAttrs.attr].forEach((cache: BindingCache) => {\n            attrBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply if Binding\n    if (updateOption.ifBinding && elementCache[bindingAttrs.if] && elementCache[bindingAttrs.if].length) {\n        elementCache[bindingAttrs.if].forEach((cache: BindingCache) => {\n            ifBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply show Binding\n    if (updateOption.showBinding && elementCache[bindingAttrs.show] && elementCache[bindingAttrs.show].length) {\n        elementCache[bindingAttrs.show].forEach((cache: BindingCache) => {\n            showBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply switch Binding\n    if (updateOption.switchBinding && elementCache[bindingAttrs.switch] && elementCache[bindingAttrs.switch].length) {\n        elementCache[bindingAttrs.switch].forEach((cache: BindingCache) => {\n            switchBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply text binding\n    if (updateOption.textBinding && elementCache[bindingAttrs.text] && elementCache[bindingAttrs.text].length) {\n        elementCache[bindingAttrs.text].forEach((cache: BindingCache) => {\n            textBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply cssBinding\n    if (updateOption.cssBinding && elementCache[bindingAttrs.css] && elementCache[bindingAttrs.css].length) {\n        elementCache[bindingAttrs.css].forEach((cache: BindingCache) => {\n            cssBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply model binding\n    if (updateOption.modelBinding && elementCache[bindingAttrs.model] && elementCache[bindingAttrs.model].length) {\n        elementCache[bindingAttrs.model].forEach((cache: BindingCache) => {\n            modelBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply change binding\n    if (updateOption.changeBinding && elementCache[bindingAttrs.change] && elementCache[bindingAttrs.change].length) {\n        elementCache[bindingAttrs.change].forEach((cache: BindingCache) => {\n            changeBinding({\n                bindingAttrs,\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'change',\n                viewModel,\n            });\n        });\n    }\n\n    // apply submit binding\n    if (updateOption.submitBinding && elementCache[bindingAttrs.submit] && elementCache[bindingAttrs.submit].length) {\n        elementCache[bindingAttrs.submit].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'submit',\n                viewModel,\n            });\n        });\n    }\n\n    // apply click binding\n    if (updateOption.clickBinding && elementCache[bindingAttrs.click] && elementCache[bindingAttrs.click].length) {\n        elementCache[bindingAttrs.click].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'click',\n                viewModel,\n            });\n        });\n    }\n\n    // apply double click binding\n    if (updateOption.dblclickBinding && elementCache[bindingAttrs.dblclick] && elementCache[bindingAttrs.dblclick].length) {\n        elementCache[bindingAttrs.dblclick].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'dblclick',\n                viewModel,\n            });\n        });\n    }\n\n    // apply blur binding\n    if (updateOption.blurBinding && elementCache[bindingAttrs.blur] && elementCache[bindingAttrs.blur].length) {\n        elementCache[bindingAttrs.blur].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'blur',\n                viewModel,\n            });\n        });\n    }\n\n    // apply focus binding\n    if (updateOption.focusBinding && elementCache[bindingAttrs.focus] && elementCache[bindingAttrs.focus].length) {\n        elementCache[bindingAttrs.focus].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'focus',\n                viewModel,\n            });\n        });\n    }\n\n    // apply hover binding\n    if (updateOption.hoverBinding && elementCache[bindingAttrs.hover] && elementCache[bindingAttrs.hover].length) {\n        elementCache[bindingAttrs.hover].forEach((cache: BindingCache) => {\n            hoverBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply input binding - eg html range input\n    if (updateOption.inputBinding && elementCache[bindingAttrs.input] && elementCache[bindingAttrs.input].length) {\n        elementCache[bindingAttrs.input].forEach((cache: BindingCache) => {\n            changeBinding({\n                bindingAttrs,\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'input',\n                viewModel,\n            });\n        });\n    }\n}\n\nexport default applyBinding;\n","import {getViewModelPropValue} from './util';\nimport type {BindingCache, ViewModel, BindingAttrs} from './types';\n\n/**\n * showBinding\n * @description\n * DOM decleartive show binding. Make binding show/hide according to viewModel data (boolean)\n * viewModel data can function but must return boolean\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst showBinding = (cache: BindingCache, viewModel: ViewModel, _bindingAttrs: BindingAttrs, _forceRender?: boolean): void => {\n    const dataKey = cache.dataKey;\n    let currentInlineSytle: CSSStyleDeclaration | Record<string, never> = {};\n    let currentInlineDisplaySytle = '';\n    let shouldShow = true;\n\n    if (!dataKey) {\n        return;\n    }\n\n    cache.elementData = cache.elementData || {};\n\n    const oldShowStatus = cache.elementData.viewModelPropValue;\n\n    // store current element display default style once only\n    if (\n        typeof cache.elementData.displayStyle === 'undefined' ||\n        typeof cache.elementData.computedStyle === 'undefined'\n    ) {\n        currentInlineSytle = cache.el.style;\n        currentInlineDisplaySytle = currentInlineSytle.display;\n        // use current inline style if defined\n        if (currentInlineDisplaySytle) {\n            // set to 'block' if is 'none'\n            cache.elementData.displayStyle = currentInlineDisplaySytle === 'none' ? 'block' : currentInlineDisplaySytle;\n            cache.elementData.computedStyle = null;\n        } else {\n            const computeStyle = window.getComputedStyle(cache.el, null).getPropertyValue('display');\n            cache.elementData.displayStyle = null;\n            cache.elementData.computedStyle = computeStyle;\n        }\n    }\n\n    shouldShow = getViewModelPropValue(viewModel, cache);\n\n    // treat undefined || null as false.\n    // eg if property doesn't exsits in viewModel, it will treat as false to hide element\n    shouldShow = Boolean(shouldShow);\n\n    // reject if nothing changed\n    if (oldShowStatus === shouldShow) {\n        return;\n    }\n\n    if (!shouldShow) {\n        if (cache.el.style.display !== 'none') {\n            cache.el.style.setProperty('display', 'none');\n        }\n    } else {\n        if (cache.elementData.computedStyle || cache.el.style.display === 'none') {\n            if (cache.elementData.computedStyle === 'none') {\n                // default display is none in css rule, so use display 'block'\n                cache.el.style.setProperty('display', 'block');\n            } else {\n                // has default displayable type so just remove inline display 'none'\n                if (currentInlineSytle.length > 1) {\n                    cache.el.style.removeProperty('display');\n                } else {\n                    cache.el.removeAttribute('style');\n                }\n            }\n        } else {\n            // element default display was inline style, so restore it\n            cache.el.style.setProperty('display', cache.elementData.displayStyle);\n        }\n    }\n\n    // store new show status\n    cache.elementData.viewModelPropValue = shouldShow;\n};\n\nexport default showBinding;\n","import {getViewModelPropValue} from './util';\n\n/**\n * textBinding\n * * @description\n * DOM decleartive text binding update dom textnode with viewModel data\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst textBinding = (cache: any, viewModel: any, bindingAttrs: any, forceRender: any): void => {\n    const dataKey = cache.dataKey;\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    // NOTE: this doesn't work for for-of, if and switch bindings because element was not in DOM\n    if (!dataKey || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    const newValue = getViewModelPropValue(viewModel, cache);\n    const oldValue = cache.el.textContent;\n\n    if (typeof newValue !== 'undefined' && typeof newValue !== 'object' && newValue !== null) {\n        if (newValue !== oldValue) {\n            cache.el.textContent = newValue;\n        }\n    }\n};\n\nexport default textBinding;\n","import {\n    getViewModelPropValue,\n    isPlainObject,\n    arrayRemoveMatch,\n    each,\n} from './util';\n\n/**\n * cssBinding\n * @description\n * DOM decleartive css binding. update classlist.\n * viewModel data can function but must return JSOL.\n * added css class if value is true\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst cssBinding = (cache: any, viewModel: any, bindingAttrs: any, forceRender: any): void => {\n    const dataKey = cache.dataKey;\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    if (!dataKey || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    cache.elementData = cache.elementData || {};\n    cache.elementData.viewModelPropValue = cache.elementData.viewModelPropValue || '';\n\n    const oldCssList = cache.elementData.viewModelPropValue;\n    let newCssList = '';\n    const vmCssListObj = getViewModelPropValue(viewModel, cache);\n    let vmCssListArray: any[] = [];\n    let isViewDataObject = false;\n    let isViewDataString = false;\n    let cssList: any[] = [];\n\n    if (typeof vmCssListObj === 'string') {\n        isViewDataString = true;\n    } else if (isPlainObject(vmCssListObj)) {\n        isViewDataObject = true;\n    } else {\n        // reject if vmCssListObj is not an object or string\n        return;\n    }\n\n    if (isViewDataObject) {\n        newCssList = JSON.stringify(vmCssListObj);\n    } else {\n        newCssList = vmCssListObj.replace(/\\s\\s+/g, ' ').trim();\n        vmCssListArray = newCssList.split(' ');\n    }\n    // reject if nothing changed\n    if (oldCssList === newCssList) {\n        return;\n    }\n\n    // get current css classes from element\n    const domCssList = cache.el.classList;\n    // clone domCssList as new array\n    const domCssListLength = domCssList.length;\n    for (let i = 0; i < domCssListLength; i += 1) {\n        cssList.push(domCssList[i]);\n    }\n\n    if (isViewDataObject) {\n        each(vmCssListObj, (k: any, v: any) => {\n            const i = cssList.indexOf(k);\n            if (v === true) {\n                cssList.push(k);\n            } else if (i !== -1) {\n                cssList.splice(i, 1);\n            }\n        });\n    } else if (isViewDataString) {\n        // remove oldCssList items from cssList\n        cssList = arrayRemoveMatch(cssList, oldCssList);\n        cssList = cssList.concat(vmCssListArray);\n    }\n\n    // unique cssList array\n    cssList = cssList.filter((v: any, i: any, a: any) => {\n        return a.indexOf(v) === i;\n    });\n\n    const cssListString = cssList.join(' ');\n    // update element data\n    cache.elementData.viewModelPropValue = newCssList;\n    // replace all css classes\n    cache.el.setAttribute('class', cssListString);\n};\n\nexport default cssBinding;\n","import {getViewModelValue} from './util';\n\n/**\n * modelBinding\n * @description input element data binding. viewModel -> DOM update\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst modelBinding = (cache: any, viewModel: any, bindingAttrs: any, forceRender: any): void => {\n    const dataKey = cache.dataKey;\n    let newValue: any = '';\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    if (!dataKey || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    newValue = getViewModelValue(viewModel, dataKey);\n\n    if (typeof newValue !== 'undefined' && newValue !== null) {\n        const $element = cache.el;\n        const isCheckbox = $element.type === 'checkbox';\n        const isRadio = $element.type === 'radio';\n        const inputName = $element.name;\n        const $radioGroup = isRadio ? APP.$rootElement.querySelectorAll(`input[name=\"${inputName}\"]`) : [];\n        const oldValue = isCheckbox ? $element.checked : $element.value;\n\n        // update element value\n        if (newValue !== oldValue) {\n            if (isCheckbox) {\n                $element.checked = Boolean(newValue);\n            } else if (isRadio) {\n                let i = 0;\n                const radioGroupLength = $radioGroup.length;\n\n                for (i = 0; i < radioGroupLength; i += 1) {\n                    if ($radioGroup[i].value === newValue) {\n                        $radioGroup[i].checked = true;\n                        break;\n                    }\n                }\n            } else {\n                $element.value = newValue;\n            }\n        }\n    }\n};\n\nexport default modelBinding;\n","\nimport {bindingDataReference} from './config';\nimport {\n    getViewModelValue,\n    resolveViewModelContext,\n    resolveParamList,\n} from './util';\nimport type {BindingCache, ViewModel, BindingAttrs} from './types';\n\n/**\n * Create mouse enter handler\n */\nfunction createMouseEnterHandler(\n    cache: BindingCache,\n    handlers: any,\n    inHandlerName: string,\n    viewModelContext: any,\n    paramList: unknown[],\n): (e: MouseEvent) => void {\n    return function onMouseEnterHandler(e: MouseEvent) {\n        const args = [e, cache.el].concat(paramList as any[]);\n        handlers[inHandlerName].apply(viewModelContext, args);\n    };\n}\n\n/**\n * Create mouse leave handler\n */\nfunction createMouseLeaveHandler(\n    cache: BindingCache,\n    handlers: any,\n    outHandlerName: string,\n    viewModelContext: any,\n    paramList: unknown[],\n): (e: MouseEvent) => void {\n    return function onMouseLeaveHandler(e: MouseEvent) {\n        const args = [e, cache.el].concat(paramList as any[]);\n        handlers[outHandlerName].apply(viewModelContext, args);\n    };\n}\n\n/**\n * hoverBinding\n * DOM decleartive on hover event binding\n * event handler bind to viewModel method according to the DOM attribute\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst hoverBinding = (cache: BindingCache, viewModel: ViewModel, bindingAttrs: BindingAttrs, forceRender: boolean): void => {\n    const handlerName = cache.dataKey;\n    let paramList = cache.parameters;\n    const inHandlerName = bindingDataReference.mouseEnterHandlerName;\n    const outHandlerName = bindingDataReference.mouseLeaveHandlerName;\n    let viewModelContext: ViewModel;\n    const APP = viewModel.APP || viewModel.$root?.APP;\n\n    cache.elementData = cache.elementData || {};\n\n    // TODO: check what is APP.$rootElement.contains(cache.el)\n    const rootElement = APP?.$rootElement as HTMLElement | undefined;\n    if (!handlerName || (!forceRender && rootElement && !rootElement.contains(cache.el))) {\n        return;\n    }\n\n    const handlers = getViewModelValue(viewModel, handlerName);\n\n    if (handlers && typeof handlers[inHandlerName] === 'function' && typeof handlers[outHandlerName] === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        const onMouseEnterHandler = createMouseEnterHandler(cache, handlers, inHandlerName, viewModelContext, paramList);\n        const onMouseLeaveHandler = createMouseLeaveHandler(cache, handlers, outHandlerName, viewModelContext, paramList);\n\n        cache.el.removeEventListener('mouseenter', onMouseEnterHandler as any, false);\n        cache.el.removeEventListener('mouseleave', onMouseLeaveHandler as any, false);\n\n        cache.el.addEventListener('mouseenter', onMouseEnterHandler, false);\n        cache.el.addEventListener('mouseleave', onMouseLeaveHandler, false);\n    }\n};\n\nexport default hoverBinding;\n","import * as util from './util';\n\n/**\n *  pubSub\n * @description use jQuery object as pubSub\n * @example EVENTS object strucure:\n *  EVENTS = {\n        'EVENT-NAME': [{ 'comp-id': fn }],\n        'EVENT-NAME2': [{ 'comp-id': fn }]\n    };\n */\n\ninterface Subscriber {\n    [compId: string]: Function | boolean | undefined;\n    isOnce?: boolean;\n}\n\ninterface Events {\n    [eventName: string]: Subscriber[];\n}\n\nconst EVENTS: Events = {};\n\nexport const subscribeEvent = (instance: any = null, eventName: string = '', fn: Function, isOnce: boolean = false): void => {\n    if (!instance || !instance.compId || !eventName || typeof fn !== 'function') {\n        return;\n    }\n\n    let subscriber: Subscriber;\n    let isSubscribed = false;\n\n    eventName = eventName.replace(util.REGEX.WHITE_SPACES, '');\n    EVENTS[eventName] = EVENTS[eventName] || [];\n    // check if already subscribed and update callback fn\n    isSubscribed = EVENTS[eventName].some((subscriber) => {\n        if (subscriber[instance.compId]) {\n            subscriber[instance.compId] = fn.bind(instance.viewModel);\n            subscriber.isOnce = isOnce;\n            return true;\n        }\n        return false;\n    });\n    // push if not yet subscribe\n    if (!isSubscribed) {\n        subscriber = {};\n        subscriber[instance.compId] = fn.bind(instance.viewModel);\n        subscriber.isOnce = isOnce;\n        EVENTS[eventName].push(subscriber);\n    }\n};\n\nexport const subscribeEventOnce = (instance: any = null, eventName: string = '', fn: Function): void => {\n    subscribeEvent(instance, eventName, fn, true);\n};\n\nexport const unsubscribeEvent = (compId: string | number = '', eventName: string = ''): void => {\n    if (!compId || !eventName) {\n        return;\n    }\n\n    let i = 0;\n    let subscribersLength = 0;\n    let subscriber: Subscriber;\n\n    eventName = eventName.replace(util.REGEX.WHITE_SPACES, '');\n\n    if (EVENTS[eventName]) {\n        subscribersLength = EVENTS[eventName].length;\n        for (i = 0; i < subscribersLength; i += 1) {\n            subscriber = EVENTS[eventName][i];\n            if (subscriber[compId]) {\n                EVENTS[eventName].splice(i, 1);\n                break;\n            }\n        }\n    }\n    // delete the event if no more subscriber\n    if (EVENTS[eventName] && !EVENTS[eventName].length) {\n        delete EVENTS[eventName];\n    }\n};\n\n/**\n * unsubscribeAllEvent\n * @description unsubscribe all event by compId. eg when a component removed\n * @param {string} compId\n */\nexport const unsubscribeAllEvent = (compId: string | number = ''): void => {\n    if (!compId) {\n        return;\n    }\n    Object.keys(EVENTS).forEach((eventName) => {\n        unsubscribeEvent(compId, eventName);\n    });\n};\n\nexport const publishEvent = (eventName: string = '', ...args: any[]): void => {\n    if (!eventName || !EVENTS[eventName]) {\n        return;\n    }\n\n    eventName = eventName.replace(util.REGEX.WHITE_SPACES, '');\n\n    EVENTS[eventName].forEach((subscriber) => {\n        Object.keys(subscriber).forEach((compId) => {\n            if (typeof subscriber[compId] === 'function') {\n                const ret = subscriber[compId](...args);\n                if (subscriber.isOnce) {\n                    unsubscribeEvent(compId, eventName);\n                }\n                return ret;\n            }\n        });\n    });\n};\n","import * as config from './config';\nimport {debounceRaf} from './util';\nimport createBindingCache from './domWalker';\nimport createBindingOption from './createBindingOption';\nimport applyBinding from './applyBinding';\nimport renderTemplatesBinding from './renderTemplatesBinding';\nimport postProcess from './postProcess';\nimport * as pubSub from './pubSub';\n\nlet compIdIndex = 0;\n\nclass Binder {\n    initRendered: boolean;\n    compId: number;\n    $rootElement: any;\n    viewModel: any;\n    bindingAttrs: any;\n    isServerRendered: boolean;\n    elementCache: any;\n    postProcessQueue: any[];\n    render: (opt?: any) => void;\n\n    constructor($rootElement: any, viewModel: any, bindingAttrs: any) {\n        if (!$rootElement || $rootElement.nodeType !== 1 || viewModel === null || typeof viewModel !== 'object') {\n            throw new TypeError('$rootElement or viewModel is invalid');\n        }\n\n        this.initRendered = false;\n\n        this.compId = compIdIndex += 1;\n\n        this.$rootElement = $rootElement;\n\n        this.viewModel = viewModel;\n\n        this.bindingAttrs = bindingAttrs;\n\n        this.isServerRendered = this.$rootElement.getAttribute(config.serverRenderedAttr) !== null;\n\n        // Initialize render method with debounced version\n        this.render = debounceRaf(this._render.bind(this), this) as any;\n\n        // inject instance into viewModel\n        this.viewModel.APP = this;\n\n        // add $root pointer to viewModel so binding can be refer as $root.something\n        this.viewModel.$root = this.viewModel;\n\n        // 1st step\n        // parsView walk the DOM and create binding cache that holds each element's binding details\n        // this binding cache is like AST for render and update\n        this.parseView();\n\n        // for jquery user set viewModel referece to $rootElement for easy debug\n        // otherwise use Expando to attach viewModel to $rootElement\n        this.$rootElement[config.bindingDataReference.rootDataKey] = this.viewModel;\n\n        return this;\n    }\n\n    /**\n     * parseView\n     * @description\n     * @return {this}\n     * traver from $rootElement to find each data-bind-* element\n     * then apply data binding\n     */\n    parseView(): this {\n        this.elementCache = createBindingCache({\n            rootNode: this.$rootElement,\n            bindingAttrs: this.bindingAttrs,\n        });\n\n        // updateElementCache if server rendered on init\n        if (this.isServerRendered && !this.initRendered) {\n            this.updateElementCache({\n                templateCache: true,\n            });\n        }\n        return this;\n    }\n\n    /**\n     * updateElementCache\n     * @param {object} opt\n     * @description call createBindingCache to parse view and generate bindingCache\n     */\n    updateElementCache(opt: any = {}): void {\n        const elementCache = opt.elementCache || this.elementCache;\n\n        if (opt.allCache) {\n            // walk dom from root element to regenerate elementCache\n            this.elementCache = createBindingCache({\n                rootNode: this.$rootElement,\n                bindingAttrs: this.bindingAttrs,\n            });\n        }\n        // walk from first rendered template node to create/update child bindingCache\n        if (opt.allCache || opt.templateCache) {\n            if (elementCache[this.bindingAttrs.tmp] && elementCache[this.bindingAttrs.tmp].length) {\n                // Use for loop to handle templates added during rendering\n                for (let i = 0; i < elementCache[this.bindingAttrs.tmp].length; i++) {\n                    const cache = elementCache[this.bindingAttrs.tmp][i];\n                    // set skipCheck as skipForOfParseFn whenever an node has\n                    // both template and forOf bindings\n                    // then the template bindingCache should be an empty object\n                    let skipForOfParseFn: any = null;\n                    if (cache.el.hasAttribute(this.bindingAttrs.forOf)) {\n                        skipForOfParseFn = (): boolean => {\n                            return true;\n                        };\n                    }\n                    cache.bindingCache = createBindingCache({\n                        rootNode: cache.el,\n                        bindingAttrs: this.bindingAttrs,\n                        skipCheck: skipForOfParseFn,\n                        isRenderedTemplate: opt.isRenderedTemplates,\n                    });\n                }\n            }\n        }\n    }\n\n    _render(opt: any = {}): void {\n        let updateOption: any = {};\n\n        if (!this.initRendered) {\n            // only update eventsBinding if server rendered\n            if (this.isServerRendered) {\n                this.$rootElement.removeAttribute(config.serverRenderedAttr);\n                updateOption = createBindingOption(config.bindingUpdateConditions.serverRendered, opt);\n            } else {\n                updateOption = createBindingOption(config.bindingUpdateConditions.init, opt);\n            }\n        } else {\n            // when called again only update visualBinding options\n            updateOption = createBindingOption('', opt);\n        }\n\n        // create postProcessQueue before start rendering\n        this.postProcessQueue = [];\n\n        const renderBindingOption = {\n            ctx: this,\n            elementCache: this.elementCache,\n            updateOption,\n            bindingAttrs: this.bindingAttrs,\n            viewModel: this.viewModel,\n        };\n\n        // always render template binding first\n        // render and apply binding to template(s)\n        // this is an share function therefore passing 'this' context\n        renderTemplatesBinding(renderBindingOption);\n\n        // apply bindings to rest of the DOM\n        applyBinding(renderBindingOption);\n\n        // trigger postProcess\n        postProcess(this.postProcessQueue);\n        // clear postProcessQueue\n        this.postProcessQueue.length = 0;\n        delete this.postProcessQueue;\n\n        this.initRendered = true;\n    }\n\n    subscribe(eventName: string = '', fn: any): this {\n        pubSub.subscribeEvent(this, eventName, fn);\n        return this;\n    }\n\n    subscribeOnce(eventName: string = '', fn: any): this {\n        pubSub.subscribeEventOnce(this, eventName, fn);\n        return this;\n    }\n\n    unsubscribe(eventName: string = ''): this {\n        pubSub.unsubscribeEvent(this.compId, eventName);\n        return this;\n    }\n\n    unsubscribeAll(): this {\n        pubSub.unsubscribeAllEvent(this.compId);\n        return this;\n    }\n\n    publish(eventName: string = '', ...args: any[]): this {\n        pubSub.publishEvent(eventName, ...args);\n        return this;\n    }\n}\n\nexport default Binder;\n","import {\n    each,\n    throwErrorMessage,\n} from './util';\n\nexport default function postProcess(tasks: Function[]): void {\n    if (!tasks || !tasks.length) {\n        return;\n    }\n\n    each(tasks, (index: number, task: Function) => {\n        if (typeof task === 'function') {\n            try {\n                task();\n            } catch (err) {\n                throwErrorMessage(err, `Error postProcess: ${  String(task)}`);\n            }\n        }\n    });\n}\n","import * as config from './config';\nimport {extend} from './util';\nimport Binder from './binder';\n\nconst isSupportPromise = typeof window['Promise'] === 'function';\n\nlet bindingAttrs = config.bindingAttrs;\n\nconst use = (settings: any = {}): void => {\n    if (settings.bindingAttrs) {\n        bindingAttrs = extend(false, {}, settings.bindingAttrs);\n    }\n};\n\nconst init = ($rootElement: any, viewModel: any = null): any => {\n    if (!isSupportPromise) {\n        return console.warn('Browser not support Promise');\n    }\n    return new Binder($rootElement, viewModel, bindingAttrs);\n};\n\nexport default {\n    use,\n    init,\n    version: '@version@',\n};\n"],"names":["bindingAttrs","comp","tmp","text","click","dblclick","blur","focus","hover","input","change","submit","model","show","css","attr","forOf","if","switch","case","default","serverRenderedAttr","commentPrefix","commentSuffix","bindingDataReference","bindingUpdateConditions","maxDatakeyLength","constants","ONCE","hasIsArray","Array","isArray","REGEX","BAD_TAGS","FOR_OF","FUNCTION_PARAM","HTML_TAG","OBJECT_LITERAL","PIPE","WHITE_SPACES","LINE_BREAKS_TABS","IS_SUPPORT_TEMPLATE","document","createElement","WRAP_MAP","div","thead","col","tr","td","caption","colgroup","tbody","tfoot","th","obj","Object","prototype","toString","call","isJsObject","isPlainObject","ctor","constructor","prot","hasOwnProperty","isEmptyObject","getOwnPropertyNames","length","createHtmlFragment","htmlString","template","innerHTML","replace","removeBadTags","content","fragment","createDocumentFragment","queryContainer","firstTag","match","getFirstHtmlStringTag","wrap","createRange","createContextualFragment","insertAdjacentHTML","query","querySelector","firstChild","appendChild","DANGEROUS_PROPS","isSafeProperty","prop","includes","getViewModelValue","viewModel","path","def","fullPath","split","filter","Boolean","current","step","undefined","_get","setViewModelValue","value","_set","pathArray","key","console","warn","lastKey","target","slice","reduce","a","c","i","nextKey","Math","abs","Number","getViewModelPropValue","bindingCache","dataKey","paramList","parameters","isInvertBoolean","charAt","substring","ret","viewModelContext","resolveViewModelContext","oldViewModelProValue","elementData","viewModelPropValue","resolveParamList","args","concat","el","apply","filtersViewModelPropValue","filters","each","index","filterFn","err","throwErrorMessage","createDeferredObj","dfObj","promise","Promise","resolve","reject","extend","isDeepMerge","sources","source","shift","isMergebleObject","keys","forEach","_extends","fn","keysLength","isArrayObj","TypeError","item","cloneDomNode","element","cloneNode","insertAfter","parentNode","newNode","referenceNode","refNextElement","nextSibling","insertBefore","datakey","bindingDataContext","config","map","param","trim","emptyElement","node","removeChild","errorMessage","message","error","log","bindingAttrsMap","walkDOM","func","parseChildNode","firstElementChild","nextElementSibling","rootSkipCheck","tagName","defaultSkipCheck","hasAttribute","populateBindingCache","attrObj","type","attrValue","cacheData","filterList","isOnceIndex","v","isOnce","splice","extractFilterList","str","paramlist","params","getFunctionParameterList","push","createBindingCache","rootNode","skipCheck","isRenderedTemplate","window","Node","sourceObj","invertedKey","parseNode","skipNodeCheckFn","isSkipForOfChild","nodeType","hasAttributes","attributes","name","getAttributesObject","hasSkipChildParseBindings","checkSkipChildParseBindings","iterateList","createBindingOption","condition","opt","visualBindingOptions","templateBinding","textBinding","cssBinding","ifBinding","showBinding","modelBinding","attrBinding","forOfBinding","switchBinding","eventsBindingOptions","changeBinding","clickBinding","dblclickBinding","blurBinding","focusBinding","hoverBinding","inputBinding","submitBinding","serverRenderedOptions","updateOption","forceRender","reUnescapedHtml","reHasUnescapedHtml","RegExp","htmlEscapes","escapeHtmlChar","chr","createChangeHandler","modelDataKey","handlerFn","oldValue","newValue","e","$this","this","isCheckbox","string","checked","test","currentTarget","cache","handlerName","getAttribute","APP","_a","$root","rootElement","$rootElement","contains","changeHandler","removeEventListener","addEventListener","_bindingAttrs","_forceRender","isObjLiteralStr","isObjectLiteralString","vmAttrObj","parseBindingObjectString","objectLiteralString","keyVal","JSON","stringify","oldAttrObj","setAttribute","_value","removeAttribute","$domFragment","$templateRoot","$templateRootPrepend","$templateRootAppend","nestTemplatesCount","renderTemplate","elementCache","settings","parse","parseStringToJson","viewData","data","isAppend","append","isPrepend","prepend","$currentElement","$element","$index","htmlFragment","id","templateElement","getElementById","getTemplateString","childNodes","$nestedTemplates","querySelectorAll","nestedTemplatesLength","thisTemplateCache","afterTemplateRender","renderTemplatesBinding","ctx","updateElementCache","templateCache","isRenderedTemplates","applyBindingModule","renderIteration","iterationVm","isRegenerate","bindingUpdateOption","createClonedElementCache","bindingData","clonedElement","setCommentPrefix","dataKeyMarker","util","setDocRangeEndAfter","endTextContent","textContent","docRange","setEndBefore","wrapCommentAround","prefix","commentBegin","createComment","commentEnd","previousNonTemplateElement","previousSibling","nextNonTemplateElement","parentElement","removeElemnetsByCommentWrap","setStartBefore","deleteContents","insertRenderedElements","createIterationViewModel","iterationData","iterator","alias","generateForOfElements","iterationDataLength","iterationSize","clonedItem","iterationBindingCache","forExpMatch","renderForOfBinding","configBindingAttrs","removeIfBinding","hasIterationBindingCache","renderIfBinding","isDomRemoved","commentStartTextContent","endCommentTag","isTargetDomRemoved","shouldRender","removeBindingInQueue","postProcessQueue","parentRef","indexOf","newExpression","cases","childrenElements","children","elementLength","caseData","childElement","createCaseData","isDefault","hasMatch","j","casesLength","newCaseValue","removeUnmatchCases","matchedIndex","attrName","createEventHandlerWrapper","formData","$form","HTMLFormElement","FormData","getFormData","createEventBinding","handlerWrap","applyBinding","_ctx","currentInlineSytle","currentInlineDisplaySytle","shouldShow","oldShowStatus","displayStyle","computedStyle","style","display","computeStyle","getComputedStyle","getPropertyValue","setProperty","removeProperty","oldCssList","newCssList","vmCssListObj","vmCssListArray","isViewDataObject","isViewDataString","cssList","domCssList","classList","domCssListLength","arrayRemoveMatch","frommArray","k","_index","cssListString","join","isRadio","inputName","$radioGroup","radioGroupLength","inHandlerName","outHandlerName","handlers","onMouseEnterHandler","createMouseEnterHandler","onMouseLeaveHandler","createMouseLeaveHandler","EVENTS","subscribeEvent","instance","eventName","compId","subscriber","isSubscribed","some","bind","unsubscribeEvent","subscribersLength","compIdIndex","Binder","initRendered","isServerRendered","render","debounceRaf","rafId","from","arguments","cancelAnimationFrame","requestAnimationFrame","_render","parseView","allCache","skipForOfParseFn","renderBindingOption","tasks","task","String","subscribe","pubSub","subscribeOnce","subscribeEventOnce","unsubscribe","unsubscribeAll","unsubscribeAllEvent","publish","publishEvent","isSupportPromise","use","init","version"],"mappings":"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"}