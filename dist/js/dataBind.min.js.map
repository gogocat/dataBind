{"version":3,"file":"dataBind.min.js","sources":["../../../src/config.ts","../../../src/util.ts","../../../src/domWalker.ts","../../../src/createBindingOption.ts","../../../src/_escape.ts","../../../src/changeBinding.ts","../../../src/attrBinding.ts","../../../src/renderTemplate.ts","../../../src/renderTemplatesBinding.ts","../../../src/renderIteration.ts","../../../src/commentWrapper.ts","../../../src/renderForOfBinding.ts","../../../src/forOfBinding.ts","../../../src/renderIfBinding.ts","../../../src/ifBinding.ts","../../../src/switchBinding.ts","../../../src/createEventBinding.ts","../../../src/applyBinding.ts","../../../src/showBinding.ts","../../../src/textBinding.ts","../../../src/cssBinding.ts","../../../src/modelBinding.ts","../../../src/hoverBinding.ts","../../../src/pubSub.ts","../../../src/binder.ts","../../../src/postProcess.ts","../../../src/index.ts"],"sourcesContent":["export interface BindingAttrs {\n    comp: string;\n    tmp: string;\n    text: string;\n    click: string;\n    dblclick: string;\n    blur: string;\n    focus: string;\n    hover: string;\n    input: string;\n    change: string;\n    submit: string;\n    model: string;\n    show: string;\n    css: string;\n    attr: string;\n    forOf: string;\n    if: string;\n    switch: string;\n    case: string;\n    default: string;\n}\n\nexport const bindingAttrs: BindingAttrs = {\n    comp: 'data-bind-comp',\n    tmp: 'data-bind-tmp',\n    text: 'data-bind-text',\n    click: 'data-bind-click',\n    dblclick: 'data-bind-dblclick',\n    blur: 'data-bind-blur',\n    focus: 'data-bind-focus',\n    hover: 'data-bind-hover',\n    input: 'data-bind-input',\n    change: 'data-bind-change',\n    submit: 'data-bind-submit',\n    model: 'data-bind-model',\n    show: 'data-bind-show',\n    css: 'data-bind-css',\n    attr: 'data-bind-attr',\n    forOf: 'data-bind-for',\n    if: 'data-bind-if',\n    switch: 'data-bind-switch',\n    case: 'data-bind-case',\n    default: 'data-bind-default',\n};\n\nexport const serverRenderedAttr = 'data-server-rendered';\nexport const dataIndexAttr = 'data-index';\n\nexport interface CommentPrefix {\n    forOf: string;\n    if: string;\n    case: string;\n    default: string;\n}\n\nexport const commentPrefix: CommentPrefix = {\n    forOf: 'data-forOf_',\n    if: 'data-if_',\n    case: 'data-case_',\n    default: 'data-default_',\n};\n\nexport const commentSuffix = '_end';\n\nexport interface BindingDataReference {\n    rootDataKey: string;\n    currentData: string;\n    currentIndex: string;\n    mouseEnterHandlerName: string;\n    mouseLeaveHandlerName: string;\n}\n\nexport const bindingDataReference: BindingDataReference = {\n    rootDataKey: '$root',\n    currentData: '$data',\n    currentIndex: '$index',\n    mouseEnterHandlerName: 'in',\n    mouseLeaveHandlerName: 'out',\n};\n\nexport interface BindingUpdateConditions {\n    serverRendered: string;\n    init: string;\n}\n\nexport const bindingUpdateConditions: BindingUpdateConditions = {\n    serverRendered: 'SERVER-RENDERED',\n    init: 'INIT',\n};\n\n// maximum string length before running regex\nexport const maxDatakeyLength = 250;\n\nexport interface Constants {\n    filters: {\n        ONCE: string;\n    };\n    PARENT_REF: string;\n}\n\nexport const constants: Constants = {\n    filters: {\n        ONCE: 'once',\n    },\n    PARENT_REF: '_parent',\n};\n","import * as config from './config';\nimport type { ViewModel, BindingCache, ElementCache, DeferredObj, WrapMap } from './types';\n\nconst hasIsArray = Array.isArray;\n\nexport const REGEX = {\n    BAD_TAGS: /<(script|del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/ig,\n    FOR_OF: /(.*?)\\s+(?:in|of)\\s+(.*)/,\n    FUNCTION_PARAM: /\\((.*?)\\)/,\n    HTML_TAG: /^[\\s]*<([a-z][^\\/\\s>]+)/i,\n    OBJECT_LITERAL: /^\\{.+\\}$/,\n    PIPE: /\\|/,\n    WHITE_SPACES: /\\s+/g,\n    LINE_BREAKS_TABS: /(\\r\\n|\\n|\\r|\\t)/gm,\n};\n\nconst IS_SUPPORT_TEMPLATE = 'content' in document.createElement('template');\n\nconst WRAP_MAP: WrapMap = {\n    div: ['div', '<div>', '</div>'],\n    thead: ['table', '<table>', '</table>'],\n    col: ['colgroup', '<table><colgroup>', '</colgroup></table>'],\n    tr: ['tbody', '<table><tbody>', '</tbody></table>'],\n    td: ['tr', '<table><tr>', '</tr></table>'],\n};\nWRAP_MAP.caption = WRAP_MAP.colgroup = WRAP_MAP.tbody = WRAP_MAP.tfoot = WRAP_MAP.thead;\nWRAP_MAP.th = WRAP_MAP.td;\n\nexport const isArray = (obj: any): obj is any[] => {\n    return hasIsArray ? Array.isArray(obj) : Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nexport const isJsObject = (obj: any): obj is object => {\n    return obj !== null && typeof obj === 'object' && Object.prototype.toString.call(obj) === '[object Object]';\n};\n\nexport const isPlainObject = (obj: any): boolean => {\n    if (!isJsObject(obj)) {\n        return false;\n    }\n\n    // If has modified constructor\n    const ctor = (obj as any).constructor;\n    if (typeof ctor !== 'function') return false;\n\n    // If has modified prototype\n    const prot = ctor.prototype;\n    if (isJsObject(prot) === false) return false;\n\n    // If constructor does not have an Object-specific method\n    if (prot.hasOwnProperty('isPrototypeOf') === false) {\n        return false;\n    }\n\n    // Most likely a plain Object\n    return true;\n};\n\n// test if string contains '{...}'. string must not contains tab, line breaks\nexport const isObjectLiteralString = (str: string = ''): boolean => {\n    return REGEX.OBJECT_LITERAL.test(str);\n};\n\nexport const isEmptyObject = (obj: any): boolean => {\n    if (isJsObject(obj)) {\n        return Object.getOwnPropertyNames(obj).length === 0;\n    }\n    return false;\n};\n\nfunction getFirstHtmlStringTag(htmlString: string): string | null {\n    const match = htmlString.match(REGEX.HTML_TAG);\n    if (match) {\n        return match[1];\n    }\n    return null;\n}\n\nfunction removeBadTags(htmlString: string = ''): string {\n    return htmlString.replace(REGEX.BAD_TAGS, '');\n}\n\nexport function createHtmlFragment(htmlString: any): DocumentFragment | null {\n    if (typeof htmlString !== 'string') {\n        return null;\n    }\n    // use template element\n    if (IS_SUPPORT_TEMPLATE) {\n        const template = document.createElement('template');\n        template.innerHTML = removeBadTags(htmlString);\n        return template.content;\n    }\n    // use document fragment with wrap html tag for tr, td etc.\n    const fragment = document.createDocumentFragment();\n    const queryContainer = document.createElement('div');\n    const firstTag = getFirstHtmlStringTag(htmlString);\n    const wrap = WRAP_MAP[firstTag || 'div'];\n\n    if (wrap[0] === 'div') {\n        return document.createRange().createContextualFragment(htmlString);\n    }\n\n    queryContainer.insertAdjacentHTML('beforeend', `${wrap[1]}${htmlString}${wrap[2]}`);\n\n    const query = queryContainer.querySelector(wrap[0]);\n\n    while (query && query.firstChild) {\n        fragment.appendChild(query.firstChild);\n    }\n\n    return fragment;\n}\n\nexport const generateElementCache = (bindingAttrs: any): ElementCache => {\n    const elementCache: ElementCache = {};\n\n    for (const i in bindingAttrs) {\n        if (bindingAttrs.hasOwnProperty(i)) {\n            if (isArray(bindingAttrs)) {\n                elementCache[bindingAttrs[i]] = [];\n            } else {\n                elementCache[i] = [];\n            }\n        }\n    }\n\n    return elementCache;\n};\n\n\n// simplified version of Lodash _.get\nconst _get = function get(obj: any, path: string, def?: any): any {\n    function everyFunc(step: string): boolean {\n        return !(step && (obj = obj[step]) === undefined);\n    }\n    const fullPath = path\n        .replace(/\\[/g, '.')\n        .replace(/]/g, '')\n        .split('.')\n        .filter(Boolean);\n\n    return fullPath.every(everyFunc) ? obj : def;\n};\n\n/**\n * getViewModelValue\n * @description walk a object by provided string path. eg 'a.b.c'\n * @param {object} viewModel\n * @param {string} prop\n * @return {object}\n */\nexport const getViewModelValue = (viewModel: ViewModel, prop: string): any => {\n    return _get(viewModel, prop);\n};\n\n// simplified version of Lodash _.set\n// https://stackoverflow.com/questions/54733539/javascript-implementation-of-lodash-set-method\nconst _set = (obj: any, path: string | string[], value: any): any => {\n    if (Object(obj) !== obj) return obj; // When obj is not an object\n    // If not yet an array, get the keys from the string-path\n    if (!Array.isArray(path)) path = path.toString().match(/[^.[\\]]+/g) || [];\n\n    // Iterate all of them except the last one\n    path.slice(0, -1).reduce((a, c, i) =>\n        Object(a[c]) === a[c] ? // Does the key exist and is its value an object?\n        // Yes: then follow that path\n            a[c] :\n        // No: create the key. Is the next key a potential array-index?\n            a[c] = Math.abs(Number(path[i+1]))>>0 === +path[i+1] ?\n                [] : // Yes: assign a new array object\n                {}, // No: assign a new plain object\n    obj)[path[path.length-1]] = value; // Finally assign the value to the last key\n\n    // Return the top-level object to allow chaining\n    return obj;\n};\n\n/**\n * setViewModelValue\n * @description populate viewModel object by path string\n * @param {object} obj\n * @param {string} prop\n * @param {string} value\n * @return {call} underscore set\n */\nexport const setViewModelValue = (obj: any, prop: string, value: any): any => {\n    return _set(obj, prop, value);\n};\n\nexport const getViewModelPropValue = (viewModel: ViewModel, bindingCache: BindingCache): any => {\n    let dataKey = bindingCache.dataKey;\n    let paramList = bindingCache.parameters;\n    const isInvertBoolean = dataKey && dataKey.charAt(0) === '!';\n\n    if (isInvertBoolean && dataKey) {\n        dataKey = isInvertBoolean ? dataKey.substring(1) : dataKey;\n    }\n\n    let ret = dataKey ? getViewModelValue(viewModel, dataKey) : undefined;\n\n    if (typeof ret === 'function') {\n        const viewModelContext = resolveViewModelContext(viewModel, dataKey || '');\n        const oldViewModelProValue = bindingCache.elementData ? bindingCache.elementData.viewModelPropValue : null;\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n        // let args = [oldViewModelProValue, bindingCache.el].concat(paramList);\n        const args = paramList.concat([oldViewModelProValue, bindingCache.el]);\n        ret = ret.apply(viewModelContext, args);\n    }\n\n    ret = isInvertBoolean ? !ret : ret;\n\n    // call through fitlers to get final value\n    ret = filtersViewModelPropValue({\n        value: ret,\n        viewModel: viewModel,\n        bindingCache: bindingCache,\n    });\n\n    return ret;\n};\n\nconst filtersViewModelPropValue = ({value, viewModel, bindingCache}: {value: any, viewModel: ViewModel, bindingCache: BindingCache}): any => {\n    let ret = value;\n    if (bindingCache.filters) {\n        each(bindingCache.filters, (index: any, filter: string) => {\n            const viewModelContext = resolveViewModelContext(viewModel, filter);\n            const filterFn = getViewModelValue.call(viewModelContext, viewModelContext, filter);\n            try {\n                ret = filterFn.call(viewModelContext, ret);\n            } catch (err) {\n                throwErrorMessage(err, `Invalid filter: ${filter}`);\n            }\n        });\n    }\n    return ret;\n};\n\nexport const parseStringToJson = (str: string): any => {\n    // fix unquote or single quote keys and replace single quote to double quote\n    const ret = str.replace(/(\\s*?{\\s*?|\\s*?,\\s*?)(['\"])?([a-zA-Z0-9]+)(['\"])?:/g, '$1\"$3\":').replace(/'/g, '\"');\n    return JSON.parse(ret);\n};\n\n/**\n * arrayRemoveMatch\n * @description remove match items in fromArray out of toArray\n * @param {array} toArray\n * @param {array} frommArray\n * @return {boolean}\n */\nexport const arrayRemoveMatch = (toArray: any[], frommArray: any[]): any[] => {\n    return toArray.filter((value, _index) => {\n        return frommArray.indexOf(value) < 0;\n    });\n};\n\nexport const getFormData = ($form: HTMLFormElement): Record<string, any> => {\n    const data: Record<string, any> = {};\n\n    if (!($form instanceof HTMLFormElement)) {\n        return data;\n    }\n\n    const formData = new FormData($form);\n\n    formData.forEach((value, key) => {\n        if (!Object.prototype.hasOwnProperty.call( Object, key ) ) {\n            data[key] = value;\n            return;\n        }\n        if (!Array.isArray(data[key])) {\n            data[key] = [data[key]];\n        }\n        data[key].push(value);\n    });\n\n    return data;\n};\n\n/**\n * getFunctionParameterList\n * @description convert parameter string to arrary\n * eg. '(\"a\",\"b\",\"c\")' > [\"a\",\"b\",\"c\"]\n * @param {string} str\n * @return {array} paramlist\n */\nexport const getFunctionParameterList = (str: string): string[] | undefined => {\n    if (!str || str.length > config.maxDatakeyLength) {\n        return;\n    }\n    const paramlist = str.match(REGEX.FUNCTION_PARAM);\n\n    if (paramlist && paramlist[1]) {\n        const params = paramlist[1].split(',');\n        params.forEach(function(v, i) {\n            params[i] = v.trim();\n        });\n        return params;\n    }\n    return undefined;\n};\n\nexport const extractFilterList = (cacheData: any): any => {\n    if (!cacheData || !cacheData.dataKey || cacheData.dataKey.length > config.maxDatakeyLength) {\n        return cacheData;\n    }\n    const filterList = cacheData.dataKey.split(REGEX.PIPE);\n    let isOnceIndex: number | undefined;\n    cacheData.dataKey = filterList[0].trim();\n    if (filterList.length > 1) {\n        filterList.shift();\n        filterList.forEach(function(v, i) {\n            filterList[i] = v.trim();\n            if (filterList[i] === config.constants.filters.ONCE) {\n                cacheData.isOnce = true;\n                isOnceIndex = i;\n            }\n        });\n        // don't store filter 'once' - because it is internal logic not a property from viewModel\n        if (isOnceIndex !== undefined && isOnceIndex >= 0) {\n            filterList.splice(isOnceIndex, 1);\n        }\n        cacheData.filters = filterList;\n    }\n    return cacheData;\n};\n\nexport const invertObj = (sourceObj: Record<string, any>): Record<string, any> => {\n    return Object.keys(sourceObj).reduce(function(obj: Record<string, any>, key: string) {\n        obj[sourceObj[key]] = key;\n        return obj;\n    }, {});\n};\n\nexport const createDeferredObj = (): DeferredObj => {\n    const dfObj = {} as DeferredObj;\n\n    dfObj.promise = new Promise((resolve, reject) => {\n        dfObj.resolve = resolve;\n        dfObj.reject = reject;\n    });\n\n    return dfObj;\n};\n\n/**\n * debounce\n * @description decorate a function to be debounce using requestAnimationFrame\n * @param {function} fn\n * @param {context} ctx\n * @return {function}\n */\nexport const debounceRaf = (fn: Function, ctx: any = null): Function => {\n    return (function(fn: Function, ctx: any) {\n        let dfObj = createDeferredObj();\n        let rafId = 0;\n\n        // return decorated fn\n        return function() {\n\n            const args = Array.from ? Array.from(arguments) : Array.prototype.slice.call(arguments);\n\n            window.cancelAnimationFrame(rafId);\n            rafId = window.requestAnimationFrame(() => {\n                try {\n                    // fn is Binder.render function\n                    fn.apply(ctx, args);\n                    // dfObj.resolve is function provided in .then promise chain\n                    // ctx is the current component\n                    dfObj.resolve(ctx);\n                } catch (err) {\n                    console.error('error in rendering: ', err);\n                    dfObj.reject(err);\n                }\n\n                // reset dfObj - otherwise then callbacks will not be in execution order\n                // example:\n                // myApp.render().then(function(){console.log('ok1')});\n                // myApp.render().then(function(){console.log('ok2')});\n                // myApp.render().then(function(){console.log('ok3')});\n                // >> ok1, ok2, ok3\n                dfObj = createDeferredObj();\n\n                window.cancelAnimationFrame(rafId);\n            });\n\n            return dfObj.promise;\n        };\n    })(fn, ctx);\n};\n\n/**\n * getNodeAttrObj\n * @description convert Node attributes object to a json object\n * @param {object} node\n * @param {array} skipList\n * @return {object}\n */\nexport const getNodeAttrObj = (node: HTMLElement, skipList?: string | string[]): Record<string, string> | undefined => {\n    let attributesLength = 0;\n    let skipArray: string[] | undefined;\n\n    if (!node || node.nodeType !== 1 || !node.hasAttributes()) {\n        return;\n    }\n    if (skipList) {\n        skipArray = [];\n        skipArray = typeof skipList === 'string' ? [skipList] : skipList;\n    }\n    const attrObj: Record<string, string> = {};\n    attributesLength = node.attributes.length;\n\n    if (attributesLength) {\n        for (let i = 0; i < attributesLength; i += 1) {\n            const attribute = node.attributes.item(i);\n            if (attribute) {\n                attrObj[attribute.nodeName] = attribute.nodeValue || '';\n            }\n        }\n    }\n\n    if (isArray(skipArray)) {\n        skipArray.forEach((item) => {\n            if (attrObj[item]) {\n                delete attrObj[item];\n            }\n        });\n    }\n    return attrObj;\n};\n\n/**\n * extend\n * @param {boolean} isDeepMerge\n * @param {object} target\n * @param {object} sources\n * @return {object} merged object\n */\nexport const extend = (isDeepMerge: boolean = false, target?: any, ...sources: any[]): any => {\n    if (!sources.length) {\n        return target;\n    }\n    const source = sources.shift();\n    if (source === undefined) {\n        return target;\n    }\n\n    if (!isDeepMerge) {\n        return Object.assign(target, source, ...sources);\n    }\n\n    if (isMergebleObject(target) && isMergebleObject(source)) {\n        Object.keys(source).forEach((key) => {\n            if (isMergebleObject(source[key])) {\n                if (!target[key]) {\n                    target[key] = {};\n                }\n                extend(true, target[key], source[key]);\n            } else {\n                target[key] = source[key];\n            }\n        });\n    }\n\n    return extend(true, target, ...sources);\n};\n\nexport const each = (obj: any, fn: Function): void => {\n    if (typeof obj !== 'object' || typeof fn !== 'function') {\n        return;\n    }\n    let keys: string[] = [];\n    let keysLength = 0;\n    const isArrayObj = isArray(obj);\n    let key: string | number;\n    let value: any;\n    let i = 0;\n\n    if (isArrayObj) {\n        keysLength = obj.length;\n    } else if (isJsObject(obj)) {\n        keys = Object.keys(obj);\n        keysLength = keys.length;\n    } else {\n        throw new TypeError('Object is not an array or object');\n    }\n\n    for (i = 0; i < keysLength; i += 1) {\n        if (isArrayObj) {\n            key = i;\n            value = obj[i];\n        } else {\n            key = keys[i];\n            value = obj[key];\n        }\n        fn(key, value);\n    }\n};\n\nconst isMergebleObject = (item: any): boolean => {\n    return isJsObject(item) && !isArray(item);\n};\n\n/**\n * cloneDomNode\n * @param {object} element\n * @return {object} cloned element\n * @description helper function to clone node\n */\nexport const cloneDomNode = (element: HTMLElement): HTMLElement => {\n    return element.cloneNode(true) as HTMLElement;\n};\n\n/**\n * insertAfter\n * @param {object} parentNode\n * @param {object} newNode\n * @param {object} referenceNode\n * @return {object} node\n * @description helper function to insert new node before the reference node\n */\nexport const insertAfter = (parentNode: Node, newNode: Node, referenceNode: Node | null): Node => {\n    const refNextElement = referenceNode && referenceNode.nextSibling ? referenceNode.nextSibling : null;\n    return parentNode.insertBefore(newNode, refNextElement);\n};\n\nexport const resolveViewModelContext = (viewModel: ViewModel, datakey: string): ViewModel => {\n    let ret = viewModel;\n    if (typeof datakey !== 'string') {\n        return ret;\n    }\n    const bindingDataContext = datakey.split('.');\n    if (bindingDataContext.length > 1) {\n        if (bindingDataContext[0] === config.bindingDataReference.rootDataKey) {\n            ret = (viewModel[config.bindingDataReference.rootDataKey] as ViewModel) || viewModel;\n        } else if (bindingDataContext[0] === config.bindingDataReference.currentData) {\n            ret = (viewModel[config.bindingDataReference.currentData] as ViewModel) || viewModel;\n        }\n    }\n    return ret;\n};\n\nexport const resolveParamList = (viewModel: ViewModel, paramList: any[]): any[] | undefined => {\n    if (!viewModel || !isArray(paramList)) {\n        return;\n    }\n    return paramList.map((param) => {\n        param = param.trim();\n\n        if (param === config.bindingDataReference.currentIndex) {\n            // convert '$index' to value\n            param = viewModel[config.bindingDataReference.currentIndex];\n        } else if (param === config.bindingDataReference.currentData) {\n            // convert '$data' to value or current viewModel\n            param = viewModel[config.bindingDataReference.currentData] || viewModel;\n        } else if (param === config.bindingDataReference.rootDataKey) {\n            // convert '$root' to root viewModel\n            param = viewModel[config.bindingDataReference.rootDataKey] || viewModel;\n        }\n        return param;\n    });\n};\n\nexport const removeElement = (el: HTMLElement): void => {\n    if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n    }\n};\n\nexport const emptyElement = (node: HTMLElement): HTMLElement => {\n    if (node && node.firstChild) {\n        while (node.firstChild) {\n            node.removeChild(node.firstChild);\n        }\n    }\n    return node;\n};\n\nexport const throwErrorMessage = (err: any = null, errorMessage: string = ''): void => {\n    const message = err && err.message ? err.message : errorMessage;\n    if (typeof console.error === 'function') {\n        console.error(message);\n        return;\n    }\n    console.log(message);\n};\n\n/**\n * parseBindingObjectString\n * @description parse bining object string to object with value always stringify\n * @param {string} str - eg '{ id: $data.id, name: $data.name }'\n * @return {object} - eg { id: '$data.id', name: '$data.name'}\n */\nexport const parseBindingObjectString = (str: string = ''): Record<string, string> | null => {\n    let objectLiteralString = str.trim();\n    const ret: Record<string, string> = {};\n\n    if (!REGEX.OBJECT_LITERAL.test(str)) {\n        return null;\n    }\n\n    // clearn up line breaks and remove first { character\n    objectLiteralString = objectLiteralString\n        .replace(REGEX.LINE_BREAKS_TABS, '')\n        .substring(1);\n\n    // remove last } character\n    objectLiteralString = objectLiteralString.substring(0, objectLiteralString.length - 1);\n\n    objectLiteralString.split(',').forEach((item) => {\n        const keyVal = item.trim();\n        // ignore if last empty item - eg split last comma in object literal\n        if (keyVal) {\n            const prop = keyVal.split(':');\n            const key = prop[0].trim();\n            ret[key] = `${prop[1]}`.trim();\n        }\n    });\n\n    return ret;\n};\n","import {invertObj, extractFilterList, getFunctionParameterList, REGEX} from './util';\nimport {constants} from './config';\n\nlet bindingAttrsMap: any;\n\n/**\n * walkDOM\n * @description by Douglas Crockford - walk each DOM node and calls provided callback function\n * start walk from firstChild\n * @param {object} node\n * @param {function} func\n */\nconst walkDOM = (node: any, func: any): void => {\n    let parseChildNode = true;\n    node = node.firstElementChild;\n    while (node) {\n        parseChildNode = func(node);\n        if (parseChildNode) {\n            walkDOM(node, func);\n        }\n        node = node.nextElementSibling;\n    }\n};\n\nconst getAttributesObject = (node: any): any => {\n    const ret: any = {};\n    Array.prototype.slice.call(node.attributes).forEach((item: any) => {\n        ret[item.name] = item.value;\n    });\n    return ret;\n};\n\nconst checkSkipChildParseBindings = (attrObj: any = {}, bindingAttrs: any): any[] => {\n    return [bindingAttrs.forOf, bindingAttrs.if, bindingAttrs.case, bindingAttrs.default].filter((type: any) => {\n        return typeof attrObj[type] !== 'undefined';\n    });\n};\n\nconst rootSkipCheck = (node: any): boolean => {\n    return node.tagName === 'SVG';\n};\n\nconst defaultSkipCheck = (node: any, bindingAttrs: any): boolean => {\n    return node.tagName === 'SVG' || node.hasAttribute(bindingAttrs.comp);\n};\n\nconst populateBindingCache = ({node, attrObj, bindingCache, type}: any): any => {\n    let attrValue: any;\n    let cacheData: any;\n\n    if (bindingAttrsMap && bindingAttrsMap[type] && typeof attrObj[type] !== 'undefined') {\n        bindingCache[type] = bindingCache[type] || [];\n        attrValue = attrObj[type] || '';\n\n        if (attrValue) {\n            attrValue = attrValue.replace(REGEX.LINE_BREAKS_TABS, '').replace(REGEX.WHITE_SPACES, ' ').trim();\n        }\n\n        cacheData = {\n            el: node,\n            dataKey: attrValue,\n        };\n\n        // populate cacheData.filters. update filterList first item as dataKey\n        cacheData = extractFilterList(cacheData);\n\n        // populate cacheData.parameters\n        // for store function call parameters eg. '$index', '$root'\n        // useful with DOM for-loop template as reference to binding data\n        const paramList = getFunctionParameterList(cacheData.dataKey);\n        if (paramList) {\n            cacheData.parameters = paramList;\n            cacheData.dataKey = cacheData.dataKey.replace(REGEX.FUNCTION_PARAM, '').trim();\n        }\n        // store parent array reference to cacheData\n        cacheData[constants.PARENT_REF] = bindingCache[type];\n        bindingCache[type].push(cacheData);\n    }\n    return bindingCache;\n};\n\nconst createBindingCache = ({rootNode = null, bindingAttrs = {} as any, skipCheck, isRenderedTemplate = false}: any): any => {\n    let bindingCache: any = {};\n\n    if (!(rootNode instanceof window.Node)) {\n        throw new TypeError('walkDOM: Expected a DOM node');\n    }\n\n    bindingAttrsMap = bindingAttrsMap || invertObj(bindingAttrs);\n\n    const parseNode = (node: any, skipNodeCheckFn: any = defaultSkipCheck): boolean => {\n        let isSkipForOfChild = false;\n\n        if (node.nodeType !== 1 || !node.hasAttributes()) {\n            return true;\n        }\n        if (skipNodeCheckFn(node, bindingAttrs) || (typeof skipCheck === 'function' && skipCheck(node))) {\n            return false;\n        }\n\n        // when creating sub bindingCache if is for tmp binding\n        // skip same element that has forOf binding the  forOf is alredy parsed\n        const attrObj = getAttributesObject(node);\n        const hasSkipChildParseBindings = checkSkipChildParseBindings(attrObj, bindingAttrs);\n        let iterateList: any[] = [];\n\n        if (hasSkipChildParseBindings.length) {\n            isSkipForOfChild = true;\n            iterateList = hasSkipChildParseBindings;\n        } else if (isRenderedTemplate && attrObj[bindingAttrs.tmp]) {\n            // skip current node parse if was called by node has template binding and already rendered\n            return true;\n        } else {\n            iterateList = Object.keys(attrObj);\n        }\n\n        iterateList.forEach((key: any) => {\n            // skip for switch case and default bining\n            if (key !== bindingAttrs.case && key !== bindingAttrs.default) {\n                bindingCache = populateBindingCache({\n                    node: node,\n                    attrObj: attrObj,\n                    bindingCache: bindingCache,\n                    type: key,\n                });\n            }\n        });\n\n        // after cache forOf skip parse child nodes\n        if (isSkipForOfChild) {\n            return false;\n        }\n\n        return true;\n    };\n\n    if (parseNode(rootNode, rootSkipCheck)) {\n        walkDOM(rootNode, parseNode);\n    }\n    return bindingCache;\n};\n\nexport default createBindingCache;\n","import {\n    bindingUpdateConditions,\n} from './config';\nimport {extend} from './util';\n\nexport interface BindingOption {\n    templateBinding?: boolean;\n    textBinding?: boolean;\n    cssBinding?: boolean;\n    ifBinding?: boolean;\n    showBinding?: boolean;\n    modelBinding?: boolean;\n    attrBinding?: boolean;\n    forOfBinding?: boolean;\n    switchBinding?: boolean;\n    changeBinding?: boolean;\n    clickBinding?: boolean;\n    dblclickBinding?: boolean;\n    blurBinding?: boolean;\n    focusBinding?: boolean;\n    hoverBinding?: boolean;\n    inputBinding?: boolean;\n    submitBinding?: boolean;\n    forceRender?: boolean;\n    [key: string]: any;\n}\n\n/**\n * createBindingOption\n * @param {string} condition\n * @param {object} opt\n * @description\n * generate binding update option object by condition\n * @return {object} updateOption\n */\nfunction createBindingOption(condition: string = '', opt: BindingOption = {}): BindingOption {\n    const visualBindingOptions: BindingOption = {\n        templateBinding: false,\n        textBinding: true,\n        cssBinding: true,\n        ifBinding: true,\n        showBinding: true,\n        modelBinding: true,\n        attrBinding: true,\n        forOfBinding: true,\n        switchBinding: true,\n    };\n    const eventsBindingOptions: BindingOption = {\n        changeBinding: true,\n        clickBinding: true,\n        dblclickBinding: true,\n        blurBinding: true,\n        focusBinding: true,\n        hoverBinding: true,\n        inputBinding: true,\n        submitBinding: true,\n    };\n    // this is visualBindingOptions but everything false\n    // concrete declear for performance purpose\n    const serverRenderedOptions: BindingOption = {\n        templateBinding: false,\n        textBinding: false,\n        cssBinding: false,\n        ifBinding: false,\n        showBinding: false,\n        modelBinding: false,\n        attrBinding: false,\n        forOfBinding: false,\n        switchBinding: false,\n    };\n    let updateOption: BindingOption = {};\n\n    switch (condition) {\n    case bindingUpdateConditions.serverRendered:\n        updateOption = extend(false, {}, eventsBindingOptions, serverRenderedOptions, opt);\n        break;\n    case bindingUpdateConditions.init:\n        // flag templateBinding to true to render tempalte(s)\n        opt.templateBinding = true;\n        opt.forceRender = true;\n        updateOption = extend(false, {}, visualBindingOptions, eventsBindingOptions, opt);\n        break;\n    default:\n        // when called again only update visualBinding options\n        updateOption = extend(false, {}, visualBindingOptions, opt);\n    }\n\n    return updateOption;\n}\n\nexport default createBindingOption;\n","/**\n * _escape\n * @description\n * https://github.com/lodash/lodash/blob/master/escape.js\n */\n\nfunction baseToString(value: any): string {\n    if (typeof value == 'string') {\n        return value;\n    }\n    return value == null ? '' : `${value}`;\n}\n\n/** Used to match HTML entities and HTML characters. */\nconst reUnescapedHtml = /[&<>\"'`]/g;\nconst reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/** Used to map characters to HTML entities. */\nconst htmlEscapes: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#39;',\n    '`': '&#96;',\n};\n\n/**\n  * escapeHtmlChar\n  * @description convert characters to HTML entities.\n  * @private\n  * @param {string} chr The matched character to escape.\n  * @return {string} Returns the escaped character.\n  */\nfunction escapeHtmlChar(chr: string): string {\n    return htmlEscapes[chr];\n}\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to\n * their corresponding HTML entities.\n * @param {string} string\n * @return {string} string\n */\nexport default function escape(string: any): string {\n    // Reset `lastIndex` because in IE < 9 `String#replace` does not.\n    string = baseToString(string);\n    return (string && reHasUnescapedHtml.test(string)) ?\n        string.replace(reUnescapedHtml, escapeHtmlChar) :\n        string;\n}\n","\nimport {\n    getViewModelValue,\n    setViewModelValue,\n    resolveViewModelContext,\n    resolveParamList,\n} from './util';\nimport _escape from './_escape';\n\n/**\n * changeBinding\n * @description input element on change event binding. DOM -> viewModel update\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst changeBinding = ({\n    cache,\n    viewModel,\n    bindingAttrs,\n    forceRender,\n    type = 'change',\n}: any): void => {\n    const handlerName = cache.dataKey;\n    let paramList = cache.parameters;\n    const modelDataKey = cache.el.getAttribute(bindingAttrs.model);\n    let newValue: any = '';\n    let oldValue: any = '';\n    let viewModelContext: any;\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    if (!handlerName || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    const handlerFn = getViewModelValue(viewModel, handlerName);\n\n    if (typeof handlerFn === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        function changeHandler(e: any) {\n            const $this = this as any;\n            const isCheckbox = $this.type === 'checkbox';\n            newValue = isCheckbox ? $this.checked : _escape($this.value);\n            // set data to viewModel\n            if (modelDataKey) {\n                oldValue = getViewModelValue(viewModel, modelDataKey);\n                setViewModelValue(viewModel, modelDataKey, newValue);\n            }\n            const args = [e, e.currentTarget, newValue, oldValue].concat(paramList);\n            handlerFn.apply(viewModelContext, args);\n            oldValue = newValue;\n        }\n\n        // assing on change event\n        cache.el.removeEventListener(type, changeHandler, false);\n        cache.el.addEventListener(type, changeHandler, false);\n    }\n};\n\nexport default changeBinding;\n","import {\n    extend,\n    getViewModelPropValue,\n    isPlainObject,\n    isEmptyObject,\n    isObjectLiteralString,\n    parseBindingObjectString,\n    each,\n} from './util';\n\n/**\n * attrBinding\n * @description\n * DOM decleartive attr binding. update elenment attributes\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst attrBinding = (cache: any = {}, viewModel: any, _bindingAttrs?: any, _forceRender?: any): void => {\n    if (!cache.dataKey) {\n        return;\n    }\n    // check if Object Literal String style dataKey\n    const isObjLiteralStr = isObjectLiteralString(cache.dataKey);\n\n    // resolve vmAttrObj, when Object Literal String style if will be object without resolve each value\n    // otherwise, resolve value from viewModel\n    const vmAttrObj = isObjLiteralStr ? parseBindingObjectString(cache.dataKey) : getViewModelPropValue(viewModel, cache);\n\n    // vmAttrObj must be a plain object\n    if (!isPlainObject(vmAttrObj)) {\n        return;\n    }\n\n    // populate cache.elementData if not exits\n    // check and set default cache.elementData.viewModelPropValue\n    cache.elementData = cache.elementData || {};\n    cache.elementData.viewModelPropValue = cache.elementData.viewModelPropValue || {};\n\n    // start diff comparison\n    // reject if nothing changed by comparing\n    // cache.elementData.viewModelPropValue (previous render) vs vmAttrObj(current render)\n    if (JSON.stringify(cache.elementData.viewModelPropValue) === JSON.stringify(vmAttrObj)) {\n        return;\n    }\n\n    if (isObjLiteralStr) {\n        // resolve each value in vmAttrObj\n        each(vmAttrObj, (key: any, value: any) => {\n            // resolve value from viewModel including $data and $root\n            // from viewModel.$data or viewModel.$root\n            vmAttrObj[key] = getViewModelPropValue(viewModel, {dataKey: value} as any);\n        });\n    }\n\n    // shortcut for reading cache.elementData.viewModelPropValue\n    const oldAttrObj = cache.elementData.viewModelPropValue;\n\n    // start set element attribute - oldAttrObj is empty meaning no previous render\n    if (isEmptyObject(oldAttrObj)) {\n        each(vmAttrObj, (key: any, value: any) => {\n            if (typeof value !== 'undefined') {\n                cache.el.setAttribute(key, value);\n                // populate cache.elementData.viewModelPropValue for future comparison\n                if (!isObjLiteralStr) {\n                    cache.elementData.viewModelPropValue[key] = value;\n                }\n            }\n        });\n    } else {\n        // loop oldAttrObj, remove attribute not present in current vmAttrObj\n        each(oldAttrObj, (key: any, _value: any) => {\n            if (typeof vmAttrObj[key] === 'undefined') {\n                cache.el.removeAttribute(key);\n            }\n        });\n\n        // loop vmAttrObj, set attribute not present in oldAttrObj\n        each(vmAttrObj, (key: any, value: any) => {\n            if (typeof value !== 'undefined') {\n                if (oldAttrObj[key] !== vmAttrObj[key]) {\n                    cache.el.setAttribute(key, vmAttrObj[key]);\n                    // populate cache.elementData.viewModelPropValue for future comparison\n                    if (!isObjLiteralStr) {\n                        cache.elementData.viewModelPropValue[key] = value;\n                    }\n                }\n            }\n        });\n    }\n\n    // for object literal style binding\n    // set viewModelPropValue for future diff comaprison\n    // note: vmAttrObj is a not fully resolve object, each value is still string unresloved\n    if (isObjLiteralStr) {\n        cache.elementData.viewModelPropValue = extend(false, {}, vmAttrObj);\n    }\n};\n\nexport default attrBinding;\n","import {dataIndexAttr} from './config';\nimport {\n    createHtmlFragment,\n    emptyElement,\n    getViewModelPropValue,\n    parseStringToJson,\n} from './util';\n\nlet $domFragment: any = null;\nlet $templateRoot: any = null;\nlet $templateRootPrepend = false;\nlet $templateRootAppend = false;\nlet nestTemplatesCount = 0;\n\n/**\n * getTemplateString\n * @description get Template tag innerHTML string\n * @param {string} id\n * @return {string} rendered html string\n */\nconst getTemplateString = (id: string): string => {\n    const templateElement = document.getElementById(id);\n\n    return templateElement ? templateElement.innerHTML : '';\n};\n\n/**\n * renderTemplate\n * @description\n * get template setting from DOM attribute then call compileTemplate\n * to render and append to target DOM\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {object} elementCache\n */\nconst renderTemplate = (cache: any, viewModel: any, bindingAttrs: any, elementCache: any): void => {\n    const settings = typeof cache.dataKey === 'string' ? parseStringToJson(cache.dataKey) : cache.dataKey;\n    let viewData: any = settings.data;\n    const isAppend = settings.append;\n    const isPrepend = settings.prepend;\n    let $currentElement: any;\n\n    cache.dataKey = settings;\n\n    viewData = (typeof viewData === 'undefined' || viewData === '$root') ?\n        viewModel :\n        getViewModelPropValue(viewModel, {\n            dataKey: settings.data,\n            parameters: cache.parameters,\n        } as any);\n\n    if (!viewData) {\n        return;\n    }\n\n    const $element = cache.el;\n    const $index = typeof viewModel.$index !== 'undefined' ? viewModel.$index : $element.getAttribute(dataIndexAttr);\n\n    if (typeof $index !== 'undefined') {\n        viewData.$index = $index;\n    }\n\n    $domFragment = $domFragment || document.createDocumentFragment();\n\n    if (!$templateRoot) {\n        $templateRoot = $element;\n        // Store the prepend/append flags from the root template only\n        $templateRootPrepend = isPrepend;\n        $templateRootAppend = isAppend;\n    }\n\n    const htmlString = getTemplateString(settings.id);\n\n    const htmlFragment = createHtmlFragment(htmlString);\n\n    // append rendered html\n    if (!$domFragment.childNodes.length) {\n        // domFragment should be empty in first run\n        $currentElement = $domFragment; // copy of $domFragment for later find nested template check\n        $domFragment.appendChild(htmlFragment);\n    } else {\n        // during recursive run keep append to current fragment\n        $currentElement = $element; // reset to current nested template element\n        if (!isAppend && !isPrepend) {\n            $currentElement = emptyElement($currentElement);\n        }\n        if (isPrepend) {\n            $currentElement.insertBefore(htmlFragment, $currentElement.firstChild);\n        } else {\n            $currentElement.appendChild(htmlFragment);\n        }\n    }\n\n    // check if there are nested template then recurisive render them\n    const $nestedTemplates = $currentElement.querySelectorAll('[' + bindingAttrs.tmp + ']');\n\n    const nestedTemplatesLength = $nestedTemplates.length;\n\n    if (nestedTemplatesLength) {\n        nestTemplatesCount += nestedTemplatesLength;\n\n        for (let i=0; i < nestedTemplatesLength; i+=1) {\n            const thisTemplateCache = {\n                el: $nestedTemplates[i],\n                dataKey: $nestedTemplates[i].getAttribute(bindingAttrs.tmp),\n            };\n            elementCache[bindingAttrs.tmp].push(thisTemplateCache);\n            // recursive template render\n            renderTemplate(thisTemplateCache, viewModel, bindingAttrs, elementCache);\n            nestTemplatesCount -= 1;\n        }\n    }\n\n    // no more nested tempalted to render, start to append $domFragment into $templateRoot\n    if (nestTemplatesCount === 0) {\n        // append to DOM once\n        // Use the prepend/append flags from the root template, not the current nested template\n        if (!$templateRootAppend && !$templateRootPrepend) {\n            $templateRoot = emptyElement($templateRoot);\n        }\n        if ($templateRootPrepend) {\n            $templateRoot.insertBefore($domFragment, $templateRoot.firstChild);\n        } else {\n            $templateRoot.appendChild($domFragment);\n        }\n        // clear cached fragment and flags\n        $domFragment = $templateRoot = null;\n        $templateRootPrepend = $templateRootAppend = false;\n        // trigger callback if provided\n        if (typeof viewModel.afterTemplateRender === 'function') {\n            viewModel.afterTemplateRender(viewData);\n        }\n    }\n};\n\nexport default renderTemplate;\n","import {bindingUpdateConditions} from './config';\nimport * as applyBindingModule from './applyBinding';\nimport createBindingOption from './createBindingOption';\nimport renderTemplate from './renderTemplate';\n\nconst renderTemplatesBinding = ({ctx, elementCache, updateOption, bindingAttrs, viewModel}: any): boolean => {\n    if (!elementCache || !bindingAttrs) {\n        return false;\n    }\n    // render and apply binding to template(s) and forOf DOM\n    if (elementCache[bindingAttrs.tmp] && elementCache[bindingAttrs.tmp].length) {\n        // when re-render call with {templateBinding: true}\n        // template and nested templates\n        if (updateOption.templateBinding) {\n            // overwrite updateOption with 'init' bindingUpdateConditions\n            updateOption = createBindingOption(bindingUpdateConditions.init);\n\n            // forEach is correct here - nested templates are added to array but rendered recursively\n            // We don't want the loop to re-render templates that were already rendered via recursion\n            elementCache[bindingAttrs.tmp].forEach(($element: any) => {\n                renderTemplate($element, viewModel, bindingAttrs, elementCache);\n            });\n            // update cache after all template(s) rendered\n            ctx.updateElementCache({\n                templateCache: true,\n                elementCache: elementCache,\n                isRenderedTemplates: true,\n            });\n        }\n        // enforce render even element is not in DOM tree\n        updateOption.forceRender = true;\n\n        // apply bindings to rendered templates element\n        // Use namespace import to access the function at runtime,\n        // which breaks the circular dependency during module initialization\n        // Use for loop to handle templates added during rendering\n        for (let i = 0; i < elementCache[bindingAttrs.tmp].length; i++) {\n            applyBindingModule.default({\n                ctx: ctx,\n                elementCache: elementCache[bindingAttrs.tmp][i].bindingCache,\n                updateOption: updateOption,\n                bindingAttrs: bindingAttrs,\n                viewModel: viewModel,\n            });\n        }\n    }\n    return true;\n};\n\nexport default renderTemplatesBinding;\n","import {bindingUpdateConditions} from './config';\nimport createBindingOption from './createBindingOption';\nimport renderTemplatesBinding from './renderTemplatesBinding';\nimport * as applyBindingModule from './applyBinding';\n\n/**\n * renderIteration\n * @param {object} opt\n * @description\n * render element's binding by supplied elementCache\n * This function is desidned for FoOf, If, switch bindings\n */\nconst renderIteration = ({elementCache, iterationVm, bindingAttrs, isRegenerate}: any): void => {\n    const bindingUpdateOption = isRegenerate ? createBindingOption(bindingUpdateConditions.init) : createBindingOption();\n\n    // enforce render even element is not in DOM tree\n    bindingUpdateOption.forceRender = true;\n\n    // render and apply binding to template(s)\n    // this is an share function therefore passing current APP 'this' context\n    // viewModel is a dynamic generated iterationVm\n    renderTemplatesBinding({\n        ctx: iterationVm.$root ? iterationVm.$root.APP : iterationVm.APP,\n        elementCache: elementCache,\n        updateOption: bindingUpdateOption,\n        bindingAttrs: bindingAttrs,\n        viewModel: iterationVm,\n    });\n\n    // Use namespace import to access the function at runtime,\n    // which breaks the circular dependency during module initialization\n    applyBindingModule.default({\n        ctx: iterationVm.$root ? iterationVm.$root.APP : iterationVm.APP,\n        elementCache: elementCache,\n        updateOption: bindingUpdateOption,\n        bindingAttrs: bindingAttrs,\n        viewModel: iterationVm,\n    });\n};\n\nexport default renderIteration;\n","\nimport * as config from './config';\nimport * as util from './util';\n\nconst createClonedElementCache = (bindingData: any): any => {\n    const clonedElement = bindingData.el.cloneNode(true);\n    bindingData.fragment = document.createDocumentFragment();\n    bindingData.fragment.appendChild(clonedElement);\n    return bindingData;\n};\n\nconst setCommentPrefix = (bindingData: any): any => {\n    if (!bindingData || !bindingData.type) {\n        return bindingData;\n    }\n    let commentPrefix = '';\n    const dataKeyMarker = bindingData.dataKey ? bindingData.dataKey.replace(util.REGEX.WHITE_SPACES, '_') : '';\n\n    switch (bindingData.type) {\n    case config.bindingAttrs.forOf:\n        commentPrefix = config.commentPrefix.forOf;\n        break;\n    case config.bindingAttrs.if:\n        commentPrefix = config.commentPrefix.if;\n        break;\n    case config.bindingAttrs.case:\n        commentPrefix = config.commentPrefix.case;\n        break;\n    case config.bindingAttrs.default:\n        commentPrefix = config.commentPrefix.default;\n        break;\n    }\n    bindingData.commentPrefix = commentPrefix + dataKeyMarker;\n    return bindingData;\n};\n\n/**\n * setDocRangeEndAfter\n * @param {object} node\n * @param {object} bindingData\n * @description\n * recursive execution to find last wrapping comment node\n * and set as bindingData.docRange.setEndAfter\n * if not found deleteContents will has no operation\n * @return {undefined}\n */\nconst setDocRangeEndAfter = (node: any, bindingData: any): void => {\n    if (!bindingData.commentPrefix) {\n        setCommentPrefix(bindingData);\n    }\n    const startTextContent = bindingData.commentPrefix;\n    const endTextContent = startTextContent + config.commentSuffix;\n    node = node.nextSibling;\n\n    // check last wrap comment node\n    if (node) {\n        if (node.nodeType === 8 && node.textContent === endTextContent) {\n            return bindingData.docRange.setEndBefore(node);\n        }\n        setDocRangeEndAfter(node, bindingData);\n    }\n};\n\n/**\n * wrapCommentAround\n * @param {object} bindingData\n * @param {Node} node\n * @return {object} DOM fragment\n * @description\n * wrap frament with comment node\n */\nconst wrapCommentAround = (bindingData: any, node: any): any => {\n    let prefix = '';\n    if (!bindingData.commentPrefix) {\n        setCommentPrefix(bindingData);\n    }\n    prefix = bindingData.commentPrefix;\n    const commentBegin = document.createComment(prefix);\n    const commentEnd = document.createComment(prefix + config.commentSuffix);\n    // document fragment - logic for ForOf binding\n    // check node.parentNode because node could be from cache and no longer in DOM\n    if (node.nodeType === 11) {\n        node.insertBefore(commentBegin, node.firstChild);\n        node.appendChild(commentEnd);\n    } else if (node.parentNode) {\n        node.parentNode.insertBefore(commentBegin, node);\n        util.insertAfter(node.parentNode, commentEnd, node);\n        // update bindingData details\n        bindingData.previousNonTemplateElement = node.previousSibling;\n        bindingData.nextNonTemplateElement = node.nextSibling;\n        bindingData.parentElement = node.previousSibling.parentElement;\n    }\n\n    return node;\n};\n\n/**\n * removeElemnetsByCommentWrap\n * @param {object} bindingData\n * @return {undefined}\n * @description remove elments by range\n */\nconst removeElemnetsByCommentWrap = (bindingData: any): void => {\n    if (!bindingData.docRange) {\n        bindingData.docRange = document.createRange();\n    }\n    try {\n        if (bindingData.previousNonTemplateElement) {\n            // update docRange start and end match the wrapped comment node\n            bindingData.docRange.setStartBefore(bindingData.previousNonTemplateElement.nextSibling);\n            setDocRangeEndAfter(bindingData.previousNonTemplateElement.nextSibling, bindingData);\n        } else {\n            // insert before next non template element\n            bindingData.docRange.setStartBefore(bindingData.parentElement.firstChild);\n            setDocRangeEndAfter(bindingData.parentElement.firstChild, bindingData);\n        }\n    } catch (err: any) {\n        console.log('error removeElemnetsByCommentWrap: ', err.message);\n    }\n\n    return bindingData.docRange.deleteContents();\n};\n\n/**\n * removeDomTemplateElement\n * @param {object} bindingData\n * @return {object} null\n */\nconst removeDomTemplateElement = (bindingData: any): void => {\n    // first render - forElement is live DOM element so has parentNode\n    if (bindingData.el.parentNode) {\n        return bindingData.el.parentNode.removeChild(bindingData.el);\n    }\n    removeElemnetsByCommentWrap(bindingData);\n};\n\nconst insertRenderedElements = (bindingData: any, fragment: any): void => {\n    // insert rendered fragment after the previousNonTemplateElement\n    if (bindingData.previousNonTemplateElement) {\n        util.insertAfter(bindingData.parentElement, fragment, bindingData.previousNonTemplateElement);\n    } else {\n        // insert before next non template element\n        if (bindingData.nextNonTemplateElement) {\n            bindingData.parentElement.insertBefore(fragment, bindingData.nextNonTemplateElement);\n        } else if (bindingData.parentElement) {\n            // insert from parent\n            bindingData.parentElement.appendChild(fragment);\n        }\n    }\n};\n\nexport {\n    createClonedElementCache,\n    setCommentPrefix,\n    wrapCommentAround,\n    removeElemnetsByCommentWrap,\n    removeDomTemplateElement,\n    setDocRangeEndAfter,\n    insertRenderedElements,\n};\n","\nimport {bindingAttrs as configBindingAttrs, bindingDataReference} from './config';\nimport {\n    getViewModelPropValue,\n    isArray,\n    isPlainObject,\n    throwErrorMessage,\n    cloneDomNode,\n    isEmptyObject,\n} from './util';\nimport createBindingCache from './domWalker';\nimport renderIteration from './renderIteration';\nimport {\n    wrapCommentAround,\n    removeElemnetsByCommentWrap,\n    insertRenderedElements,\n} from './commentWrapper';\n\nconst renderForOfBinding = ({bindingData, viewModel, bindingAttrs}: any): void => {\n    if (!bindingData || !viewModel || !bindingAttrs) {\n        return;\n    }\n    let keys: any;\n    let iterationDataLength: number;\n    const iterationData = getViewModelPropValue(viewModel, bindingData.iterator);\n    let isRegenerate = false;\n\n    // check iterationData and set iterationDataLength\n    if (isArray(iterationData)) {\n        iterationDataLength = iterationData.length;\n    } else if (isPlainObject(iterationData)) {\n        keys = Object.keys(iterationData);\n        iterationDataLength = keys.length;\n    } else {\n        // throw error but let script contince to run\n        return throwErrorMessage(null, 'iterationData is not an plain object or array');\n    }\n\n    // flag as pared for-of logic with bindingData.type\n    if (!bindingData.type) {\n        bindingData.type = configBindingAttrs.forOf;\n        wrapCommentAround(bindingData, bindingData.el);\n    }\n\n    // assign forOf internal id to bindingData once\n    if (typeof bindingData.iterationSize === 'undefined') {\n        // store iterationDataLength\n        bindingData.iterationSize = iterationDataLength;\n        // remove orignal node for-of attributes\n        bindingData.el.removeAttribute(bindingAttrs.forOf);\n        isRegenerate = true;\n    } else {\n        // only regenerate cache if iterationDataLength changed\n        isRegenerate = bindingData.iterationSize !== iterationDataLength;\n        // update iterationSize\n        bindingData.iterationSize = iterationDataLength;\n    }\n\n    if (!isRegenerate) {\n        bindingData.iterationBindingCache.forEach(function(elementCache: any, i: number) {\n            if (!isEmptyObject(elementCache)) {\n                const iterationVm = createIterationViewModel({\n                    bindingData: bindingData,\n                    viewModel: viewModel,\n                    iterationData: iterationData,\n                    keys: keys,\n                    index: i,\n                });\n                renderIteration({\n                    elementCache: elementCache,\n                    iterationVm: iterationVm,\n                    bindingAttrs: bindingAttrs,\n                    isRegenerate: false,\n                });\n            }\n        });\n\n        return;\n    }\n\n    // generate forOfBinding elements into fragment\n    const fragment = generateForOfElements(bindingData, viewModel, bindingAttrs, iterationData, keys);\n\n    removeElemnetsByCommentWrap(bindingData);\n\n    // insert fragment content into DOM\n    return insertRenderedElements(bindingData, fragment);\n};\n\n/**\n * createIterationViewModel\n * @description\n * create an virtual viewModel for render binding while in loop iteration\n * $data is the current data in the loop eg. data in array\n * $root is point to top level viewModel\n * $index is the current loop index\n * @param {*} param0\n * @return {object} virtual viewModel\n */\nconst createIterationViewModel = ({bindingData, viewModel, iterationData, keys, index}: any): any => {\n    const iterationVm: any = {};\n    iterationVm[bindingData.iterator.alias] = keys ? iterationData[keys[index]] : iterationData[index];\n    // populate common binding data reference\n    iterationVm[bindingDataReference.rootDataKey] = viewModel.$root || viewModel;\n    iterationVm[bindingDataReference.currentData] = iterationVm[bindingData.iterator.alias];\n    iterationVm[bindingDataReference.currentIndex] = index;\n    return iterationVm;\n};\n\nconst generateForOfElements = (bindingData: any, viewModel: any, bindingAttrs: any, iterationData: any, keys: any): any => {\n    const fragment = document.createDocumentFragment();\n    const iterationDataLength = bindingData.iterationSize;\n    let clonedItem: any;\n    let iterationVm: any;\n    let iterationBindingCache: any;\n    let i = 0;\n\n    // create or clear exisitng iterationBindingCache\n    if (isArray(bindingData.iterationBindingCache)) {\n        bindingData.iterationBindingCache.length = 0;\n    } else {\n        bindingData.iterationBindingCache = [];\n    }\n\n    // generate forOf and append to DOM\n    for (i = 0; i < iterationDataLength; i += 1) {\n        clonedItem = cloneDomNode(bindingData.el);\n\n        // create bindingCache per iteration\n        iterationBindingCache = createBindingCache({\n            rootNode: clonedItem,\n            bindingAttrs: bindingAttrs,\n        });\n\n        bindingData.iterationBindingCache.push(iterationBindingCache);\n\n        if (!isEmptyObject(iterationBindingCache)) {\n            // create an iterationVm match iterator alias\n            iterationVm = createIterationViewModel({\n                bindingData: bindingData,\n                viewModel: viewModel,\n                iterationData: iterationData,\n                keys: keys,\n                index: i,\n            });\n\n            renderIteration({\n                elementCache: bindingData.iterationBindingCache[i],\n                iterationVm: iterationVm,\n                bindingAttrs: bindingAttrs,\n                isRegenerate: true,\n            });\n        }\n\n        fragment.appendChild(clonedItem);\n    }\n\n    return fragment;\n};\n\nexport default renderForOfBinding;\n","import {maxDatakeyLength} from './config';\nimport {REGEX} from './util';\nimport renderForOfBinding from './renderForOfBinding';\nimport type { BindingCache, ViewModel, BindingAttrs } from './types';\n\n/**\n * forOfBinding\n * @description\n * DOM decleartive for binding.\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst forOfBinding = (cache: BindingCache, viewModel: ViewModel, bindingAttrs: BindingAttrs, _forceRender?: boolean): void => {\n    const dataKey = cache.dataKey;\n\n    if (!dataKey || dataKey.length > maxDatakeyLength) {\n        return;\n    }\n\n    if (!cache.iterator) {\n        if (dataKey.length > maxDatakeyLength) {\n            return;\n        }\n        // replace mess spaces with single space\n        cache.dataKey = cache.dataKey.replace(REGEX.WHITE_SPACES, ' ');\n        const forExpMatch = dataKey.match(REGEX.FOR_OF);\n\n        if (!forExpMatch) {\n            return;\n        }\n\n        cache.iterator = {};\n        cache.iterator.alias = forExpMatch[1].trim();\n\n        if (forExpMatch[2]) {\n            cache.iterator.dataKey = forExpMatch[2].trim();\n            cache.parentElement = cache.el.parentElement;\n            cache.previousNonTemplateElement = cache.el.previousSibling;\n            cache.nextNonTemplateElement = cache.el.nextSibling;\n        }\n    }\n\n    renderForOfBinding({\n        bindingData: cache,\n        viewModel: viewModel,\n        bindingAttrs: bindingAttrs,\n    });\n};\n\nexport default forOfBinding;\n","import {isEmptyObject} from './util';\nimport renderIteration from './renderIteration';\nimport createBindingCache from './domWalker';\nimport {commentSuffix} from './config';\nimport {removeElemnetsByCommentWrap, insertRenderedElements} from './commentWrapper';\n\n/**\n * isTargetDomRemoved\n * @description check if DOM between 'start' and 'end' comment tag has been removed\n * @param {object} bindingData\n * @return {boolean}\n */\nconst isTargetDomRemoved = (bindingData: any): boolean => {\n    let ret = false;\n    if (bindingData && bindingData.previousNonTemplateElement) {\n        const commentStartTextContent = bindingData.previousNonTemplateElement.textContent;\n        const endCommentTag = bindingData.previousNonTemplateElement.nextSibling;\n\n        if (endCommentTag.nodeType === 8) {\n            if (endCommentTag.textContent === commentStartTextContent + commentSuffix) {\n                ret = true;\n            }\n        }\n    }\n    return ret;\n};\n\nconst renderIfBinding = ({bindingData, viewModel, bindingAttrs}: any): void => {\n    if (!bindingData.fragment) {\n        return;\n    }\n\n    const isDomRemoved = isTargetDomRemoved(bindingData);\n    let rootElement = bindingData.el;\n\n    // remove current old DOM.\n    // TODO: try preserve DOM\n    if (!isDomRemoved && !bindingData.isOnce) {\n        removeIfBinding(bindingData);\n        // use fragment for create iterationBindingCache\n        rootElement = bindingData.fragment.firstChild.cloneNode(true);\n    }\n\n    // walk clonedElement to create iterationBindingCache once\n    if (!bindingData.iterationBindingCache || !bindingData.hasIterationBindingCache) {\n        bindingData.iterationBindingCache = createBindingCache({\n            rootNode: rootElement,\n            bindingAttrs: bindingAttrs,\n        });\n    }\n\n    // only render if has iterationBindingCache\n    // means has other dataBindings to be render\n    if (!isEmptyObject(bindingData.iterationBindingCache)) {\n        bindingData.hasIterationBindingCache = true;\n        renderIteration({\n            elementCache: bindingData.iterationBindingCache,\n            iterationVm: viewModel,\n            bindingAttrs: bindingAttrs,\n            isRegenerate: true,\n        });\n    }\n\n    // insert to new rendered DOM\n    // TODO: check unnecessary insertion when DOM is preserved\n    insertRenderedElements(bindingData, rootElement);\n};\n\nconst removeIfBinding = (bindingData: any): void => {\n    removeElemnetsByCommentWrap(bindingData);\n    // remove cache.IterationBindingCache to prevent memory leak\n    if (bindingData.hasIterationBindingCache) {\n        delete bindingData.iterationBindingCache;\n        delete bindingData.hasIterationBindingCache;\n    }\n};\n\nexport {\n    renderIfBinding,\n    removeIfBinding,\n};\n","import {bindingAttrs as configBindingAttrs, constants} from './config';\nimport {getViewModelPropValue, removeElement} from './util';\nimport {createClonedElementCache, wrapCommentAround} from './commentWrapper';\nimport {renderIfBinding, removeIfBinding} from './renderIfBinding';\nimport type { BindingCache, ViewModel, BindingAttrs } from './types';\n\n/**\n * if-Binding\n * @description\n * DOM decleartive for binding.\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst ifBinding = (cache: BindingCache, viewModel: ViewModel, bindingAttrs: BindingAttrs, _forceRender?: boolean): void => {\n    const dataKey = cache.dataKey;\n\n    // isOnce only return if there is no child bindings\n    if (!dataKey || (cache.isOnce && cache.hasIterationBindingCache === false)) {\n        return;\n    }\n\n    cache.elementData = cache.elementData || {};\n    cache.type = cache.type || configBindingAttrs.if;\n\n    const oldViewModelProValue = cache.elementData.viewModelPropValue;\n    // getViewModelPropValue could be return undefined or null\n    const viewModelPropValue = getViewModelPropValue(viewModel, cache) || false;\n\n    // do nothing if viewModel value not changed and no child bindings\n    if (oldViewModelProValue === viewModelPropValue && !cache.hasIterationBindingCache) {\n        return;\n    }\n\n    const shouldRender = Boolean(viewModelPropValue);\n\n    // remove this cache from parent array\n    if (!shouldRender && cache.isOnce && cache.el.parentNode) {\n        removeElement(cache.el);\n        // delete cache.fragment;\n        removeBindingInQueue({\n            viewModel: viewModel,\n            cache: cache,\n        });\n        return;\n    }\n\n    // store new show status\n    cache.elementData.viewModelPropValue = viewModelPropValue;\n\n    // only create fragment once\n    // wrap comment tag around\n    // remove if attribute from original element to allow later dataBind parsing\n    if (!cache.fragment) {\n        wrapCommentAround(cache, cache.el);\n        cache.el.removeAttribute(bindingAttrs.if);\n        createClonedElementCache(cache);\n    }\n\n    if (!shouldRender) {\n        // remove element\n        removeIfBinding(cache);\n    } else {\n        // render element\n        renderIfBinding({\n            bindingData: cache,\n            viewModel: viewModel,\n            bindingAttrs: bindingAttrs,\n        });\n\n        // if render once\n        // remove this cache from parent array if no child caches\n        if (cache.isOnce && !cache.hasIterationBindingCache) {\n            // delete cache.fragment;\n            removeBindingInQueue({\n                viewModel: viewModel,\n                cache: cache,\n            });\n        }\n    }\n};\n\nconst removeBindingInQueue = ({viewModel, cache}: {viewModel: ViewModel; cache: BindingCache}): boolean => {\n    let ret = false;\n    if (viewModel.APP?.postProcessQueue) {\n        const parentRef = cache[constants.PARENT_REF] as BindingCache[];\n        viewModel.APP.postProcessQueue.push(\n            ((cache: BindingCache, index: number) => () => {\n                parentRef.splice(index, 1);\n            })(cache, parentRef.indexOf(cache)),\n        );\n        ret = true;\n    }\n    return ret;\n};\n\nexport default ifBinding;\n","import {getViewModelPropValue} from './util';\nimport {createClonedElementCache, wrapCommentAround} from './commentWrapper';\nimport {renderIfBinding, removeIfBinding} from './renderIfBinding';\nimport type { BindingCache, ViewModel, BindingAttrs, CaseData } from './types';\n\n/**\n * switch-Binding\n * @description\n * DOM decleartive switch binding.\n * switch parent element wrap direct child with case bindings\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst switchBinding = (cache: BindingCache, viewModel: ViewModel, bindingAttrs: BindingAttrs, _forceRender?: boolean): void => {\n    const dataKey = cache.dataKey;\n\n    if (!dataKey) {\n        return;\n    }\n\n    cache.elementData = cache.elementData || {};\n\n    const newExpression = getViewModelPropValue(viewModel, cache);\n\n    if (newExpression === cache.elementData.viewModelPropValue) {\n        return;\n    }\n\n    cache.elementData.viewModelPropValue = newExpression;\n\n    // build switch cases if not yet defined\n    if (!cache.cases) {\n        const childrenElements = cache.el.children;\n        if (!childrenElements.length) {\n            return;\n        }\n        cache.cases = [];\n        for (let i = 0, elementLength = childrenElements.length; i < elementLength; i += 1) {\n            let caseData: CaseData | null = null;\n            const childElement = childrenElements[i] as HTMLElement;\n            if (childElement.hasAttribute(bindingAttrs.case)) {\n                caseData = createCaseData(childElement, bindingAttrs.case);\n            } else if (childElement.hasAttribute(bindingAttrs.default)) {\n                caseData = createCaseData(childElement, bindingAttrs.default);\n                caseData.isDefault = true;\n            }\n            // create fragment by clone node\n            // wrap with comment tag\n            if (caseData) {\n                wrapCommentAround(caseData, caseData.el);\n                // remove binding attribute for later dataBind parse\n                if (caseData.isDefault) {\n                    caseData.el.removeAttribute(bindingAttrs.default);\n                } else {\n                    caseData.el.removeAttribute(bindingAttrs.case);\n                }\n                createClonedElementCache(caseData);\n                cache.cases.push(caseData);\n            }\n        }\n    }\n\n    if (cache.cases.length) {\n        let hasMatch = false;\n        // do switch operation - reuse if binding logic\n        for (let j = 0, casesLength = cache.cases.length; j < casesLength; j += 1) {\n            let newCaseValue: unknown;\n            if (cache.cases[j].dataKey) {\n                // set back to dataKey if nothing found in viewModel\n                newCaseValue = getViewModelPropValue(viewModel, cache.cases[j]) || cache.cases[j].dataKey;\n            }\n\n            if (newCaseValue === cache.elementData.viewModelPropValue || cache.cases[j].isDefault) {\n                hasMatch = true;\n                // render element\n                renderIfBinding({\n                    bindingData: cache.cases[j],\n                    viewModel: viewModel,\n                    bindingAttrs: bindingAttrs,\n                });\n\n                // remove other elements\n                removeUnmatchCases(cache.cases, j);\n                break;\n            }\n        }\n        // no match remove all cases\n        if (!hasMatch) {\n            removeUnmatchCases(cache.cases);\n        }\n    }\n};\n\nfunction removeUnmatchCases(cases: CaseData[], matchedIndex?: number): void {\n    cases.forEach((caseData: CaseData, index: number) => {\n        if (index !== matchedIndex || typeof matchedIndex === 'undefined') {\n            removeIfBinding(caseData);\n            // remove cache.IterationBindingCache to prevent memory leak\n            if (caseData.hasIterationBindingCache) {\n                caseData.iterationBindingCache = null;\n                caseData.hasIterationBindingCache = false;\n            }\n        }\n    });\n}\n\nfunction createCaseData(node: HTMLElement, attrName: string): CaseData {\n    const caseData: CaseData = {\n        el: node,\n        dataKey: node.getAttribute(attrName),\n        type: attrName,\n    };\n    return caseData;\n}\n\nexport default switchBinding;\n","import {\n    getFormData,\n    getViewModelValue,\n    resolveViewModelContext,\n    resolveParamList,\n} from './util';\n\nconst createEventBinding = ({\n    cache = {} as any,\n    forceRender = false,\n    type = '',\n    viewModel = {} as any,\n}): void => {\n    const handlerName = cache.dataKey;\n    let paramList = cache.parameters;\n    let viewModelContext: any;\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    if (!type || !handlerName || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    const handlerFn = getViewModelValue(viewModel, handlerName);\n\n    if (typeof handlerFn === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        const handlerWrap = (e: any): void => {\n            let formData: any;\n            let args: any[] = [];\n            if (type === 'submit') {\n                formData = getFormData(e.currentTarget);\n                args = [e, e.currentTarget, formData].concat(paramList);\n            } else {\n                args = [e, e.currentTarget].concat(paramList);\n            }\n            handlerFn.apply(viewModelContext, args);\n        };\n\n        cache.el.removeEventListener(type, handlerWrap, false);\n        cache.el.addEventListener(type, handlerWrap, false);\n    }\n};\n\nexport default createEventBinding;\n","import hoverBinding from './hoverBinding';\nimport changeBinding from './changeBinding';\nimport modelBinding from './modelBinding';\nimport textBinding from './textBinding';\nimport showBinding from './showBinding';\nimport cssBinding from './cssBinding';\nimport attrBinding from './attrBinding';\nimport forOfBinding from './forOfBinding'; // depends renderForOfBinding -> this , renderIteration\nimport ifBinding from './ifBinding';\nimport switchBinding from './switchBinding';\nimport createEventBinding from './createEventBinding';\nimport type { ElementCache, UpdateOption, BindingAttrs, ViewModel, BindingCache } from './types';\n\ninterface ApplyBindingParams {\n    ctx: unknown;\n    elementCache: ElementCache;\n    updateOption: UpdateOption;\n    bindingAttrs: BindingAttrs;\n    viewModel: ViewModel;\n}\n\nfunction applyBinding({ctx: _ctx, elementCache, updateOption, bindingAttrs, viewModel}: ApplyBindingParams): void {\n    if (!elementCache || !updateOption) {\n        return;\n    }\n\n    // the follow binding should be in order for better efficiency\n\n    // apply forOf Binding\n    if (updateOption.forOfBinding && elementCache[bindingAttrs.forOf] && elementCache[bindingAttrs.forOf].length) {\n        elementCache[bindingAttrs.forOf].forEach((cache: BindingCache) => {\n            forOfBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply attr Binding\n    if (updateOption.attrBinding && elementCache[bindingAttrs.attr] && elementCache[bindingAttrs.attr].length) {\n        elementCache[bindingAttrs.attr].forEach((cache: BindingCache) => {\n            attrBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply if Binding\n    if (updateOption.ifBinding && elementCache[bindingAttrs.if] && elementCache[bindingAttrs.if].length) {\n        elementCache[bindingAttrs.if].forEach((cache: BindingCache) => {\n            ifBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply show Binding\n    if (updateOption.showBinding && elementCache[bindingAttrs.show] && elementCache[bindingAttrs.show].length) {\n        elementCache[bindingAttrs.show].forEach((cache: BindingCache) => {\n            showBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply switch Binding\n    if (updateOption.switchBinding && elementCache[bindingAttrs.switch] && elementCache[bindingAttrs.switch].length) {\n        elementCache[bindingAttrs.switch].forEach((cache: BindingCache) => {\n            switchBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply text binding\n    if (updateOption.textBinding && elementCache[bindingAttrs.text] && elementCache[bindingAttrs.text].length) {\n        elementCache[bindingAttrs.text].forEach((cache: BindingCache) => {\n            textBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply cssBinding\n    if (updateOption.cssBinding && elementCache[bindingAttrs.css] && elementCache[bindingAttrs.css].length) {\n        elementCache[bindingAttrs.css].forEach((cache: BindingCache) => {\n            cssBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply model binding\n    if (updateOption.modelBinding && elementCache[bindingAttrs.model] && elementCache[bindingAttrs.model].length) {\n        elementCache[bindingAttrs.model].forEach((cache: BindingCache) => {\n            modelBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply change binding\n    if (updateOption.changeBinding && elementCache[bindingAttrs.change] && elementCache[bindingAttrs.change].length) {\n        elementCache[bindingAttrs.change].forEach((cache: BindingCache) => {\n            changeBinding({\n                bindingAttrs,\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'change',\n                viewModel,\n            });\n        });\n    }\n\n    // apply submit binding\n    if (updateOption.submitBinding && elementCache[bindingAttrs.submit] && elementCache[bindingAttrs.submit].length) {\n        elementCache[bindingAttrs.submit].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'submit',\n                viewModel,\n            });\n        });\n    }\n\n    // apply click binding\n    if (updateOption.clickBinding && elementCache[bindingAttrs.click] && elementCache[bindingAttrs.click].length) {\n        elementCache[bindingAttrs.click].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'click',\n                viewModel,\n            });\n        });\n    }\n\n    // apply double click binding\n    if (updateOption.dblclickBinding && elementCache[bindingAttrs.dblclick] && elementCache[bindingAttrs.dblclick].length) {\n        elementCache[bindingAttrs.dblclick].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'dblclick',\n                viewModel,\n            });\n        });\n    }\n\n    // apply blur binding\n    if (updateOption.blurBinding && elementCache[bindingAttrs.blur] && elementCache[bindingAttrs.blur].length) {\n        elementCache[bindingAttrs.blur].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'blur',\n                viewModel,\n            });\n        });\n    }\n\n    // apply focus binding\n    if (updateOption.focusBinding && elementCache[bindingAttrs.focus] && elementCache[bindingAttrs.focus].length) {\n        elementCache[bindingAttrs.focus].forEach((cache: BindingCache) => {\n            createEventBinding({\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'focus',\n                viewModel,\n            });\n        });\n    }\n\n    // apply hover binding\n    if (updateOption.hoverBinding && elementCache[bindingAttrs.hover] && elementCache[bindingAttrs.hover].length) {\n        elementCache[bindingAttrs.hover].forEach((cache: BindingCache) => {\n            hoverBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n        });\n    }\n\n    // apply input binding - eg html range input\n    if (updateOption.inputBinding && elementCache[bindingAttrs.input] && elementCache[bindingAttrs.input].length) {\n        elementCache[bindingAttrs.input].forEach((cache: BindingCache) => {\n            changeBinding({\n                bindingAttrs,\n                cache,\n                forceRender: updateOption.forceRender,\n                type: 'input',\n                viewModel,\n            });\n        });\n    }\n}\n\nexport default applyBinding;\n","import {getViewModelPropValue} from './util';\nimport type { BindingCache, ViewModel, BindingAttrs } from './types';\n\n/**\n * showBinding\n * @description\n * DOM decleartive show binding. Make binding show/hide according to viewModel data (boolean)\n * viewModel data can function but must return boolean\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n */\nconst showBinding = (cache: BindingCache, viewModel: ViewModel, _bindingAttrs: BindingAttrs, _forceRender?: boolean): void => {\n    const dataKey = cache.dataKey;\n    let currentInlineSytle: CSSStyleDeclaration | Record<string, never> = {};\n    let currentInlineDisplaySytle = '';\n    let shouldShow = true;\n\n    if (!dataKey) {\n        return;\n    }\n\n    cache.elementData = cache.elementData || {};\n\n    const oldShowStatus = cache.elementData.viewModelPropValue;\n\n    // store current element display default style once only\n    if (\n        typeof cache.elementData.displayStyle === 'undefined' ||\n        typeof cache.elementData.computedStyle === 'undefined'\n    ) {\n        currentInlineSytle = cache.el.style;\n        currentInlineDisplaySytle = currentInlineSytle.display;\n        // use current inline style if defined\n        if (currentInlineDisplaySytle) {\n            // set to 'block' if is 'none'\n            cache.elementData.displayStyle = currentInlineDisplaySytle === 'none' ? 'block' : currentInlineDisplaySytle;\n            cache.elementData.computedStyle = null;\n        } else {\n            const computeStyle = window.getComputedStyle(cache.el, null).getPropertyValue('display');\n            cache.elementData.displayStyle = null;\n            cache.elementData.computedStyle = computeStyle;\n        }\n    }\n\n    shouldShow = getViewModelPropValue(viewModel, cache);\n\n    // treat undefined || null as false.\n    // eg if property doesn't exsits in viewModel, it will treat as false to hide element\n    shouldShow = Boolean(shouldShow);\n\n    // reject if nothing changed\n    if (oldShowStatus === shouldShow) {\n        return;\n    }\n\n    if (!shouldShow) {\n        if (cache.el.style.display !== 'none') {\n            cache.el.style.setProperty('display', 'none');\n        }\n    } else {\n        if (cache.elementData.computedStyle || cache.el.style.display === 'none') {\n            if (cache.elementData.computedStyle === 'none') {\n                // default display is none in css rule, so use display 'block'\n                cache.el.style.setProperty('display', 'block');\n            } else {\n                // has default displayable type so just remove inline display 'none'\n                if (currentInlineSytle.length > 1) {\n                    cache.el.style.removeProperty('display');\n                } else {\n                    cache.el.removeAttribute('style');\n                }\n            }\n        } else {\n            // element default display was inline style, so restore it\n            cache.el.style.setProperty('display', cache.elementData.displayStyle);\n        }\n    }\n\n    // store new show status\n    cache.elementData.viewModelPropValue = shouldShow;\n};\n\nexport default showBinding;\n","import {getViewModelPropValue} from './util';\n\n/**\n * textBinding\n * * @description\n * DOM decleartive text binding update dom textnode with viewModel data\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst textBinding = (cache: any, viewModel: any, bindingAttrs: any, forceRender: any): void => {\n    const dataKey = cache.dataKey;\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    // NOTE: this doesn't work for for-of, if and switch bindings because element was not in DOM\n    if (!dataKey || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    const newValue = getViewModelPropValue(viewModel, cache);\n    const oldValue = cache.el.textContent;\n\n    if (typeof newValue !== 'undefined' && typeof newValue !== 'object' && newValue !== null) {\n        if (newValue !== oldValue) {\n            cache.el.textContent = newValue;\n        }\n    }\n};\n\nexport default textBinding;\n","import {\n    getViewModelPropValue,\n    isPlainObject,\n    arrayRemoveMatch,\n    each,\n} from './util';\n\n/**\n * cssBinding\n * @description\n * DOM decleartive css binding. update classlist.\n * viewModel data can function but must return JSOL.\n * added css class if value is true\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst cssBinding = (cache: any, viewModel: any, bindingAttrs: any, forceRender: any): void => {\n    const dataKey = cache.dataKey;\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    if (!dataKey || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    cache.elementData = cache.elementData || {};\n    cache.elementData.viewModelPropValue = cache.elementData.viewModelPropValue || '';\n\n    const oldCssList = cache.elementData.viewModelPropValue;\n    let newCssList = '';\n    const vmCssListObj = getViewModelPropValue(viewModel, cache);\n    let vmCssListArray: any[] = [];\n    let isViewDataObject = false;\n    let isViewDataString = false;\n    let cssList: any[] = [];\n\n    if (typeof vmCssListObj === 'string') {\n        isViewDataString = true;\n    } else if (isPlainObject(vmCssListObj)) {\n        isViewDataObject = true;\n    } else {\n        // reject if vmCssListObj is not an object or string\n        return;\n    }\n\n    if (isViewDataObject) {\n        newCssList = JSON.stringify(vmCssListObj);\n    } else {\n        newCssList = vmCssListObj.replace(/\\s\\s+/g, ' ').trim();\n        vmCssListArray = newCssList.split(' ');\n    }\n    // reject if nothing changed\n    if (oldCssList === newCssList) {\n        return;\n    }\n\n    // get current css classes from element\n    const domCssList = cache.el.classList;\n    // clone domCssList as new array\n    const domCssListLength = domCssList.length;\n    for (let i = 0; i < domCssListLength; i += 1) {\n        cssList.push(domCssList[i]);\n    }\n\n    if (isViewDataObject) {\n        each(vmCssListObj, function(k: any, v: any) {\n            const i = cssList.indexOf(k);\n            if (v === true) {\n                cssList.push(k);\n            } else if (i !== -1) {\n                cssList.splice(i, 1);\n            }\n        });\n    } else if (isViewDataString) {\n        // remove oldCssList items from cssList\n        cssList = arrayRemoveMatch(cssList, oldCssList);\n        cssList = cssList.concat(vmCssListArray);\n    }\n\n    // unique cssList array\n    cssList = cssList.filter((v: any, i: any, a: any) => {\n        return a.indexOf(v) === i;\n    });\n\n    const cssListString = cssList.join(' ');\n    // update element data\n    cache.elementData.viewModelPropValue = newCssList;\n    // replace all css classes\n    cache.el.setAttribute('class', cssListString);\n};\n\nexport default cssBinding;\n","import {getViewModelValue} from './util';\n\n/**\n * modelBinding\n * @description input element data binding. viewModel -> DOM update\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst modelBinding = (cache: any, viewModel: any, bindingAttrs: any, forceRender: any): void => {\n    const dataKey = cache.dataKey;\n    let newValue: any = '';\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    if (!dataKey || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    newValue = getViewModelValue(viewModel, dataKey);\n\n    if (typeof newValue !== 'undefined' && newValue !== null) {\n        const $element = cache.el;\n        const isCheckbox = $element.type === 'checkbox';\n        const isRadio = $element.type === 'radio';\n        const inputName = $element.name;\n        const $radioGroup = isRadio ? APP.$rootElement.querySelectorAll(`input[name=\"${inputName}\"]`) : [];\n        const oldValue = isCheckbox ? $element.checked : $element.value;\n\n        // update element value\n        if (newValue !== oldValue) {\n            if (isCheckbox) {\n                $element.checked = Boolean(newValue);\n            } else if (isRadio) {\n                let i = 0;\n                const radioGroupLength = $radioGroup.length;\n\n                for (i = 0; i < radioGroupLength; i += 1) {\n                    if ($radioGroup[i].value === newValue) {\n                        $radioGroup[i].checked = true;\n                        break;\n                    }\n                }\n            } else {\n                $element.value = newValue;\n            }\n        }\n    }\n};\n\nexport default modelBinding;\n","\nimport {bindingDataReference} from './config';\nimport {\n    getViewModelValue,\n    resolveViewModelContext,\n    resolveParamList,\n} from './util';\n\n/**\n * blurBinding\n * DOM decleartive on blur event binding\n * event handler bind to viewModel method according to the DOM attribute\n * @param {object} cache\n * @param {object} viewModel\n * @param {object} bindingAttrs\n * @param {boolean} forceRender\n */\nconst hoverBinding = (cache: any, viewModel: any, bindingAttrs: any, forceRender: any): void => {\n    const handlerName = cache.dataKey;\n    let paramList = cache.parameters;\n    const inHandlerName = bindingDataReference.mouseEnterHandlerName;\n    const outHandlerName = bindingDataReference.mouseLeaveHandlerName;\n    let viewModelContext: any;\n    const APP = viewModel.APP || viewModel.$root.APP;\n\n    cache.elementData = cache.elementData || {};\n\n    // TODO: check what is APP.$rootElement.contains(cache.el)\n    if (!handlerName || (!forceRender && !APP.$rootElement.contains(cache.el))) {\n        return;\n    }\n\n    const handlers = getViewModelValue(viewModel, handlerName);\n\n    if (handlers && typeof handlers[inHandlerName] === 'function' && typeof handlers[outHandlerName] === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        function onMouseEnterHandler(e: any) {\n            const args = [e, cache.el].concat(paramList);\n            handlers[inHandlerName].apply(viewModelContext, args);\n        }\n\n        function onMouseLeaveHandler(e: any) {\n            const args = [e, cache.el].concat(paramList);\n            handlers[outHandlerName].apply(viewModelContext, args);\n        }\n\n        cache.el.removeEventListener('mouseenter', onMouseEnterHandler, false);\n        cache.el.removeEventListener('mouseleave', onMouseLeaveHandler, false);\n\n        cache.el.addEventListener('mouseenter', onMouseEnterHandler, false);\n        cache.el.addEventListener('mouseleave', onMouseLeaveHandler, false);\n    }\n};\n\nexport default hoverBinding;\n","import * as util from './util';\n\n/**\n *  pubSub\n * @description use jQuery object as pubSub\n * @example EVENTS object strucure:\n *  EVENTS = {\n        'EVENT-NAME': [{ 'comp-id': fn }],\n        'EVENT-NAME2': [{ 'comp-id': fn }]\n    };\n */\n\ninterface Subscriber {\n    [compId: string]: Function | boolean | undefined;\n    isOnce?: boolean;\n}\n\ninterface Events {\n    [eventName: string]: Subscriber[];\n}\n\nconst EVENTS: Events = {};\n\nexport const subscribeEvent = (instance: any = null, eventName: string = '', fn: Function, isOnce: boolean = false): void => {\n    if (!instance || !instance.compId || !eventName || typeof fn !== 'function') {\n        return;\n    }\n\n    let subscriber: Subscriber;\n    let isSubscribed = false;\n\n    eventName = eventName.replace(util.REGEX.WHITE_SPACES, '');\n    EVENTS[eventName] = EVENTS[eventName] || [];\n    // check if already subscribed and update callback fn\n    isSubscribed = EVENTS[eventName].some((subscriber) => {\n        if (subscriber[instance.compId]) {\n            subscriber[instance.compId] = fn.bind(instance.viewModel);\n            subscriber.isOnce = isOnce;\n            return true;\n        }\n        return false;\n    });\n    // push if not yet subscribe\n    if (!isSubscribed) {\n        subscriber = {};\n        subscriber[instance.compId] = fn.bind(instance.viewModel);\n        subscriber.isOnce = isOnce;\n        EVENTS[eventName].push(subscriber);\n    }\n};\n\nexport const subscribeEventOnce = (instance: any = null, eventName: string = '', fn: Function): void => {\n    subscribeEvent(instance, eventName, fn, true);\n};\n\nexport const unsubscribeEvent = (compId: string | number = '', eventName: string = ''): void => {\n    if (!compId || !eventName) {\n        return;\n    }\n\n    let i = 0;\n    let subscribersLength = 0;\n    let subscriber: Subscriber;\n\n    eventName = eventName.replace(util.REGEX.WHITE_SPACES, '');\n\n    if (EVENTS[eventName]) {\n        subscribersLength = EVENTS[eventName].length;\n        for (i = 0; i < subscribersLength; i += 1) {\n            subscriber = EVENTS[eventName][i];\n            if (subscriber[compId]) {\n                EVENTS[eventName].splice(i, 1);\n                break;\n            }\n        }\n    }\n    // delete the event if no more subscriber\n    if (EVENTS[eventName] && !EVENTS[eventName].length) {\n        delete EVENTS[eventName];\n    }\n};\n\n/**\n * unsubscribeAllEvent\n * @description unsubscribe all event by compId. eg when a component removed\n * @param {string} compId\n */\nexport const unsubscribeAllEvent = (compId: string | number = ''): void => {\n    if (!compId) {\n        return;\n    }\n    Object.keys(EVENTS).forEach((eventName) => {\n        unsubscribeEvent(compId, eventName);\n    });\n};\n\nexport const publishEvent = (eventName: string = '', ...args: any[]): void => {\n    if (!eventName || !EVENTS[eventName]) {\n        return;\n    }\n\n    eventName = eventName.replace(util.REGEX.WHITE_SPACES, '');\n\n    EVENTS[eventName].forEach((subscriber) => {\n        Object.keys(subscriber).forEach((compId) => {\n            if (typeof subscriber[compId] === 'function') {\n                const ret = subscriber[compId](...args);\n                if (subscriber.isOnce) {\n                    unsubscribeEvent(compId, eventName);\n                }\n                return ret;\n            }\n        });\n    });\n};\n","import * as config from './config';\nimport {debounceRaf} from './util';\nimport createBindingCache from './domWalker';\nimport createBindingOption from './createBindingOption';\nimport applyBinding from './applyBinding';\nimport renderTemplatesBinding from './renderTemplatesBinding';\nimport postProcess from './postProcess';\nimport * as pubSub from './pubSub';\n\nlet compIdIndex = 0;\n\nclass Binder {\n    initRendered: boolean;\n    compId: number;\n    $rootElement: any;\n    viewModel: any;\n    bindingAttrs: any;\n    isServerRendered: boolean;\n    elementCache: any;\n    postProcessQueue: any[];\n    render: (opt?: any) => void;\n\n    constructor($rootElement: any, viewModel: any, bindingAttrs: any) {\n        if (!$rootElement || $rootElement.nodeType !== 1 || viewModel === null || typeof viewModel !== 'object') {\n            throw new TypeError('$rootElement or viewModel is invalid');\n        }\n\n        this.initRendered = false;\n\n        this.compId = compIdIndex += 1;\n\n        this.$rootElement = $rootElement;\n\n        this.viewModel = viewModel;\n\n        this.bindingAttrs = bindingAttrs;\n\n        this.isServerRendered = this.$rootElement.getAttribute(config.serverRenderedAttr) !== null;\n\n        // Initialize render method with debounced version\n        this.render = debounceRaf(this._render.bind(this), this) as any;\n\n        // inject instance into viewModel\n        this.viewModel.APP = this;\n\n        // add $root pointer to viewModel so binding can be refer as $root.something\n        this.viewModel.$root = this.viewModel;\n\n        // 1st step\n        // parsView walk the DOM and create binding cache that holds each element's binding details\n        // this binding cache is like AST for render and update\n        this.parseView();\n\n        // for jquery user set viewModel referece to $rootElement for easy debug\n        // otherwise use Expando to attach viewModel to $rootElement\n        this.$rootElement[config.bindingDataReference.rootDataKey] = this.viewModel;\n\n        return this;\n    }\n\n    /**\n     * parseView\n     * @description\n     * @return {this}\n     * traver from $rootElement to find each data-bind-* element\n     * then apply data binding\n     */\n    parseView(): this {\n        this.elementCache = createBindingCache({\n            rootNode: this.$rootElement,\n            bindingAttrs: this.bindingAttrs,\n        });\n\n        // updateElementCache if server rendered on init\n        if (this.isServerRendered && !this.initRendered) {\n            this.updateElementCache({\n                templateCache: true,\n            });\n        }\n        return this;\n    }\n\n    /**\n     * updateElementCache\n     * @param {object} opt\n     * @description call createBindingCache to parse view and generate bindingCache\n     */\n    updateElementCache(opt: any = {}): void {\n        const elementCache = opt.elementCache || this.elementCache;\n\n        if (opt.allCache) {\n            // walk dom from root element to regenerate elementCache\n            this.elementCache = createBindingCache({\n                rootNode: this.$rootElement,\n                bindingAttrs: this.bindingAttrs,\n            });\n        }\n        // walk from first rendered template node to create/update child bindingCache\n        if (opt.allCache || opt.templateCache) {\n            if (elementCache[this.bindingAttrs.tmp] && elementCache[this.bindingAttrs.tmp].length) {\n                // Use for loop to handle templates added during rendering\n                for (let i = 0; i < elementCache[this.bindingAttrs.tmp].length; i++) {\n                    const cache = elementCache[this.bindingAttrs.tmp][i];\n                    // set skipCheck as skipForOfParseFn whenever an node has\n                    // both template and forOf bindings\n                    // then the template bindingCache should be an empty object\n                    let skipForOfParseFn: any = null;\n                    if (cache.el.hasAttribute(this.bindingAttrs.forOf)) {\n                        skipForOfParseFn = (): boolean => {\n                            return true;\n                        };\n                    }\n                    cache.bindingCache = createBindingCache({\n                        rootNode: cache.el,\n                        bindingAttrs: this.bindingAttrs,\n                        skipCheck: skipForOfParseFn,\n                        isRenderedTemplate: opt.isRenderedTemplates,\n                    });\n                }\n            }\n        }\n    }\n\n    _render(opt: any = {}): void {\n        let updateOption: any = {};\n\n        if (!this.initRendered) {\n            // only update eventsBinding if server rendered\n            if (this.isServerRendered) {\n                this.$rootElement.removeAttribute(config.serverRenderedAttr);\n                updateOption = createBindingOption(config.bindingUpdateConditions.serverRendered, opt);\n            } else {\n                updateOption = createBindingOption(config.bindingUpdateConditions.init, opt);\n            }\n        } else {\n            // when called again only update visualBinding options\n            updateOption = createBindingOption('', opt);\n        }\n\n        // create postProcessQueue before start rendering\n        this.postProcessQueue = [];\n\n        const renderBindingOption = {\n            ctx: this,\n            elementCache: this.elementCache,\n            updateOption: updateOption,\n            bindingAttrs: this.bindingAttrs,\n            viewModel: this.viewModel,\n        };\n\n        // always render template binding first\n        // render and apply binding to template(s)\n        // this is an share function therefore passing 'this' context\n        renderTemplatesBinding(renderBindingOption);\n\n        // apply bindings to rest of the DOM\n        applyBinding(renderBindingOption);\n\n        // trigger postProcess\n        postProcess(this.postProcessQueue);\n        // clear postProcessQueue\n        this.postProcessQueue.length = 0;\n        delete this.postProcessQueue;\n\n        this.initRendered = true;\n    }\n\n    subscribe(eventName: string = '', fn: any): this {\n        pubSub.subscribeEvent(this, eventName, fn);\n        return this;\n    }\n\n    subscribeOnce(eventName: string = '', fn: any): this {\n        pubSub.subscribeEventOnce(this, eventName, fn);\n        return this;\n    }\n\n    unsubscribe(eventName: string = ''): this {\n        pubSub.unsubscribeEvent(this.compId, eventName);\n        return this;\n    }\n\n    unsubscribeAll(): this {\n        pubSub.unsubscribeAllEvent(this.compId);\n        return this;\n    }\n\n    publish(eventName: string = '', ...args: any[]): this {\n        pubSub.publishEvent(eventName, ...args);\n        return this;\n    }\n}\n\nexport default Binder;\n","import {\n    each,\n    throwErrorMessage,\n} from './util';\n\nexport default function postProcess(tasks: Function[]): void {\n    if (!tasks || !tasks.length) {\n        return;\n    }\n\n    each(tasks, (index: number, task: Function) => {\n        if (typeof task === 'function') {\n            try {\n                task();\n            } catch (err) {\n                throwErrorMessage(err, 'Error postProcess: ' + String(task));\n            }\n        }\n    });\n}\n","import * as config from './config';\nimport {extend} from './util';\nimport Binder from './binder';\n\nconst isSupportPromise = typeof window['Promise'] === 'function';\n\nlet bindingAttrs = config.bindingAttrs;\n\nconst use = (settings: any = {}): void => {\n    if (settings.bindingAttrs) {\n        bindingAttrs = extend(false, {}, settings.bindingAttrs);\n    }\n};\n\nconst init = ($rootElement: any, viewModel: any = null): any => {\n    if (!isSupportPromise) {\n        return console.warn('Browser not support Promise');\n    }\n    return new Binder($rootElement, viewModel, bindingAttrs);\n};\n\nexport default {\n    use: use,\n    init: init,\n    version: '@version@',\n};\n"],"names":["bindingAttrs","comp","tmp","text","click","dblclick","blur","focus","hover","input","change","submit","model","show","css","attr","forOf","if","switch","case","default","serverRenderedAttr","commentPrefix","commentSuffix","bindingDataReference","bindingUpdateConditions","maxDatakeyLength","constants","ONCE","hasIsArray","Array","isArray","REGEX","BAD_TAGS","FOR_OF","FUNCTION_PARAM","HTML_TAG","OBJECT_LITERAL","PIPE","WHITE_SPACES","LINE_BREAKS_TABS","IS_SUPPORT_TEMPLATE","document","createElement","WRAP_MAP","div","thead","col","tr","td","caption","colgroup","tbody","tfoot","th","obj","Object","prototype","toString","call","isJsObject","isPlainObject","ctor","constructor","prot","hasOwnProperty","isEmptyObject","getOwnPropertyNames","length","createHtmlFragment","htmlString","template","innerHTML","replace","removeBadTags","content","fragment","createDocumentFragment","queryContainer","firstTag","match","getFirstHtmlStringTag","wrap","createRange","createContextualFragment","insertAdjacentHTML","query","querySelector","firstChild","appendChild","getViewModelValue","viewModel","prop","split","filter","Boolean","every","step","undefined","def","setViewModelValue","value","_set","path","slice","reduce","a","c","i","Math","abs","Number","getViewModelPropValue","bindingCache","dataKey","paramList","parameters","isInvertBoolean","charAt","substring","ret","viewModelContext","resolveViewModelContext","oldViewModelProValue","elementData","viewModelPropValue","resolveParamList","args","concat","el","apply","filtersViewModelPropValue","filters","each","index","filterFn","err","throwErrorMessage","createDeferredObj","dfObj","promise","Promise","resolve","reject","extend","isDeepMerge","target","sources","source","shift","isMergebleObject","keys","forEach","key","_extends","fn","keysLength","isArrayObj","TypeError","item","cloneDomNode","element","cloneNode","insertAfter","parentNode","newNode","referenceNode","refNextElement","nextSibling","insertBefore","datakey","bindingDataContext","config","map","param","trim","emptyElement","node","removeChild","errorMessage","message","console","error","log","bindingAttrsMap","walkDOM","func","parseChildNode","firstElementChild","nextElementSibling","rootSkipCheck","tagName","defaultSkipCheck","hasAttribute","populateBindingCache","attrObj","type","attrValue","cacheData","filterList","isOnceIndex","v","isOnce","splice","extractFilterList","str","paramlist","params","getFunctionParameterList","push","createBindingCache","rootNode","skipCheck","isRenderedTemplate","window","Node","sourceObj","parseNode","skipNodeCheckFn","isSkipForOfChild","nodeType","hasAttributes","attributes","name","getAttributesObject","hasSkipChildParseBindings","checkSkipChildParseBindings","iterateList","createBindingOption","condition","opt","visualBindingOptions","templateBinding","textBinding","cssBinding","ifBinding","showBinding","modelBinding","attrBinding","forOfBinding","switchBinding","eventsBindingOptions","changeBinding","clickBinding","dblclickBinding","blurBinding","focusBinding","hoverBinding","inputBinding","submitBinding","serverRenderedOptions","updateOption","forceRender","reUnescapedHtml","reHasUnescapedHtml","RegExp","htmlEscapes","escapeHtmlChar","chr","cache","handlerName","modelDataKey","getAttribute","newValue","oldValue","APP","$root","$rootElement","contains","handlerFn","changeHandler","e","$this","this","isCheckbox","string","checked","test","currentTarget","removeEventListener","addEventListener","_bindingAttrs","_forceRender","isObjLiteralStr","isObjectLiteralString","vmAttrObj","parseBindingObjectString","objectLiteralString","keyVal","JSON","stringify","oldAttrObj","setAttribute","_value","removeAttribute","$domFragment","$templateRoot","$templateRootPrepend","$templateRootAppend","nestTemplatesCount","renderTemplate","elementCache","settings","parse","parseStringToJson","viewData","data","isAppend","append","isPrepend","prepend","$currentElement","$element","$index","htmlFragment","id","templateElement","getElementById","getTemplateString","childNodes","$nestedTemplates","querySelectorAll","nestedTemplatesLength","thisTemplateCache","afterTemplateRender","renderTemplatesBinding","ctx","updateElementCache","templateCache","isRenderedTemplates","applyBindingModule","renderIteration","iterationVm","isRegenerate","bindingUpdateOption","createClonedElementCache","bindingData","clonedElement","setCommentPrefix","dataKeyMarker","util","setDocRangeEndAfter","endTextContent","textContent","docRange","setEndBefore","wrapCommentAround","prefix","commentBegin","createComment","commentEnd","previousNonTemplateElement","previousSibling","nextNonTemplateElement","parentElement","removeElemnetsByCommentWrap","setStartBefore","deleteContents","insertRenderedElements","createIterationViewModel","iterationData","iterator","alias","generateForOfElements","iterationDataLength","iterationSize","clonedItem","iterationBindingCache","forExpMatch","renderForOfBinding","configBindingAttrs","renderIfBinding","isDomRemoved","commentStartTextContent","endCommentTag","isTargetDomRemoved","rootElement","removeIfBinding","hasIterationBindingCache","shouldRender","removeBindingInQueue","_a","postProcessQueue","parentRef","indexOf","newExpression","cases","childrenElements","children","elementLength","caseData","childElement","createCaseData","isDefault","hasMatch","j","casesLength","newCaseValue","removeUnmatchCases","matchedIndex","attrName","createEventBinding","handlerWrap","formData","$form","HTMLFormElement","FormData","getFormData","applyBinding","_ctx","currentInlineSytle","currentInlineDisplaySytle","shouldShow","oldShowStatus","displayStyle","computedStyle","style","display","computeStyle","getComputedStyle","getPropertyValue","setProperty","removeProperty","oldCssList","newCssList","vmCssListObj","vmCssListArray","isViewDataObject","isViewDataString","cssList","domCssList","classList","domCssListLength","arrayRemoveMatch","frommArray","k","_index","cssListString","join","isRadio","inputName","$radioGroup","radioGroupLength","inHandlerName","outHandlerName","handlers","onMouseEnterHandler","onMouseLeaveHandler","EVENTS","subscribeEvent","instance","eventName","compId","subscriber","isSubscribed","some","bind","unsubscribeEvent","subscribersLength","compIdIndex","Binder","initRendered","isServerRendered","render","debounceRaf","rafId","from","arguments","cancelAnimationFrame","requestAnimationFrame","_render","parseView","allCache","skipForOfParseFn","renderBindingOption","tasks","task","String","subscribe","pubSub","subscribeOnce","subscribeEventOnce","unsubscribe","unsubscribeAll","unsubscribeAllEvent","publish","publishEvent","isSupportPromise","use","init","warn","version"],"mappings":"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"}