{"version":3,"sources":["dataBind.min.js"],"names":["bindingAttrs","comp","tmp","text","click","dblclick","blur","focus","hover","change","submit","model","show","css","attr","forOf","if","switch","case","default","commentPrefix","bindingDataReference","bindingUpdateConditions","constants","ONCE","_","window","hasIsArray","Array","isArray","supportPromise","REGEX","IS_SUPPORT_TEMPLATE","document","createElement","WRAP_MAP","div","thead","col","tr","td","caption","colgroup","tbody","tfoot","th","obj","Object","prototype","toString","call","isJsObject","isPlainObject","ctor","constructor","prot","hasOwnProperty","isEmptyObject","getOwnPropertyNames","length","createHtmlFragment","htmlString","template","innerHTML","replace","removeBadTags","content","fragment","createDocumentFragment","queryContainer","firstTag","match","getFirstHtmlStringTag","wrap","createRange","createContextualFragment","insertAdjacentHTML","query","querySelector","firstChild","appendChild","getViewModelValue","viewModel","prop","get","getViewModelPropValue","bindingCache","dataKey","paramList","parameters","isInvertBoolean","charAt","substring","ret","viewModelContext","resolveViewModelContext","oldViewModelProValue","elementData","viewModelProValue","resolveParamList","args","concat","el","apply","Boolean","filtersViewModelPropValue","value","filters","each","index","filter","filterFn","err","throwErrorMessage","createDeferredObj","dfObj","promise","Promise","resolve","reject","$","Deferred","extend","isDeepMerge","target","sources","source","shift","undefined","isMergebleObject","keys","forEach","key","assign","fn","keysLength","isArrayObj","i","TypeError","item","insertAfter","parentNode","newNode","referenceNode","refNextElement","nextSibling","insertBefore","datakey","bindingDataContext","split","map","param","trim","emptyElement","node","removeChild","errorMessage","message","console","error","log","$domFragment","$templateRoot","nestTemplatesCount","templateCache","renderTemplate","cache","elementCache","settings","str","JSON","parse","parseStringToJson","viewData","data","isAppend","append","isPrepend","prepend","$currentElement","$element","$index","getAttribute","htmlFragment","id","templateData","templateString","templateElement","getElementById","variable","compileTemplate","childNodes","$nestedTemplates","querySelectorAll","nestedTemplatesLength","thisTemplateCache","push","afterTemplateRender","changeBinding","forceRender","handlerName","modelDataKey","newValue","oldValue","APP","$root","$rootElement","contains","handlerFn","changeHandler","e","isCheckbox","this","type","checked","escape","set","currentTarget","removeEventListener","addEventListener","bindingAttrsMap","walkDOM","func","parseChildNode","firstElementChild","nextElementSibling","rootSkipCheck","tagName","defaultSkipCheck","hasAttribute","populateBindingCache","attrObj","attrValue","cacheData","filterList","isOnceIndex","v","isOnce","splice","extractFilterList","paramlist","getFunctionParameterList","createBindingCache","rootNode","skipCheck","isRenderedTemplate","Node","sourceObj","reduce","parseNode","skipNodeCheckFn","isSkipForOfChild","nodeType","hasAttributes","slice","attributes","name","getAttributesObject","hasSkipChildParseBindings","checkSkipChildParseBindings","iterateList","createClonedElementCache","bindingData","clonedElement","cloneNode","setCommentPrefix","commentPrefix$1","dataKeyMarker","setDocRangeEndAfter","endTextContent","textContent","docRange","setEndBefore","wrapCommentAround","prefix","commentBegin","createComment","commentEnd","previousNonTemplateElement","previousSibling","nextNonTemplateElement","parentElement","removeElemnetsByCommentWrap","setStartBefore","deleteContents","insertRenderedElements","renderForOfBinding","bindingAttrs$1","iterationDataLength","iterationData","iterator","isRegenerate","iterationSize","removeAttribute","iterationBindingCache","iterationVm","createIterationViewModel","renderIteration","generateForOfElements","alias","clonedItem","renderIfBinding","isDomRemoved","commentStartTextContent","endCommentTag","isTargetDomRemoved","rootElement","removeIfBinding","hasIterationBindingCache","ifBinding","viewModelPropValue","shouldRender","removeBindingInQueue","postProcessQueue","indexOf","removeUnmatchCases","cases","matchedIndex","caseData","createCaseData","attrName","EVENTS","subscribeEvent","instance","eventName","compId","subscriber","isSubscribed","some","bind","unsubscribeEvent","subscribersLength","compIdIndex","Binder","[object Object]","initRendered","render","ctx","rafId","from","arguments","cancelAnimationFrame","requestAnimationFrame","debounceRaf","isServerRendered","parseView","updateElementCache","opt","allCache","skipForOfParseFn","isRenderedTemplates","updateOption","createBindingOption","renderTemplatesBinding","applyBinding","postProcess","forOfBinding","forExpMatch","attrBinding","oldAttrObj","vmAttrObj","stringify","setAttribute","showBinding","currentInlineSytle","currentInlineDisplaySytle","shouldShow","oldShowStatus","displayStyle","computedStyle","style","display","computeStyle","getComputedStyle","getPropertyValue","setProperty","removeProperty","switchBinding","newExpression","childrenElements","children","elementLength","isDefault","hasMatch","j","casesLength","newCaseValue","textBinding","cssBinding","oldCssList","newCssList","vmCssListObj","vmCssListArray","isViewDataObject","isViewDataString","cssList","domCssList","classList","domCssListLength","frommArray","k","a","join","modelBinding","isRadio","inputName","$radioGroup","radioGroupLength","submitBinding","createEventBinding","clickBinding","dblclickBinding","blurBinding","focusBinding","hoverBinding","inHandlerName","outHandlerName","handlers","onMouseEnterHandler","onMouseLeaveHandler","tasks","task","String","subscribeEventOnce","unsubscribeAllEvent","publishEvent","templateBinding","condition","visualBindingOptions","eventsBindingOptions","serverRenderedOptions","bindingUpdateOption","handlerWrap","formData","$form","HTMLFormElement","FormData","getFormData","templateSettings$1","evaluate","interpolate","dataBind","use","templateSettings","init","version"],"mappings":"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","file":"dataBind.min.js","sourcesContent":["/**\n * dataBind\n * version 1.9.0\n * By Adam Chow\n * link https://gogocat.github.io/dataBind/\n * license MIT\n * \n */\n\n(function () {\n    'use strict';\n\n    const bindingAttrs = {\n      comp: 'data-jq-comp',\n      tmp: 'data-jq-tmp',\n      text: 'data-jq-text',\n      click: 'data-jq-click',\n      dblclick: 'data-jq-dblclick',\n      blur: 'data-jq-blur',\n      focus: 'data-jq-focus',\n      hover: 'data-jq-hover',\n      change: 'data-jq-change',\n      submit: 'data-jq-submit',\n      model: 'data-jq-model',\n      show: 'data-jq-show',\n      css: 'data-jq-css',\n      attr: 'data-jq-attr',\n      forOf: 'data-jq-for',\n      if: 'data-jq-if',\n      switch: 'data-jq-switch',\n      case: 'data-jq-case',\n      default: 'data-jq-default'\n    };\n    const serverRenderedAttr = 'data-server-rendered';\n    const dataIndexAttr = 'data-index';\n    const commentPrefix = {\n      forOf: 'data-forOf_',\n      if: 'data-if_',\n      case: 'data-case_',\n      default: 'data-default_'\n    };\n    const commentSuffix = '_end'; // global setting of underscore template inteprolate default token\n\n    const templateSettings = {\n      evaluate: /<%([\\s\\S]+?)%>/g,\n      interpolate: /\\{\\{=(.+?)\\}\\}/g,\n      escape: /\\{\\{(.+?)\\}\\}/g\n    };\n    const bindingDataReference = {\n      rootDataKey: '$root',\n      currentData: '$data',\n      currentIndex: '$index',\n      mouseEnterHandlerName: 'in',\n      mouseLeaveHandlerName: 'out'\n    };\n    const bindingUpdateConditions = {\n      serverRendered: 'SERVER-RENDERED',\n      init: 'INIT'\n    }; // maximum string length before running regex\n\n    const maxDatakeyLength = 50;\n    const constants = {\n      filters: {\n        ONCE: 'once'\n      },\n      PARENT_REF: '_parent'\n    };\n\n    _ = window._ || {};\n    const hasIsArray = Array.isArray;\n    const supportPromise = typeof window['Promise'] === 'function';\n    const REGEX = {\n      FUNCTIONPARAM: /\\((.*?)\\)/,\n      WHITESPACES: /\\s+/g,\n      FOROF: /(.*?)\\s+(?:in|of)\\s+(.*)/,\n      PIPE: /\\|/,\n      HTML_TAG: /^[\\s]*<([a-z][^\\/\\s>]+)/i,\n      BAG_TAGS: /<(script|del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/ig\n    };\n    const IS_SUPPORT_TEMPLATE = ('content' in document.createElement('template'));\n    const WRAP_MAP = {\n      div: ['div', '<div>', '</div>'],\n      thead: ['table', '<table>', '</table>'],\n      col: ['colgroup', '<table><colgroup>', '</colgroup></table>'],\n      tr: ['tbody', '<table><tbody>', '</tbody></table>'],\n      td: ['tr', '<table><tr>', '</tr></table>']\n    };\n    WRAP_MAP.caption = WRAP_MAP.colgroup = WRAP_MAP.tbody = WRAP_MAP.tfoot = WRAP_MAP.thead;\n    WRAP_MAP.th = WRAP_MAP.td;\n\n    const isArray = obj => {\n      return hasIsArray ? Array.isArray(obj) : Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    const isJsObject = obj => {\n      return obj !== null && typeof obj === 'object' && Object.prototype.toString.call(obj) === '[object Object]';\n    };\n\n    const isPlainObject = obj => {\n      if (!isJsObject(obj)) {\n        return false;\n      } // If has modified constructor\n\n\n      const ctor = obj.constructor;\n      if (typeof ctor !== 'function') return false; // If has modified prototype\n\n      const prot = ctor.prototype;\n      if (isJsObject(prot) === false) return false; // If constructor does not have an Object-specific method\n\n      if (prot.hasOwnProperty('isPrototypeOf') === false) {\n        return false;\n      } // Most likely a plain Object\n\n\n      return true;\n    };\n\n    const isEmptyObject = obj => {\n      if (isJsObject(obj)) {\n        return Object.getOwnPropertyNames(obj).length === 0;\n      }\n\n      return false;\n    };\n\n    function getFirstHtmlStringTag(htmlString) {\n      const match = htmlString.match(REGEX.HTML_TAG);\n\n      if (match) {\n        return match[1];\n      }\n\n      return null;\n    }\n\n    function removeBadTags(htmlString = '') {\n      return htmlString.replace(REGEX.BAG_TAGS, '');\n    }\n\n    function createHtmlFragment(htmlString) {\n      if (typeof htmlString !== 'string') {\n        return null;\n      } // use template element\n\n\n      if (IS_SUPPORT_TEMPLATE) {\n        const template = document.createElement('template');\n        template.innerHTML = removeBadTags(htmlString);\n        return template.content;\n      } // use document fragment with wrap html tag for tr, td etc.\n\n\n      const fragment = document.createDocumentFragment();\n      const queryContainer = document.createElement('div');\n      const firstTag = getFirstHtmlStringTag(htmlString);\n      const wrap = WRAP_MAP[firstTag || 'div'];\n\n      if (wrap[0] === 'div') {\n        return document.createRange().createContextualFragment(htmlString);\n      }\n\n      queryContainer.insertAdjacentHTML('beforeend', `${wrap[1]}${htmlString}${wrap[2]}`);\n      const query = queryContainer.querySelector(wrap[0]);\n\n      while (query.firstChild) {\n        fragment.appendChild(query.firstChild);\n      }\n\n      return fragment;\n    }\n    /**\r\n     * getViewModelValue\r\n     * @description walk a object by provided string path. eg 'a.b.c'\r\n     * @param {object} viewModel\r\n     * @param {string} prop\r\n     * @return {object}\r\n     */\n\n\n    const getViewModelValue = (viewModel, prop) => {\n      return _.get(viewModel, prop);\n    };\n    /**\r\n     * setViewModelValue\r\n     * @description populate viewModel object by path string\r\n     * @param {object} obj\r\n     * @param {string} prop\r\n     * @param {string} value\r\n     * @return {call} underscore set\r\n     */\n\n\n    const setViewModelValue = (obj, prop, value) => {\n      return _.set(obj, prop, value);\n    };\n\n    const getViewModelPropValue = (viewModel, bindingCache) => {\n      let dataKey = bindingCache.dataKey;\n      let paramList = bindingCache.parameters;\n      const isInvertBoolean = dataKey.charAt(0) === '!';\n\n      if (isInvertBoolean) {\n        dataKey = isInvertBoolean ? dataKey.substring(1) : dataKey;\n      }\n\n      let ret = getViewModelValue(viewModel, dataKey);\n\n      if (typeof ret === 'function') {\n        const viewModelContext = resolveViewModelContext(viewModel, dataKey);\n        const oldViewModelProValue = bindingCache.elementData ? bindingCache.elementData.viewModelProValue : null;\n        paramList = paramList ? resolveParamList(viewModel, paramList) : []; // let args = [oldViewModelProValue, bindingCache.el].concat(paramList);\n\n        const args = paramList.concat([oldViewModelProValue, bindingCache.el]);\n        ret = ret.apply(viewModelContext, args);\n      }\n\n      ret = isInvertBoolean ? !Boolean(ret) : ret; // call through fitlers to get final value\n\n      ret = filtersViewModelPropValue({\n        value: ret,\n        viewModel: viewModel,\n        bindingCache: bindingCache\n      });\n      return ret;\n    };\n\n    const filtersViewModelPropValue = ({\n      value,\n      viewModel,\n      bindingCache\n    }) => {\n      let ret = value;\n\n      if (bindingCache.filters) {\n        each(bindingCache.filters, (index, filter) => {\n          const viewModelContext = resolveViewModelContext(viewModel, filter);\n          const filterFn = getViewModelValue.call(viewModelContext, viewModelContext, filter);\n\n          try {\n            ret = filterFn.call(viewModelContext, ret);\n          } catch (err) {\n            throwErrorMessage(err, `Invalid filter: ${filter}`);\n          }\n        });\n      }\n\n      return ret;\n    };\n\n    const parseStringToJson = str => {\n      // fix unquote or single quote keys and replace single quote to double quote\n      const ret = str.replace(/(\\s*?{\\s*?|\\s*?,\\s*?)(['\"])?([a-zA-Z0-9]+)(['\"])?:/g, '$1\"$3\":').replace(/'/g, '\"');\n      return JSON.parse(ret);\n    };\n    /**\r\n     * arrayRemoveMatch\r\n     * @description remove match items in fromArray out of toArray\r\n     * @param {array} toArray\r\n     * @param {array} frommArray\r\n     * @return {boolean}\r\n     */\n\n\n    const arrayRemoveMatch = (toArray, frommArray) => {\n      return toArray.filter((value, index) => {\n        return frommArray.indexOf(value) < 0;\n      });\n    };\n\n    const getFormData = $form => {\n      const data = {};\n\n      if (!$form instanceof HTMLFormElement) {\n        return data;\n      }\n\n      const formData = new FormData($form);\n      formData.forEach((value, key) => {\n        if (!Object.prototype.hasOwnProperty.call(Object, key)) {\n          data[key] = value;\n          return;\n        }\n\n        if (!Array.isArray(data[key])) {\n          data[key] = [data[key]];\n        }\n\n        data[key].push(value);\n      });\n      return data;\n    };\n    /**\r\n     * getFunctionParameterList\r\n     * @description convert parameter string to arrary\r\n     * eg. '(\"a\",\"b\",\"c\")' > [\"a\",\"b\",\"c\"]\r\n     * @param {string} str\r\n     * @return {array} paramlist\r\n     */\n\n\n    const getFunctionParameterList = str => {\n      if (!str || str.length > maxDatakeyLength) {\n        return;\n      }\n\n      let paramlist = str.match(REGEX.FUNCTIONPARAM);\n\n      if (paramlist && paramlist[1]) {\n        paramlist = paramlist[1].split(',');\n        paramlist.forEach(function (v, i) {\n          paramlist[i] = v.trim();\n        });\n      }\n\n      return paramlist;\n    };\n\n    const extractFilterList = cacheData => {\n      if (!cacheData || !cacheData.dataKey || cacheData.dataKey.length > maxDatakeyLength) {\n        return cacheData;\n      }\n\n      const filterList = cacheData.dataKey.split(REGEX.PIPE);\n      let isOnceIndex;\n      cacheData.dataKey = filterList[0].trim();\n\n      if (filterList.length > 1) {\n        filterList.shift(0);\n        filterList.forEach(function (v, i) {\n          filterList[i] = v.trim();\n\n          if (filterList[i] === constants.filters.ONCE) {\n            cacheData.isOnce = true;\n            isOnceIndex = i;\n          }\n        }); // don't store filter 'once' - because it is internal logic not a property from viewModel\n\n        if (isOnceIndex >= 0) {\n          filterList.splice(isOnceIndex, 1);\n        }\n\n        cacheData.filters = filterList;\n      }\n\n      return cacheData;\n    };\n\n    const invertObj = sourceObj => {\n      return Object.keys(sourceObj).reduce(function (obj, key) {\n        obj[sourceObj[key]] = key;\n        return obj;\n      }, {});\n    };\n\n    const createDeferredObj = () => {\n      let dfObj = {};\n\n      if (supportPromise) {\n        dfObj.promise = new Promise((resolve, reject) => {\n          dfObj.resolve = resolve;\n          dfObj.reject = reject;\n        });\n      } else {\n        dfObj = $.Deferred(); // eslint-disable-line new-cap\n      }\n\n      return dfObj;\n    };\n    /**\r\n     * debounce\r\n     * @description decorate a function to be debounce using requestAnimationFrame\r\n     * @param {function} fn\r\n     * @param {context} ctx\r\n     * @return {function}\r\n     */\n\n\n    const debounceRaf = (fn, ctx = null) => {\n      return function (fn, ctx) {\n        let dfObj = createDeferredObj();\n        let rafId = 0; // return decorated fn\n\n        return function () {\n          /* eslint-disable prefer-rest-params */\n          const args = Array.from ? Array.from(arguments) : Array.prototype.slice.call(arguments);\n          window.cancelAnimationFrame(rafId);\n          rafId = window.requestAnimationFrame(() => {\n            try {\n              // fn is Binder.render function\n              fn.apply(ctx, args); // dfObj.resolve is function provided in .then promise chain\n              // ctx is the current component\n\n              dfObj.resolve(ctx);\n            } catch (err) {\n              console.error('error in rendering: ', err);\n              dfObj.reject(err);\n            } // reset dfObj - otherwise then callbacks will not be in execution order\n            // example:\n            // myApp.render().then(function(){console.log('ok1')});\n            // myApp.render().then(function(){console.log('ok2')});\n            // myApp.render().then(function(){console.log('ok3')});\n            // >> ok1, ok2, ok3\n\n\n            dfObj = createDeferredObj();\n            window.cancelAnimationFrame(rafId);\n          });\n          /* eslint-enable prefer-rest-params */\n\n          return supportPromise ? dfObj.promise : dfObj.promise();\n        };\n      }(fn, ctx);\n    };\n    /**\r\n     * extend\r\n     * @param {boolean} isDeepMerge\r\n     * @param {object} target\r\n     * @param {object} sources\r\n     * @return {object} merged object\r\n     */\n\n\n    const extend = (isDeepMerge = false, target, ...sources) => {\n      if (!sources.length) {\n        return target;\n      }\n\n      const source = sources.shift();\n\n      if (source === undefined) {\n        return target;\n      }\n\n      if (!isDeepMerge) {\n        return Object.assign(target, ...sources);\n      }\n\n      if (isMergebleObject(target) && isMergebleObject(source)) {\n        Object.keys(source).forEach(key => {\n          if (isMergebleObject(source[key])) {\n            if (!target[key]) {\n              target[key] = {};\n            }\n\n            extend(target[key], source[key]);\n          } else {\n            target[key] = source[key];\n          }\n        });\n      }\n\n      return extend(true, target, ...sources);\n    };\n\n    const each = (obj, fn) => {\n      if (typeof obj !== 'object' || typeof fn !== 'function') {\n        return;\n      }\n\n      let keys = [];\n      let keysLength = 0;\n      const isArrayObj = isArray(obj);\n      let key;\n      let value;\n      let i = 0;\n\n      if (isArrayObj) {\n        keysLength = obj.length;\n      } else if (isJsObject(obj)) {\n        keys = Object.keys(obj);\n        keysLength = keys.length;\n      } else {\n        throw new TypeError('Object is not an array or object');\n      }\n\n      for (i = 0; i < keysLength; i += 1) {\n        if (isArrayObj) {\n          key = i;\n          value = obj[i];\n        } else {\n          key = keys[i];\n          value = obj[key];\n        }\n\n        fn(key, value);\n      }\n    };\n\n    const isMergebleObject = item => {\n      return isJsObject(item) && !isArray(item);\n    };\n    /**\r\n     * cloneDomNode\r\n     * @param {object} element\r\n     * @return {object} cloned element\r\n     * @description helper function to clone node\r\n     */\n\n\n    const cloneDomNode = element => {\n      return element.cloneNode(true);\n    };\n    /**\r\n     * insertAfter\r\n     * @param {object} parentNode\r\n     * @param {object} newNode\r\n     * @param {object} referenceNode\r\n     * @return {object} node\r\n     * @description helper function to insert new node before the reference node\r\n     */\n\n\n    const insertAfter = (parentNode, newNode, referenceNode) => {\n      const refNextElement = referenceNode && referenceNode.nextSibling ? referenceNode.nextSibling : null;\n      return parentNode.insertBefore(newNode, refNextElement);\n    };\n\n    const resolveViewModelContext = (viewModel, datakey) => {\n      let ret = viewModel;\n\n      if (typeof datakey !== 'string') {\n        return ret;\n      }\n\n      const bindingDataContext = datakey.split('.');\n\n      if (bindingDataContext.length > 1) {\n        if (bindingDataContext[0] === bindingDataReference.rootDataKey) {\n          ret = viewModel[bindingDataReference.rootDataKey] || viewModel;\n        } else if (bindingDataContext[0] === bindingDataReference.currentData) {\n          ret = viewModel[bindingDataReference.currentData] || viewModel;\n        }\n      }\n\n      return ret;\n    };\n\n    const resolveParamList = (viewModel, paramList) => {\n      if (!viewModel || !isArray(paramList)) {\n        return;\n      }\n\n      return paramList.map(param => {\n        param = param.trim();\n\n        if (param === bindingDataReference.currentIndex) {\n          // convert '$index' to value\n          param = viewModel[bindingDataReference.currentIndex];\n        } else if (param === bindingDataReference.currentData) {\n          // convert '$data' to value or current viewModel\n          param = viewModel[bindingDataReference.currentData] || viewModel;\n        } else if (param === bindingDataReference.rootDataKey) {\n          // convert '$root' to root viewModel\n          param = viewModel[bindingDataReference.rootDataKey] || viewModel;\n        }\n\n        return param;\n      });\n    };\n\n    const removeElement = el => {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    };\n\n    const emptyElement = node => {\n      if (node && node.firstChild) {\n        while (node.firstChild) {\n          node.removeChild(node.firstChild);\n        }\n      }\n\n      return node;\n    };\n\n    const throwErrorMessage = (err = null, errorMessage = '') => {\n      const message = err && err.message ? err.message : errorMessage;\n\n      if (typeof console.error === 'function') {\n        return console.error(message);\n      }\n\n      return console.log(message);\n    };\n\n    let $domFragment = null;\n    let $templateRoot = null;\n    let nestTemplatesCount = 0;\n    const templateCache = {};\n    /**\r\n     * compileTemplate\r\n     * @description compile underscore template and store in templateCache\r\n     * @param {string} id\r\n     * @param {object} templateData\r\n     * @return {string} rendered html string\r\n     */\n\n    const compileTemplate = (id, templateData = null) => {\n      let templateString;\n      let templateElement;\n\n      if (!templateCache[id]) {\n        templateElement = document.getElementById(id);\n        templateString = templateElement ? templateElement.innerHTML : '';\n        templateCache[id] = _.template(templateString, {\n          variable: 'data'\n        });\n      }\n\n      return templateCache[id](templateData);\n    };\n    /**\r\n     * renderTemplate\r\n     * @description\r\n     * get template setting from DOM attribute then call compileTemplate\r\n     * to render and append to target DOM\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     * @param {object} elementCache\r\n     */\n\n\n    const renderTemplate = (cache, viewModel, bindingAttrs, elementCache) => {\n      const settings = typeof cache.dataKey === 'string' ? parseStringToJson(cache.dataKey) : cache.dataKey;\n      let viewData = settings.data;\n      const isAppend = settings.append;\n      const isPrepend = settings.prepend;\n      let $currentElement;\n      cache.dataKey = settings;\n      viewData = typeof viewData === 'undefined' || viewData === '$root' ? viewModel : getViewModelPropValue(viewModel, {\n        dataKey: settings.data,\n        parameters: cache.parameters\n      });\n\n      if (!viewData) {\n        return;\n      }\n\n      const $element = cache.el;\n      const $index = typeof viewModel.$index !== 'undefined' ? viewModel.$index : $element.getAttribute(dataIndexAttr);\n\n      if (typeof $index !== 'undefined') {\n        viewData.$index = $index;\n      }\n\n      $domFragment = $domFragment || document.createDocumentFragment();\n      $templateRoot = $templateRoot || $element;\n      const htmlString = compileTemplate(settings.id, viewData);\n      const htmlFragment = createHtmlFragment(htmlString); // append rendered html\n\n      if (!$domFragment.childNodes.length) {\n        // domFragment should be empty in first run\n        $currentElement = $domFragment; // copy of $domFragment for later find nested template check\n\n        $domFragment.appendChild(htmlFragment);\n      } else {\n        // during recursive run keep append to current fragment\n        $currentElement = $element; // reset to current nested template element\n\n        if (!isAppend && !isPrepend) {\n          $currentElement = emptyElement($currentElement);\n        }\n\n        if (isPrepend) {\n          $currentElement.insertBefore(htmlFragment, $currentElement.firstChild);\n        } else {\n          $currentElement.appendChild(htmlFragment);\n        }\n      } // check if there are nested template then recurisive render them\n\n\n      const $nestedTemplates = $currentElement.querySelectorAll('[' + bindingAttrs.tmp + ']');\n      const nestedTemplatesLength = $nestedTemplates.length;\n\n      if (nestedTemplatesLength) {\n        nestTemplatesCount += nestedTemplatesLength;\n\n        for (let i = 0; i < nestedTemplatesLength; i += 1) {\n          const thisTemplateCache = {\n            el: $nestedTemplates[i],\n            dataKey: $nestedTemplates[i].getAttribute(bindingAttrs.tmp)\n          };\n          elementCache[bindingAttrs.tmp].push(thisTemplateCache); // recursive template render\n\n          renderTemplate(thisTemplateCache, viewModel, bindingAttrs, elementCache);\n          nestTemplatesCount -= 1;\n        }\n      } // no more nested tempalted to render, start to append $domFragment into $templateRoot\n\n\n      if (nestTemplatesCount === 0) {\n        // append to DOM once\n        if (!isAppend && !isPrepend) {\n          $templateRoot = emptyElement($templateRoot);\n        }\n\n        if (isPrepend) {\n          $templateRoot.insertBefore($domFragment, $templateRoot.firstChild);\n        } else {\n          $templateRoot.appendChild($domFragment);\n        } // clear cached fragment\n\n\n        $domFragment = $templateRoot = null; // trigger callback if provided\n\n        if (typeof viewModel.afterTemplateRender === 'function') {\n          viewModel.afterTemplateRender(viewData);\n        }\n      }\n    };\n\n    /* eslint-disable no-invalid-this */\n    /**\r\n     * blurBinding\r\n     * DOM decleartive on blur event binding\r\n     * event handler bind to viewModel method according to the DOM attribute\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     * @param {boolean} forceRender\r\n     */\n\n    const hoverBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const handlerName = cache.dataKey;\n      let paramList = cache.parameters;\n      const inHandlerName = bindingDataReference.mouseEnterHandlerName;\n      const outHandlerName = bindingDataReference.mouseLeaveHandlerName;\n      let viewModelContext;\n      const APP = viewModel.APP || viewModel.$root.APP;\n      cache.elementData = cache.elementData || {}; // TODO: check what is APP.$rootElement.contains(cache.el)\n\n      if (!handlerName || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      const handlers = getViewModelValue(viewModel, handlerName);\n\n      if (handlers && typeof handlers[inHandlerName] === 'function' && typeof handlers[outHandlerName] === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        function onMouseEnterHandler(e) {\n          const args = [e, cache.el].concat(paramList);\n          handlers[inHandlerName].apply(viewModelContext, args);\n        }\n\n        function onMouseLeaveHandler(e) {\n          const args = [e, cache.el].concat(paramList);\n          handlers[outHandlerName].apply(viewModelContext, args);\n        }\n\n        cache.el.removeEventListener('mouseenter', onMouseEnterHandler, false);\n        cache.el.removeEventListener('mouseleave', onMouseLeaveHandler, false);\n        cache.el.addEventListener('mouseenter', onMouseEnterHandler, false);\n        cache.el.addEventListener('mouseleave', onMouseLeaveHandler, false);\n      }\n    };\n\n    /* eslint-disable no-invalid-this */\n    /**\r\n     * changeBinding\r\n     * @description input element on change event binding. DOM -> viewModel update\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     * @param {boolean} forceRender\r\n     */\n\n    const changeBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const handlerName = cache.dataKey;\n      let paramList = cache.parameters;\n      const modelDataKey = cache.el.getAttribute(bindingAttrs.model);\n      let newValue = '';\n      let oldValue = '';\n      let viewModelContext;\n      const APP = viewModel.APP || viewModel.$root.APP;\n\n      if (!handlerName || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      const handlerFn = getViewModelValue(viewModel, handlerName);\n\n      if (typeof handlerFn === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        function changeHandler(e) {\n          const $this = this;\n          const isCheckbox = $this.type === 'checkbox';\n          newValue = isCheckbox ? $this.checked : _.escape($this.value); // set data to viewModel\n\n          if (modelDataKey) {\n            oldValue = getViewModelValue(viewModel, modelDataKey);\n            setViewModelValue(viewModel, modelDataKey, newValue);\n          }\n\n          const args = [e, e.currentTarget, newValue, oldValue].concat(paramList);\n          handlerFn.apply(viewModelContext, args);\n          oldValue = newValue;\n        } // assing on change event\n\n\n        cache.el.removeEventListener('change', changeHandler, false);\n        cache.el.addEventListener('change', changeHandler, false);\n      }\n    };\n\n    /**\r\n     * modelBinding\r\n     * @description input element data binding. viewModel -> DOM update\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     * @param {boolean} forceRender\r\n     */\n\n    const modelBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const dataKey = cache.dataKey;\n      let newValue = '';\n      const APP = viewModel.APP || viewModel.$root.APP;\n\n      if (!dataKey || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      newValue = getViewModelValue(viewModel, dataKey);\n\n      if (typeof newValue !== 'undefined' && newValue !== null) {\n        const $element = cache.el;\n        const isCheckbox = $element.type === 'checkbox';\n        const isRadio = $element.type === 'radio';\n        const inputName = $element.name;\n        const $radioGroup = isRadio ? APP.$rootElement.querySelectorAll(`input[name=\"${inputName}\"]`) : [];\n        const oldValue = isCheckbox ? $element.checked : $element.value; // update element value\n\n        if (newValue !== oldValue) {\n          if (isCheckbox) {\n            $element.checked = Boolean(newValue);\n          } else if (isRadio) {\n            let i = 0;\n            const radioGroupLength = $radioGroup.length;\n\n            for (i = 0; i < radioGroupLength; i += 1) {\n              if ($radioGroup[i].value === newValue) {\n                $radioGroup[i].checked = true;\n                break;\n              }\n            }\n          } else {\n            $element.value = newValue;\n          }\n        }\n      }\n    };\n\n    /**\r\n     * textBinding\r\n     * * @description\r\n     * DOM decleartive text binding update dom textnode with viewModel data\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     * @param {boolean} forceRender\r\n     */\n\n    const textBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const dataKey = cache.dataKey;\n      const APP = viewModel.APP || viewModel.$root.APP; // NOTE: this doesn't work for for-of, if and switch bindings because element was not in DOM\n\n      if (!dataKey || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      const newValue = getViewModelPropValue(viewModel, cache);\n      const oldValue = cache.el.textContent;\n\n      if (typeof newValue !== 'undefined' && typeof newValue !== 'object' && newValue !== null) {\n        if (newValue !== oldValue) {\n          cache.el.textContent = newValue;\n        }\n      }\n    };\n\n    /**\r\n     * showBinding\r\n     * @description\r\n     * DOM decleartive show binding. Make binding show/hide according to viewModel data (boolean)\r\n     * viewModel data can function but must return boolean\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     */\n\n    const showBinding = (cache, viewModel, bindingAttrs) => {\n      const dataKey = cache.dataKey;\n      let currentInlineSytle = {};\n      let currentInlineDisplaySytle = '';\n      let shouldShow = true;\n\n      if (!dataKey) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      const oldShowStatus = cache.elementData.viewModelPropValue; // store current element display default style once only\n\n      if (typeof cache.elementData.displayStyle === 'undefined' || typeof cache.elementData.computedStyle === 'undefined') {\n        currentInlineSytle = cache.el.style;\n        currentInlineDisplaySytle = currentInlineSytle.display; // use current inline style if defined\n\n        if (currentInlineDisplaySytle) {\n          // set to 'block' if is 'none'\n          cache.elementData.displayStyle = currentInlineDisplaySytle === 'none' ? 'block' : currentInlineDisplaySytle;\n          cache.elementData.computedStyle = null;\n        } else {\n          const computeStyle = window.getComputedStyle(cache.el, null).getPropertyValue('display');\n          cache.elementData.displayStyle = null;\n          cache.elementData.computedStyle = computeStyle;\n        }\n      }\n\n      shouldShow = getViewModelPropValue(viewModel, cache); // treat undefined || null as false.\n      // eg if property doesn't exsits in viewModel, it will treat as false to hide element\n\n      shouldShow = Boolean(shouldShow); // reject if nothing changed\n\n      if (oldShowStatus === shouldShow) {\n        return;\n      }\n\n      if (!shouldShow) {\n        if (cache.el.style.display !== 'none') {\n          cache.el.style.setProperty('display', 'none');\n        }\n      } else {\n        if (cache.elementData.computedStyle || cache.el.style.display === 'none') {\n          if (cache.elementData.computedStyle === 'none') {\n            // default display is none in css rule, so use display 'block'\n            cache.el.style.setProperty('display', 'block');\n          } else {\n            // has default displayable type so just remove inline display 'none'\n            if (currentInlineSytle.length > 1) {\n              cache.el.style.removeProperty('display');\n            } else {\n              cache.el.removeAttribute('style');\n            }\n          }\n        } else {\n          // element default display was inline style, so restore it\n          cache.el.style.setProperty('display', cache.elementData.displayStyle);\n        }\n      } // store new show status\n\n\n      cache.elementData.viewModelPropValue = shouldShow;\n    };\n\n    /**\r\n     * cssBinding\r\n     * @description\r\n     * DOM decleartive css binding. update classlist.\r\n     * viewModel data can function but must return JSOL.\r\n     * added css class if value is true\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     * @param {boolean} forceRender\r\n     */\n\n    const cssBinding = (cache, viewModel, bindingAttrs, forceRender) => {\n      const dataKey = cache.dataKey;\n      const APP = viewModel.APP || viewModel.$root.APP;\n\n      if (!dataKey || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      cache.elementData.viewModelPropValue = cache.elementData.viewModelPropValue || '';\n      const oldCssList = cache.elementData.viewModelPropValue;\n      let newCssList = '';\n      const vmCssListObj = getViewModelPropValue(viewModel, cache);\n      let vmCssListArray = [];\n      let isViewDataObject = false;\n      let isViewDataString = false;\n      let cssList = [];\n\n      if (typeof vmCssListObj === 'string') {\n        isViewDataString = true;\n      } else if (isPlainObject(vmCssListObj)) {\n        isViewDataObject = true;\n      } else {\n        // reject if vmCssListObj is not an object or string\n        return;\n      }\n\n      if (isViewDataObject) {\n        newCssList = JSON.stringify(vmCssListObj);\n      } else {\n        newCssList = vmCssListObj.replace(/\\s\\s+/g, ' ').trim();\n        vmCssListArray = newCssList.split(' ');\n      } // reject if nothing changed\n\n\n      if (oldCssList === newCssList) {\n        return;\n      } // get current css classes from element\n\n\n      const domCssList = cache.el.classList; // clone domCssList as new array\n\n      const domCssListLength = domCssList.length;\n\n      for (let i = 0; i < domCssListLength; i += 1) {\n        cssList.push(domCssList[i]);\n      }\n\n      if (isViewDataObject) {\n        each(vmCssListObj, function (k, v) {\n          const i = cssList.indexOf(k);\n\n          if (v === true) {\n            cssList.push(k);\n          } else if (i !== -1) {\n            cssList.splice(i, 1);\n          }\n        });\n      } else if (isViewDataString) {\n        // remove oldCssList items from cssList\n        cssList = arrayRemoveMatch(cssList, oldCssList);\n        cssList = cssList.concat(vmCssListArray);\n      } // unique cssList array\n\n\n      cssList = cssList.filter((v, i, a) => {\n        return a.indexOf(v) === i;\n      });\n      cssList = cssList.join(' '); // update element data\n\n      cache.elementData.viewModelPropValue = newCssList; // replace all css classes\n\n      cache.el.setAttribute('class', cssList);\n    };\n\n    /**\r\n     * attrBinding\r\n     * @description\r\n     * DOM decleartive attr binding. update elenment attributes\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     */\n\n    const attrBinding = (cache, viewModel, bindingAttrs) => {\n      const dataKey = cache.dataKey;\n\n      if (!dataKey) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      cache.elementData.viewModelProValue = cache.elementData.viewModelProValue || {};\n      const oldAttrObj = cache.elementData.viewModelProValue;\n      const vmAttrObj = getViewModelPropValue(viewModel, cache);\n\n      if (!isPlainObject(vmAttrObj)) {\n        return;\n      } // reject if nothing changed\n\n\n      if (JSON.stringify(oldAttrObj) === JSON.stringify(vmAttrObj)) {\n        return;\n      } // reset old data and update it\n\n\n      cache.elementData.viewModelProValue = {};\n\n      if (isEmptyObject(oldAttrObj)) {\n        each(vmAttrObj, (key, value) => {\n          cache.el.setAttribute(key, value); // populate with vmAttrObj data\n\n          cache.elementData.viewModelProValue[key] = value;\n        });\n      } else {\n        each(oldAttrObj, (key, value) => {\n          if (typeof vmAttrObj[key] === 'undefined') {\n            // remove attribute if not present in current vm\n            cache.el.removeAttribute(key);\n          }\n        });\n        each(vmAttrObj, (key, value) => {\n          if (oldAttrObj[key] !== vmAttrObj[key]) {\n            // update attribute if value changed\n            cache.el.setAttribute(key, vmAttrObj[key]);\n          } // populate with vmAttrObj data\n\n\n          cache.elementData.viewModelProValue[key] = value;\n        });\n      }\n    };\n\n    let bindingAttrsMap;\n    /**\r\n     * walkDOM\r\n     * @description by Douglas Crockford - walk each DOM node and calls provided callback function\r\n     * start walk from firstChild\r\n     * @param {object} node\r\n     * @param {function} func\r\n     */\n\n    const walkDOM = (node, func) => {\n      let parseChildNode = true;\n      node = node.firstElementChild;\n\n      while (node) {\n        parseChildNode = func(node);\n\n        if (parseChildNode) {\n          walkDOM(node, func);\n        }\n\n        node = node.nextElementSibling;\n      }\n    };\n\n    const getAttributesObject = node => {\n      const ret = {};\n      Array.prototype.slice.call(node.attributes).forEach(item => {\n        ret[item.name] = item.value;\n      });\n      return ret;\n    };\n\n    const checkSkipChildParseBindings = (attrObj = {}, bindingAttrs) => {\n      return [bindingAttrs.forOf, bindingAttrs.if, bindingAttrs.case, bindingAttrs.default].filter(type => {\n        return typeof attrObj[type] !== 'undefined';\n      });\n    };\n\n    const rootSkipCheck = node => {\n      return node.tagName === 'SVG';\n    };\n\n    const defaultSkipCheck = (node, bindingAttrs) => {\n      return node.tagName === 'SVG' || node.hasAttribute(bindingAttrs.comp);\n    };\n\n    const populateBindingCache = ({\n      node,\n      attrObj,\n      bindingCache,\n      type\n    }) => {\n      let attrValue;\n      let cacheData;\n\n      if (bindingAttrsMap && bindingAttrsMap[type] && typeof attrObj[type] !== 'undefined') {\n        bindingCache[type] = bindingCache[type] || [];\n        attrValue = attrObj[type].trim();\n        cacheData = {\n          el: node,\n          dataKey: attrValue\n        }; // populate cacheData.filters. update filterList first item as dataKey\n\n        cacheData = extractFilterList(cacheData); // populate cacheData.parameters\n        // for store function call parameters eg. '$index', '$root'\n        // useful with DOM for-loop template as reference to binding data\n\n        const paramList = getFunctionParameterList(cacheData.dataKey);\n\n        if (paramList) {\n          cacheData.parameters = paramList;\n          cacheData.dataKey = cacheData.dataKey.replace(REGEX.FUNCTIONPARAM, '').trim();\n        } // store parent array reference to cacheData\n\n\n        cacheData[constants.PARENT_REF] = bindingCache[type];\n        bindingCache[type].push(cacheData);\n      }\n\n      return bindingCache;\n    };\n\n    const createBindingCache = ({\n      rootNode = null,\n      bindingAttrs = {},\n      skipCheck,\n      isRenderedTemplate = false\n    }) => {\n      let bindingCache = {};\n\n      if (!rootNode instanceof window.Node) {\n        throw new TypeError('walkDOM: Expected a DOM node');\n      }\n\n      bindingAttrsMap = bindingAttrsMap || invertObj(bindingAttrs);\n\n      const parseNode = (node, skipNodeCheckFn = defaultSkipCheck) => {\n        let isSkipForOfChild = false;\n\n        if (node.nodeType !== 1 || !node.hasAttributes()) {\n          return true;\n        }\n\n        if (skipNodeCheckFn(node, bindingAttrs) || typeof skipCheck === 'function' && skipCheck(node)) {\n          return false;\n        } // when creating sub bindingCache if is for tmp binding\n        // skip same element that has forOf binding the  forOf is alredy parsed\n\n\n        const attrObj = getAttributesObject(node);\n        const hasSkipChildParseBindings = checkSkipChildParseBindings(attrObj, bindingAttrs);\n        let iterateList = [];\n\n        if (hasSkipChildParseBindings.length) {\n          isSkipForOfChild = true;\n          iterateList = hasSkipChildParseBindings;\n        } else if (isRenderedTemplate && attrObj[bindingAttrs.tmp]) {\n          // skip current node parse if was called by node has template binding and already rendered\n          return true;\n        } else {\n          iterateList = Object.keys(attrObj);\n        }\n\n        iterateList.forEach(key => {\n          // skip for switch case and default bining\n          if (key !== bindingAttrs.case && key !== bindingAttrs.default) {\n            bindingCache = populateBindingCache({\n              node: node,\n              attrObj: attrObj,\n              bindingCache: bindingCache,\n              type: key\n            });\n          }\n        }); // after cache forOf skip parse child nodes\n\n        if (isSkipForOfChild) {\n          return false;\n        }\n\n        return true;\n      };\n\n      if (parseNode(rootNode, rootSkipCheck)) {\n        walkDOM(rootNode, parseNode);\n      }\n\n      return bindingCache;\n    };\n\n    /* eslint-disable no-invalid-this */\n\n    const createClonedElementCache = bindingData => {\n      const clonedElement = bindingData.el.cloneNode(true);\n      bindingData.fragment = document.createDocumentFragment();\n      bindingData.fragment.appendChild(clonedElement);\n      return bindingData;\n    };\n\n    const setCommentPrefix = bindingData => {\n      if (!bindingData || !bindingData.type) {\n        return bindingData;\n      }\n\n      let commentPrefix$1 = '';\n      const dataKeyMarker = bindingData.dataKey ? bindingData.dataKey.replace(REGEX.WHITESPACES, '_') : '';\n\n      switch (bindingData.type) {\n        case bindingAttrs.forOf:\n          commentPrefix$1 = commentPrefix.forOf;\n          break;\n\n        case bindingAttrs.if:\n          commentPrefix$1 = commentPrefix.if;\n          break;\n\n        case bindingAttrs.case:\n          commentPrefix$1 = commentPrefix.case;\n          break;\n\n        case bindingAttrs.default:\n          commentPrefix$1 = commentPrefix.default;\n          break;\n      }\n\n      bindingData.commentPrefix = commentPrefix$1 + dataKeyMarker;\n      return bindingData;\n    };\n    /**\r\n     * setDocRangeEndAfter\r\n     * @param {object} node\r\n     * @param {object} bindingData\r\n     * @description\r\n     * recursive execution to find last wrapping comment node\r\n     * and set as bindingData.docRange.setEndAfter\r\n     * if not found deleteContents will has no operation\r\n     * @return {undefined}\r\n     */\n\n\n    const setDocRangeEndAfter = (node, bindingData) => {\n      if (!bindingData.commentPrefix) {\n        setCommentPrefix(bindingData);\n      }\n\n      const startTextContent = bindingData.commentPrefix;\n      const endTextContent = startTextContent + commentSuffix;\n      node = node.nextSibling; // check last wrap comment node\n\n      if (node) {\n        if (node.nodeType === 8 && node.textContent === endTextContent) {\n          return bindingData.docRange.setEndBefore(node);\n        }\n\n        setDocRangeEndAfter(node, bindingData);\n      }\n    };\n    /**\r\n     * wrapCommentAround\r\n     * @param {object} bindingData\r\n     * @param {Node} node\r\n     * @return {object} DOM fragment\r\n     * @description\r\n     * wrap frament with comment node\r\n     */\n\n\n    const wrapCommentAround = (bindingData, node) => {\n      let prefix = '';\n\n      if (!bindingData.commentPrefix) {\n        setCommentPrefix(bindingData);\n      }\n\n      prefix = bindingData.commentPrefix;\n      const commentBegin = document.createComment(prefix);\n      const commentEnd = document.createComment(prefix + commentSuffix); // document fragment - logic for ForOf binding\n      // check node.parentNode because node could be from cache and no longer in DOM\n\n      if (node.nodeType === 11) {\n        node.insertBefore(commentBegin, node.firstChild);\n        node.appendChild(commentEnd);\n      } else if (node.parentNode) {\n        node.parentNode.insertBefore(commentBegin, node);\n        insertAfter(node.parentNode, commentEnd, node); // update bindingData details\n\n        bindingData.previousNonTemplateElement = node.previousSibling;\n        bindingData.nextNonTemplateElement = node.nextSibling;\n        bindingData.parentElement = node.previousSibling.parentElement;\n      }\n\n      return node;\n    };\n    /**\r\n     * removeElemnetsByCommentWrap\r\n     * @param {object} bindingData\r\n     * @return {undefined}\r\n     * @description remove elments by range\r\n     */\n\n\n    const removeElemnetsByCommentWrap = bindingData => {\n      if (!bindingData.docRange) {\n        bindingData.docRange = document.createRange();\n      }\n\n      try {\n        if (bindingData.previousNonTemplateElement) {\n          // update docRange start and end match the wrapped comment node\n          bindingData.docRange.setStartBefore(bindingData.previousNonTemplateElement.nextSibling);\n          setDocRangeEndAfter(bindingData.previousNonTemplateElement.nextSibling, bindingData);\n        } else {\n          // insert before next non template element\n          bindingData.docRange.setStartBefore(bindingData.parentElement.firstChild);\n          setDocRangeEndAfter(bindingData.parentElement.firstChild, bindingData);\n        }\n      } catch (err) {\n        console.log('error removeElemnetsByCommentWrap: ', err.message);\n      }\n\n      return bindingData.docRange.deleteContents();\n    };\n\n    const insertRenderedElements = (bindingData, fragment) => {\n      // insert rendered fragment after the previousNonTemplateElement\n      if (bindingData.previousNonTemplateElement) {\n        insertAfter(bindingData.parentElement, fragment, bindingData.previousNonTemplateElement);\n      } else {\n        // insert before next non template element\n        if (bindingData.nextNonTemplateElement) {\n          bindingData.parentElement.insertBefore(fragment, bindingData.nextNonTemplateElement);\n        } else if (bindingData.parentElement) {\n          // insert from parent\n          bindingData.parentElement.appendChild(fragment);\n        }\n      }\n    };\n\n    /* eslint-disable no-invalid-this */\n\n    const renderForOfBinding = ({\n      bindingData,\n      viewModel,\n      bindingAttrs: bindingAttrs$1\n    }) => {\n      if (!bindingData || !viewModel || !bindingAttrs$1) {\n        return;\n      }\n\n      let keys;\n      let iterationDataLength;\n      const iterationData = getViewModelPropValue(viewModel, bindingData.iterator);\n      let isRegenerate = false; // check iterationData and set iterationDataLength\n\n      if (isArray(iterationData)) {\n        iterationDataLength = iterationData.length;\n      } else if (isPlainObject(iterationData)) {\n        keys = Object.keys(iterationData);\n        iterationDataLength = keys.length;\n      } else {\n        // throw error but let script contince to run\n        return throwErrorMessage(null, 'iterationData is not an plain object or array');\n      } // flag as pared for-of logic with bindingData.type\n\n\n      if (!bindingData.type) {\n        bindingData.type = bindingAttrs.forOf;\n        wrapCommentAround(bindingData, bindingData.el);\n      } // assign forOf internal id to bindingData once\n\n\n      if (typeof bindingData.iterationSize === 'undefined') {\n        // store iterationDataLength\n        bindingData.iterationSize = iterationDataLength; // remove orignal node for-of attributes\n\n        bindingData.el.removeAttribute(bindingAttrs$1.forOf);\n        isRegenerate = true;\n      } else {\n        // only regenerate cache if iterationDataLength changed\n        isRegenerate = bindingData.iterationSize !== iterationDataLength; // update iterationSize\n\n        bindingData.iterationSize = iterationDataLength;\n      }\n\n      if (!isRegenerate) {\n        bindingData.iterationBindingCache.forEach(function (elementCache, i) {\n          if (!isEmptyObject(elementCache)) {\n            const iterationVm = createIterationViewModel({\n              bindingData: bindingData,\n              viewModel: viewModel,\n              iterationData: iterationData,\n              keys: keys,\n              index: i\n            });\n            renderIteration({\n              elementCache: elementCache,\n              iterationVm: iterationVm,\n              bindingAttrs: bindingAttrs$1,\n              isRegenerate: false\n            });\n          }\n        });\n        return;\n      } // generate forOfBinding elements into fragment\n\n\n      const fragment = generateForOfElements(bindingData, viewModel, bindingAttrs$1, iterationData, keys);\n      removeElemnetsByCommentWrap(bindingData); // insert fragment content into DOM\n\n      return insertRenderedElements(bindingData, fragment);\n    };\n\n    const createIterationViewModel = ({\n      bindingData,\n      viewModel,\n      iterationData,\n      keys,\n      index\n    }) => {\n      const iterationVm = {};\n      iterationVm[bindingData.iterator.alias] = keys ? iterationData[keys[index]] : iterationData[index]; // populate common binding data reference\n\n      iterationVm[bindingDataReference.rootDataKey] = viewModel.$root || viewModel;\n      iterationVm[bindingDataReference.currentData] = iterationVm[bindingData.iterator.alias];\n      iterationVm[bindingDataReference.currentIndex] = index;\n      return iterationVm;\n    };\n\n    const generateForOfElements = (bindingData, viewModel, bindingAttrs, iterationData, keys) => {\n      const fragment = document.createDocumentFragment();\n      const iterationDataLength = bindingData.iterationSize;\n      let clonedItem;\n      let iterationVm;\n      let iterationBindingCache;\n      let i = 0; // create or clear exisitng iterationBindingCache\n\n      if (isArray(bindingData.iterationBindingCache)) {\n        bindingData.iterationBindingCache.length = 0;\n      } else {\n        bindingData.iterationBindingCache = [];\n      } // generate forOf and append to DOM\n\n\n      for (i = 0; i < iterationDataLength; i += 1) {\n        clonedItem = cloneDomNode(bindingData.el); // create bindingCache per iteration\n\n        iterationBindingCache = createBindingCache({\n          rootNode: clonedItem,\n          bindingAttrs: bindingAttrs\n        });\n        bindingData.iterationBindingCache.push(iterationBindingCache);\n\n        if (!isEmptyObject(iterationBindingCache)) {\n          // create an iterationVm match iterator alias\n          iterationVm = createIterationViewModel({\n            bindingData: bindingData,\n            viewModel: viewModel,\n            iterationData: iterationData,\n            keys: keys,\n            index: i\n          });\n          renderIteration({\n            elementCache: bindingData.iterationBindingCache[i],\n            iterationVm: iterationVm,\n            bindingAttrs: bindingAttrs,\n            isRegenerate: true\n          });\n        }\n\n        fragment.appendChild(clonedItem);\n      }\n\n      return fragment;\n    };\n\n    /**\r\n     * forOfBinding\r\n     * @description\r\n     * DOM decleartive for binding.\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     */\n\n    const forOfBinding = (cache, viewModel, bindingAttrs) => {\n      const dataKey = cache.dataKey;\n\n      if (!dataKey || dataKey.length > maxDatakeyLength) {\n        return;\n      }\n\n      if (!cache.iterator) {\n        if (dataKey.length > maxDatakeyLength) {\n          return;\n        } // replace mess spaces with single space\n\n\n        cache.dataKey = cache.dataKey.replace(REGEX.WHITESPACES, ' ');\n        const forExpMatch = dataKey.match(REGEX.FOROF);\n\n        if (!forExpMatch) {\n          return;\n        }\n\n        cache.iterator = {};\n        cache.iterator.alias = forExpMatch[1].trim();\n\n        if (forExpMatch[2]) {\n          cache.iterator.dataKey = forExpMatch[2].trim();\n          cache.parentElement = cache.el.parentElement;\n          cache.previousNonTemplateElement = cache.el.previousSibling;\n          cache.nextNonTemplateElement = cache.el.nextSibling;\n        }\n      }\n\n      renderForOfBinding({\n        bindingData: cache,\n        viewModel: viewModel,\n        bindingAttrs: bindingAttrs\n      });\n    };\n\n    /**\r\n     * isTargetDomRemoved\r\n     * @description check if DOM between 'start' and 'end' comment tag has been removed\r\n     * @param {object} bindingData\r\n     * @return {boolean}\r\n     */\n\n    const isTargetDomRemoved = bindingData => {\n      let ret = false;\n\n      if (bindingData && bindingData.previousNonTemplateElement) {\n        const commentStartTextContent = bindingData.previousNonTemplateElement.textContent;\n        const endCommentTag = bindingData.previousNonTemplateElement.nextSibling;\n\n        if (endCommentTag.nodeType === 8) {\n          if (endCommentTag.textContent === commentStartTextContent + commentSuffix) {\n            ret = true;\n          }\n        }\n      }\n\n      return ret;\n    };\n\n    const renderIfBinding = ({\n      bindingData,\n      viewModel,\n      bindingAttrs\n    }) => {\n      if (!bindingData.fragment) {\n        return;\n      }\n\n      const isDomRemoved = isTargetDomRemoved(bindingData);\n      let rootElement = bindingData.el; // remove current old DOM.\n      // TODO: try preserve DOM\n\n      if (!isDomRemoved && !bindingData.isOnce) {\n        removeIfBinding(bindingData); // use fragment for create iterationBindingCache\n\n        rootElement = bindingData.fragment.firstChild.cloneNode(true);\n      } // walk clonedElement to create iterationBindingCache once\n\n\n      if (!bindingData.iterationBindingCache || !bindingData.hasIterationBindingCache) {\n        bindingData.iterationBindingCache = createBindingCache({\n          rootNode: rootElement,\n          bindingAttrs: bindingAttrs\n        });\n      } // only render if has iterationBindingCache\n      // means has other dataBindings to be render\n\n\n      if (!isEmptyObject(bindingData.iterationBindingCache)) {\n        bindingData.hasIterationBindingCache = true;\n        renderIteration({\n          elementCache: bindingData.iterationBindingCache,\n          iterationVm: viewModel,\n          bindingAttrs: bindingAttrs,\n          isRegenerate: true\n        });\n      } // insert to new rendered DOM\n      // TODO: check unnecessary insertion when DOM is preserved\n\n\n      insertRenderedElements(bindingData, rootElement);\n    };\n\n    const removeIfBinding = bindingData => {\n      removeElemnetsByCommentWrap(bindingData); // remove cache.IterationBindingCache to prevent memory leak\n\n      if (bindingData.hasIterationBindingCache) {\n        delete bindingData.iterationBindingCache;\n        delete bindingData.hasIterationBindingCache;\n      }\n    };\n\n    /**\r\n     * if-Binding\r\n     * @description\r\n     * DOM decleartive for binding.\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     */\n\n    const ifBinding = (cache, viewModel, bindingAttrs$1) => {\n      const dataKey = cache.dataKey; // isOnce only return if there is no child bindings\n\n      if (!dataKey || cache.isOnce && cache.hasIterationBindingCache === false) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      cache.type = cache.type || bindingAttrs.if;\n      const oldViewModelProValue = cache.elementData.viewModelPropValue; // getViewModelPropValue could be return undefined or null\n\n      const viewModelPropValue = getViewModelPropValue(viewModel, cache) || false; // do nothing if viewModel value not changed and no child bindings\n\n      if (oldViewModelProValue === viewModelPropValue && !cache.hasIterationBindingCache) {\n        return;\n      }\n\n      const shouldRender = Boolean(viewModelPropValue); // remove this cache from parent array\n\n      if (!shouldRender && cache.isOnce && cache.el.parentNode) {\n        removeElement(cache.el); // delete cache.fragment;\n\n        removeBindingInQueue({\n          viewModel: viewModel,\n          cache: cache\n        });\n        return;\n      } // store new show status\n\n\n      cache.elementData.viewModelPropValue = viewModelPropValue; // only create fragment once\n      // wrap comment tag around\n      // remove if attribute from original element to allow later dataBind parsing\n\n      if (!cache.fragment) {\n        wrapCommentAround(cache, cache.el);\n        cache.el.removeAttribute(bindingAttrs$1.if);\n        createClonedElementCache(cache);\n      }\n\n      if (!shouldRender) {\n        // remove element\n        removeIfBinding(cache);\n      } else {\n        // render element\n        renderIfBinding({\n          bindingData: cache,\n          viewModel: viewModel,\n          bindingAttrs: bindingAttrs$1\n        }); // if render once\n        // remove this cache from parent array if no child caches\n\n        if (cache.isOnce && !cache.hasIterationBindingCache) {\n          // delete cache.fragment;\n          removeBindingInQueue({\n            viewModel: viewModel,\n            cache: cache\n          });\n        }\n      }\n    };\n\n    const removeBindingInQueue = ({\n      viewModel,\n      cache\n    }) => {\n      let ret = false;\n\n      if (viewModel.APP.postProcessQueue) {\n        viewModel.APP.postProcessQueue.push(((cache, index) => () => {\n          cache[constants.PARENT_REF].splice(index, 1);\n        })(cache, cache[constants.PARENT_REF].indexOf(cache)));\n        ret = true;\n      }\n\n      return ret;\n    };\n\n    /**\r\n     * switch-Binding\r\n     * @description\r\n     * DOM decleartive switch binding.\r\n     * switch parent element wrap direct child with case bindings\r\n     * @param {object} cache\r\n     * @param {object} viewModel\r\n     * @param {object} bindingAttrs\r\n     */\n\n    const switchBinding = (cache, viewModel, bindingAttrs) => {\n      const dataKey = cache.dataKey;\n\n      if (!dataKey) {\n        return;\n      }\n\n      cache.elementData = cache.elementData || {};\n      const newExpression = getViewModelPropValue(viewModel, cache);\n\n      if (newExpression === cache.elementData.viewModelPropValue) {\n        return;\n      }\n\n      cache.elementData.viewModelPropValue = newExpression; // build switch cases if not yet defined\n\n      if (!cache.cases) {\n        const childrenElements = cache.el.children;\n\n        if (!childrenElements.length) {\n          return;\n        }\n\n        cache.cases = [];\n\n        for (let i = 0, elementLength = childrenElements.length; i < elementLength; i += 1) {\n          let caseData = null;\n\n          if (childrenElements[i].hasAttribute(bindingAttrs.case)) {\n            caseData = createCaseData(childrenElements[i], bindingAttrs.case);\n          } else if (childrenElements[i].hasAttribute(bindingAttrs.default)) {\n            caseData = createCaseData(childrenElements[i], bindingAttrs.default);\n            caseData.isDefault = true;\n          } // create fragment by clone node\n          // wrap with comment tag\n\n\n          if (caseData) {\n            wrapCommentAround(caseData, caseData.el); // remove binding attribute for later dataBind parse\n\n            if (caseData.isDefault) {\n              caseData.el.removeAttribute(bindingAttrs.default);\n            } else {\n              caseData.el.removeAttribute(bindingAttrs.case);\n            }\n\n            createClonedElementCache(caseData);\n            cache.cases.push(caseData);\n          }\n        }\n      }\n\n      if (cache.cases.length) {\n        let hasMatch = false; // do switch operation - reuse if binding logic\n\n        for (let j = 0, casesLength = cache.cases.length; j < casesLength; j += 1) {\n          let newCaseValue;\n\n          if (cache.cases[j].dataKey) {\n            // set back to dataKey if nothing found in viewModel\n            newCaseValue = getViewModelPropValue(viewModel, cache.cases[j]) || cache.cases[j].dataKey;\n          }\n\n          if (newCaseValue === cache.elementData.viewModelPropValue || cache.cases[j].isDefault) {\n            hasMatch = true; // render element\n\n            renderIfBinding({\n              bindingData: cache.cases[j],\n              viewModel: viewModel,\n              bindingAttrs: bindingAttrs\n            }); // remove other elements\n\n            removeUnmatchCases(cache.cases, j);\n            break;\n          }\n        } // no match remove all cases\n\n\n        if (!hasMatch) {\n          removeUnmatchCases(cache.cases);\n        }\n      }\n    };\n\n    function removeUnmatchCases(cases, matchedIndex) {\n      cases.forEach((caseData, index) => {\n        if (index !== matchedIndex || typeof matchedIndex === 'undefined') {\n          removeIfBinding(caseData); // remove cache.IterationBindingCache to prevent memory leak\n\n          if (caseData.hasIterationBindingCache) {\n            caseData.iterationBindingCache = null;\n            caseData.hasIterationBindingCache = false;\n          }\n        }\n      });\n    }\n\n    function createCaseData(node, attrName) {\n      const caseData = {\n        el: node,\n        dataKey: node.getAttribute(attrName),\n        type: attrName\n      };\n      return caseData;\n    }\n\n    /**\r\n     *  pubSub\r\n     * @description use jQuery object as pubSub\r\n     * @example EVENTS object strucure:\r\n     *  EVENTS = {\r\n            'EVENT-NAME': [{ 'comp-id': fn }],\r\n            'EVENT-NAME2': [{ 'comp-id': fn }]\r\n        };\r\n     */\n\n    const EVENTS = {};\n\n    const subscribeEvent = (instance = null, eventName = '', fn, isOnce = false) => {\n      if (!instance || !instance.compId || !eventName || typeof fn !== 'function') {\n        return;\n      }\n\n      let subscriber;\n      let isSubscribed = false;\n      eventName = eventName.replace(REGEX.WHITESPACES, '');\n      EVENTS[eventName] = EVENTS[eventName] || []; // check if already subscribed and update callback fn\n\n      isSubscribed = EVENTS[eventName].some(subscriber => {\n        if (subscriber[instance.compId]) {\n          subscriber[instance.compId] = fn.bind(instance.viewModel);\n          subscriber.isOnce = isOnce;\n          return true;\n        }\n      }); // push if not yet subscribe\n\n      if (!isSubscribed) {\n        subscriber = {};\n        subscriber[instance.compId] = fn.bind(instance.viewModel);\n        subscriber.isOnce = isOnce;\n        EVENTS[eventName].push(subscriber);\n      }\n    };\n\n    const subscribeEventOnce = (instance = null, eventName = '', fn) => {\n      subscribeEvent(instance, eventName, fn, true);\n    };\n\n    const unsubscribeEvent = (compId = '', eventName = '') => {\n      if (!compId || !eventName) {\n        return;\n      }\n\n      let i = 0;\n      let subscribersLength = 0;\n      let subscriber;\n      eventName = eventName.replace(REGEX.WHITESPACES, '');\n\n      if (EVENTS[eventName]) {\n        subscribersLength = EVENTS[eventName].length;\n\n        for (i = 0; i < subscribersLength; i += 1) {\n          subscriber = EVENTS[eventName][i];\n\n          if (subscriber[compId]) {\n            EVENTS[eventName].splice(i, 1);\n            break;\n          }\n        }\n      } // delete the event if no more subscriber\n\n\n      if (!EVENTS[eventName].length) {\n        delete EVENTS[eventName];\n      }\n    };\n    /**\r\n     * unsubscribeAllEvent\r\n     * @description unsubscribe all event by compId. eg when a component removed\r\n     * @param {string} compId\r\n     */\n\n\n    const unsubscribeAllEvent = (compId = '') => {\n      if (!compId) {\n        return;\n      }\n\n      Object.keys(EVENTS).forEach(eventName => {\n        unsubscribeEvent(compId, eventName);\n      });\n    };\n\n    const publishEvent = (eventName = '', ...args) => {\n      if (!eventName || !EVENTS[eventName]) {\n        return;\n      }\n\n      eventName = eventName.replace(REGEX.WHITESPACES, '');\n      EVENTS[eventName].forEach(subscriber => {\n        Object.keys(subscriber).forEach(compId => {\n          if (typeof subscriber[compId] === 'function') {\n            const ret = subscriber[compId](...args);\n\n            if (subscriber.isOnce) {\n              unsubscribeEvent(compId, eventName);\n            }\n\n            return ret;\n          }\n        });\n      });\n    };\n\n    let compIdIndex = 0;\n\n    class Binder {\n      constructor($rootElement, viewModel, bindingAttrs) {\n        if (!$rootElement || $rootElement.nodeType !== 1 || viewModel === null || typeof viewModel !== 'object') {\n          throw new TypeError('$rootElement or viewModel is invalid');\n        }\n\n        this.initRendered = false;\n        this.compId = compIdIndex += 1;\n        this.$rootElement = $rootElement;\n        this.viewModel = viewModel;\n        this.bindingAttrs = bindingAttrs;\n        this.render = debounceRaf(this.render, this);\n        this.isServerRendered = this.$rootElement.getAttribute(serverRenderedAttr) !== null; // inject instance into viewModel\n\n        this.viewModel.APP = this;\n        this.viewModel.$root = this.viewModel;\n        this.parseView(); // for jquery user set viewModel referece to $rootElement for easy debug\n        // otherwise use Expando to attach viewModel to $rootElement\n\n        this.$rootElement[bindingDataReference.rootDataKey] = this.viewModel;\n        return this;\n      }\n      /**\r\n       * parseView\r\n       * @description\r\n       * @return {this}\r\n       * traver from $rootElement to find each data-bind-* element\r\n       * then apply data binding\r\n       */\n\n\n      parseView() {\n        this.elementCache = createBindingCache({\n          rootNode: this.$rootElement,\n          bindingAttrs: this.bindingAttrs\n        }); // updateElementCache if server rendered on init\n\n        if (this.isServerRendered && !this.initRendered) {\n          this.updateElementCache({\n            templateCache: true\n          });\n        }\n\n        return this;\n      }\n      /**\r\n       * updateElementCache\r\n       * @param {object} opt\r\n       * @description call createBindingCache to parse view and generate bindingCache\r\n       */\n\n\n      updateElementCache(opt = {}) {\n        const elementCache = opt.elementCache || this.elementCache;\n\n        if (opt.allCache) {\n          // walk dom from root element to regenerate elementCache\n          this.elementCache = createBindingCache({\n            rootNode: this.$rootElement,\n            bindingAttrs: this.bindingAttrs\n          });\n        } // walk from first rendered template node to create/update child bindingCache\n\n\n        if (opt.allCache || opt.templateCache) {\n          if (elementCache[this.bindingAttrs.tmp] && elementCache[this.bindingAttrs.tmp].length) {\n            elementCache[this.bindingAttrs.tmp].forEach(cache => {\n              // set skipCheck as skipForOfParseFn whenever an node has\n              // both template and forOf bindings\n              // then the template bindingCache should be an empty object\n              let skipForOfParseFn = null;\n\n              if (cache.el.hasAttribute(this.bindingAttrs.forOf)) {\n                skipForOfParseFn = () => {\n                  return true;\n                };\n              }\n\n              cache.bindingCache = createBindingCache({\n                rootNode: cache.el,\n                bindingAttrs: this.bindingAttrs,\n                skipCheck: skipForOfParseFn,\n                isRenderedTemplate: opt.isRenderedTemplates\n              });\n            });\n          }\n        }\n      }\n\n      render(opt = {}) {\n        let updateOption = {};\n\n        if (!this.initRendered) {\n          // only update eventsBinding if server rendered\n          if (this.isServerRendered) {\n            this.$rootElement.removeAttribute(serverRenderedAttr);\n            updateOption = createBindingOption(bindingUpdateConditions.serverRendered, opt);\n          } else {\n            updateOption = createBindingOption(bindingUpdateConditions.init, opt);\n          }\n        } else {\n          // when called again only update visualBinding options\n          updateOption = createBindingOption('', opt);\n        } // create postProcessQueue before start rendering\n\n\n        this.postProcessQueue = []; // render and apply binding to template(s)\n        // this is an share function therefore passing 'this' context\n\n        renderTemplatesBinding({\n          ctx: this,\n          elementCache: this.elementCache,\n          updateOption: updateOption,\n          bindingAttrs: this.bindingAttrs,\n          viewModel: this.viewModel\n        }); // apply bindings to rest of the DOM\n\n        Binder.applyBinding({\n          ctx: this,\n          elementCache: this.elementCache,\n          updateOption: updateOption,\n          bindingAttrs: this.bindingAttrs,\n          viewModel: this.viewModel\n        }); // trigger postProcess\n\n        Binder.postProcess(this.postProcessQueue); // clear postProcessQueue\n\n        this.postProcessQueue.length = 0;\n        delete this.postProcessQueue;\n        this.initRendered = true;\n      }\n\n      static applyBinding({\n        ctx,\n        elementCache,\n        updateOption,\n        bindingAttrs,\n        viewModel\n      }) {\n        if (!elementCache || !updateOption) {\n          return;\n        } // the follow binding should be in order for better efficiency\n        // apply forOf Binding\n\n\n        if (updateOption.forOfBinding && elementCache[bindingAttrs.forOf] && elementCache[bindingAttrs.forOf].length) {\n          elementCache[bindingAttrs.forOf].forEach(cache => {\n            forOfBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply attr Binding\n\n\n        if (updateOption.attrBinding && elementCache[bindingAttrs.attr] && elementCache[bindingAttrs.attr].length) {\n          elementCache[bindingAttrs.attr].forEach(cache => {\n            attrBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply if Binding\n\n\n        if (updateOption.ifBinding && elementCache[bindingAttrs.if] && elementCache[bindingAttrs.if].length) {\n          elementCache[bindingAttrs.if].forEach(cache => {\n            ifBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply show Binding\n\n\n        if (updateOption.showBinding && elementCache[bindingAttrs.show] && elementCache[bindingAttrs.show].length) {\n          elementCache[bindingAttrs.show].forEach(cache => {\n            showBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply switch Binding\n\n\n        if (updateOption.switchBinding && elementCache[bindingAttrs.switch] && elementCache[bindingAttrs.switch].length) {\n          elementCache[bindingAttrs.switch].forEach(cache => {\n            switchBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply text binding\n\n\n        if (updateOption.textBinding && elementCache[bindingAttrs.text] && elementCache[bindingAttrs.text].length) {\n          elementCache[bindingAttrs.text].forEach(cache => {\n            textBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply cssBinding\n\n\n        if (updateOption.cssBinding && elementCache[bindingAttrs.css] && elementCache[bindingAttrs.css].length) {\n          elementCache[bindingAttrs.css].forEach(cache => {\n            cssBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply model binding\n\n\n        if (updateOption.modelBinding && elementCache[bindingAttrs.model] && elementCache[bindingAttrs.model].length) {\n          elementCache[bindingAttrs.model].forEach(cache => {\n            modelBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply change binding\n\n\n        if (updateOption.changeBinding && elementCache[bindingAttrs.change] && elementCache[bindingAttrs.change].length) {\n          elementCache[bindingAttrs.change].forEach(cache => {\n            changeBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        } // apply submit binding\n\n\n        if (updateOption.submitBinding && elementCache[bindingAttrs.submit] && elementCache[bindingAttrs.submit].length) {\n          elementCache[bindingAttrs.submit].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'submit',\n              viewModel\n            });\n          });\n        } // apply click binding\n\n\n        if (updateOption.clickBinding && elementCache[bindingAttrs.click] && elementCache[bindingAttrs.click].length) {\n          elementCache[bindingAttrs.click].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'click',\n              viewModel\n            });\n          });\n        } // apply double click binding\n\n\n        if (updateOption.dblclickBinding && elementCache[bindingAttrs.dblclick] && elementCache[bindingAttrs.dblclick].length) {\n          elementCache[bindingAttrs.dblclick].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'dblclick',\n              viewModel\n            });\n          });\n        } // apply blur binding\n\n\n        if (updateOption.blurBinding && elementCache[bindingAttrs.blur] && elementCache[bindingAttrs.blur].length) {\n          elementCache[bindingAttrs.blur].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'blur',\n              viewModel\n            });\n          });\n        } // apply focus binding\n\n\n        if (updateOption.focusBinding && elementCache[bindingAttrs.focus] && elementCache[bindingAttrs.focus].length) {\n          elementCache[bindingAttrs.focus].forEach(cache => {\n            createEventBinding({\n              cache,\n              forceRender: updateOption.forceRender,\n              type: 'focus',\n              viewModel\n            });\n          });\n        } // apply hover binding\n\n\n        if (updateOption.hoverBinding && elementCache[bindingAttrs.hover] && elementCache[bindingAttrs.hover].length) {\n          elementCache[bindingAttrs.hover].forEach(cache => {\n            hoverBinding(cache, viewModel, bindingAttrs, updateOption.forceRender);\n          });\n        }\n      }\n\n      static postProcess(tasks) {\n        if (!tasks || !tasks.length) {\n          return;\n        }\n\n        each(tasks, (index, task) => {\n          if (typeof task === 'function') {\n            try {\n              task();\n            } catch (err) {\n              throwErrorMessage(err, 'Error postProcess: ' + String(task));\n            }\n          }\n        });\n      }\n\n      subscribe(eventName = '', fn) {\n        subscribeEvent(this, eventName, fn);\n        return this;\n      }\n\n      subscribeOnce(eventName = '', fn) {\n        subscribeEventOnce(this, eventName, fn);\n        return this;\n      }\n\n      unsubscribe(eventName = '') {\n        unsubscribeEvent(this.compId, eventName);\n        return this;\n      }\n\n      unsubscribeAll() {\n        unsubscribeAllEvent(this.compId);\n        return this;\n      }\n\n      publish(eventName = '', ...args) {\n        publishEvent(eventName, ...args);\n        return this;\n      }\n\n    }\n\n    const renderTemplatesBinding = ({\n      ctx,\n      elementCache,\n      updateOption,\n      bindingAttrs,\n      viewModel\n    }) => {\n      if (!elementCache || !bindingAttrs) {\n        return false;\n      } // render and apply binding to template(s) and forOf DOM\n\n\n      if (elementCache[bindingAttrs.tmp] && elementCache[bindingAttrs.tmp].length) {\n        // when re-render call with {templateBinding: true}\n        // template and nested templates\n        if (updateOption.templateBinding) {\n          // overwrite updateOption with 'init' bindingUpdateConditions\n          updateOption = createBindingOption(bindingUpdateConditions.init);\n          elementCache[bindingAttrs.tmp].forEach($element => {\n            renderTemplate($element, viewModel, bindingAttrs, elementCache);\n          }); // update cache after all template(s) rendered\n\n          ctx.updateElementCache({\n            templateCache: true,\n            elementCache: elementCache,\n            isRenderedTemplates: true\n          });\n        } // enforce render even element is not in DOM tree\n\n\n        updateOption.forceRender = true; // apply bindings to rendered templates element\n\n        elementCache[bindingAttrs.tmp].forEach(cache => {\n          Binder.applyBinding({\n            elementCache: cache.bindingCache,\n            updateOption: updateOption,\n            bindingAttrs: bindingAttrs,\n            viewModel: viewModel\n          });\n        });\n      }\n\n      return true;\n    };\n    /**\r\n     * createBindingOption\r\n     * @param {string} condition\r\n     * @param {object} opt\r\n     * @description\r\n     * generate binding update option object by condition\r\n     * @return {object} updateOption\r\n     */\n\n\n    const createBindingOption = (condition = '', opt = {}) => {\n      const visualBindingOptions = {\n        templateBinding: false,\n        textBinding: true,\n        cssBinding: true,\n        ifBinding: true,\n        showBinding: true,\n        modelBinding: true,\n        attrBinding: true,\n        forOfBinding: true,\n        switchBinding: true\n      };\n      const eventsBindingOptions = {\n        changeBinding: true,\n        clickBinding: true,\n        dblclickBinding: true,\n        blurBinding: true,\n        focusBinding: true,\n        hoverBinding: true,\n        submitBinding: true\n      }; // this is visualBindingOptions but everything false\n      // concrete declear for performance purpose\n\n      const serverRenderedOptions = {\n        templateBinding: false,\n        textBinding: false,\n        cssBinding: false,\n        ifBinding: false,\n        showBinding: false,\n        modelBinding: false,\n        attrBinding: false,\n        forOfBinding: false,\n        switchBinding: false\n      };\n      let updateOption = {};\n\n      switch (condition) {\n        case bindingUpdateConditions.serverRendered:\n          updateOption = extend({}, eventsBindingOptions, serverRenderedOptions, opt);\n          break;\n\n        case bindingUpdateConditions.init:\n          // flag templateBinding to true to render tempalte(s)\n          opt.templateBinding = true;\n          updateOption = extend({}, visualBindingOptions, eventsBindingOptions, opt);\n          break;\n\n        default:\n          // when called again only update visualBinding options\n          updateOption = extend({}, visualBindingOptions, opt);\n      }\n\n      return updateOption;\n    };\n    /**\r\n     * renderIteration\r\n     * @param {object} opt\r\n     * @description\r\n     * render element's binding by supplied elementCache\r\n     * This function is desidned for FoOf, If, switch bindings\r\n     */\n\n    const renderIteration = ({\n      elementCache,\n      iterationVm,\n      bindingAttrs,\n      isRegenerate\n    }) => {\n      const bindingUpdateOption = isRegenerate ? createBindingOption(bindingUpdateConditions.init) : createBindingOption(); // enforce render even element is not in DOM tree\n\n      bindingUpdateOption.forceRender = true; // render and apply binding to template(s)\n      // this is an share function therefore passing current APP 'this' context\n      // viewModel is a dynamic generated iterationVm\n\n      renderTemplatesBinding({\n        ctx: iterationVm.$root ? iterationVm.$root.APP : iterationVm.APP,\n        elementCache: elementCache,\n        updateOption: bindingUpdateOption,\n        bindingAttrs: bindingAttrs,\n        viewModel: iterationVm\n      });\n      Binder.applyBinding({\n        elementCache: elementCache,\n        updateOption: bindingUpdateOption,\n        bindingAttrs: bindingAttrs,\n        viewModel: iterationVm\n      });\n    };\n\n    const createEventBinding = ({\n      cache = {},\n      forceRender = false,\n      type = '',\n      viewModel = {}\n    }) => {\n      const handlerName = cache.dataKey;\n      let paramList = cache.parameters;\n      let viewModelContext;\n      const APP = viewModel.APP || viewModel.$root.APP;\n\n      if (!type || !handlerName || !forceRender && !APP.$rootElement.contains(cache.el)) {\n        return;\n      }\n\n      const handlerFn = getViewModelValue(viewModel, handlerName);\n\n      if (typeof handlerFn === 'function') {\n        viewModelContext = resolveViewModelContext(viewModel, handlerName);\n        paramList = paramList ? resolveParamList(viewModel, paramList) : [];\n\n        const handlerWrap = e => {\n          let formData;\n          let args = [];\n\n          if (type === 'submit') {\n            formData = getFormData(e.currentTarget);\n            args = [e, e.currentTarget, formData].concat(paramList);\n          } else {\n            args = [e, e.currentTarget].concat(paramList);\n          }\n\n          handlerFn.apply(viewModelContext, args);\n        };\n\n        cache.el.removeEventListener(type, handlerWrap, false);\n        cache.el.addEventListener(type, handlerWrap, false);\n      }\n    };\n\n    let bindingAttrs$1 = bindingAttrs;\n    let templateSettings$1 = templateSettings;\n\n    const use = (settings = {}) => {\n      if (settings.bindingAttrs) {\n        bindingAttrs$1 = $.extend({}, settings.bindingAttrs);\n      }\n\n      if (settings.templateSettings) {\n        templateSettings$1 = $.extend({}, settings.templateSettings);\n      }\n    };\n\n    const init = ($rootElement, viewModel = null) => {\n      _.templateSettings = templateSettings$1;\n      return new Binder($rootElement, viewModel, bindingAttrs$1);\n    }; // expose to global\n\n\n    window.dataBind = {\n      use: use,\n      init: init,\n      version: '@version@'\n    };\n\n}());\n"]}